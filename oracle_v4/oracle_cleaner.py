# üî∏ oracle_cleaner.py ‚Äî –≤–æ—Ä–∫–µ—Ä –æ—á–∏—Å—Ç–∫–∏: —Ä–µ—Ç–µ–Ω—à–Ω –ø–æ –ë–î (7 —Å—É—Ç–æ–∫) –∏ Redis Streams (24 —á–∞—Å–∞)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_CLEANER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ / –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏
# –≥–ª—É–±–∏–Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)
DB_RETENTION_DAYS = 7
# –≥–ª—É–±–∏–Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Redis Streams (—á–∞—Å—ã, —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)
STREAM_RETENTION_HOURS = 24
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
READ_COUNT = 128
READ_BLOCK_MS = 30_000

# üî∏ –°—Ç—Ä–∏–º—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º —ç—Ç–∏—Ö —Å—Ç—Ä–∏–º–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º —É–±–æ—Ä–∫—É)
CLEAN_TRIGGER_STREAMS: Tuple[str, str] = (
    "oracle:mw_whitelist:reports_ready",
    "oracle:pack_lists:reports_ready",
)

# üî∏ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–æ–≤ oracle_v4 –¥–ª—è —á–∏—Å—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
ALL_ORACLE_STREAMS: Tuple[str, ...] = (
    "oracle:mw:reports_ready",
    "oracle:mw_sense:reports_ready",
    "oracle:mw_whitelist:reports_ready",
    "oracle:pack:reports_ready",
    "oracle:pack_sense:reports_ready",
    "oracle:pack_lists:build_ready",
    "oracle:pack_lists:reports_ready",
)

# üî∏ –ì—Ä—É–ø–ø–∞/–∏–º—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è ¬´—É–±–æ—Ä—â–∏–∫–∞¬ª
CLEANER_CONSUMER_GROUP = "oracle_cleaner_group"
CLEANER_CONSUMER_NAME = "oracle_cleaner_worker"


# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞ (–∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ oracle_v4_main.py —á–µ—Ä–µ–∑ run_safe_loop)
async def run_oracle_cleaner():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫ CLEANER: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    # —Å–æ–∑–¥–∞—ë–º consumer group –¥–ª—è –æ–±–æ–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä-—Å—Ç—Ä–∏–º–æ–≤ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    await _ensure_consumer_groups()

    log.debug("üöÄ –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ CLEANER (db_retention=%sd, stream_retention=%sh)", DB_RETENTION_DAYS, STREAM_RETENTION_HOURS)

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–∏–º–æ–≤
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=CLEANER_CONSUMER_GROUP,
                consumername=CLEANER_CONSUMER_NAME,
                streams={CLEAN_TRIGGER_STREAMS[0]: ">", CLEAN_TRIGGER_STREAMS[1]: ">"},
                count=READ_COUNT,
                block=READ_BLOCK_MS,
            )
            if not resp:
                continue

            # —Å–æ–±–∏—Ä–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç—Ä–∏–º—É
            to_ack: Dict[str, List[str]] = {}
            for stream_name, msgs in resp:
                ids = [mid for (mid, _fields) in msgs]
                if ids:
                    to_ack.setdefault(stream_name, []).extend(ids)

            # –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ —É–±–æ—Ä–∫–∏ (–ë–î + –≤—Å–µ —Å—Ç—Ä–∏–º—ã)
            await _cleanup_once()

            # ACK –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É–±–æ—Ä–∫–∏
            for stream_name, ids in to_ack.items():
                try:
                    await infra.redis_client.xack(stream_name, CLEANER_CONSUMER_GROUP, *ids)
                except Exception:
                    log.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ ACK –≤ —Å—Ç—Ä–∏–º–µ %s (ids=%s)", stream_name, ids)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è CLEANER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ CLEANER ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def _ensure_consumer_groups():
    # —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä-—Å—Ç—Ä–∏–º–∞ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    for s in CLEAN_TRIGGER_STREAMS:
        try:
            await infra.redis_client.xgroup_create(name=s, groupname=CLEANER_CONSUMER_GROUP, id="$", mkstream=True)
            log.debug("üì° –°–æ–∑–¥–∞–Ω–∞ consumer group –¥–ª—è —Å—Ç—Ä–∏–º–∞: %s", s)
        except Exception as e:
            # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —ç—Ç–æ –Ω–æ—Ä–º
            if "BUSYGROUP" in str(e):
                continue
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group –¥–ª—è —Å—Ç—Ä–∏–º–∞ %s", s)
            raise


async def _cleanup_once():
    # –≤—ã—á–∏—Å–ª–∏–º —Å—Ä–µ–∑—ã –¥–ª—è –ª–æ–≥–æ–≤ (SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç now() –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ë–î)
    cutoff_db = (datetime.utcnow().replace(tzinfo=None) - timedelta(days=DB_RETENTION_DAYS)).isoformat()
    # —É–±–æ—Ä–∫–∞ –ë–î (–≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    await _cleanup_db()
    # –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤ oracle_v4
    await _trim_streams()

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥-–∏—Ç–æ–≥ –ø—Ä–æ—Ö–æ–¥–∞
    log.info("üßπ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: cutoff_db=%s, stream_retention=%sh", cutoff_db, STREAM_RETENTION_HOURS)

async def _cleanup_db():
    retention_td = timedelta(days=DB_RETENTION_DAYS)

    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # —É–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã processed (MW/PACK)
            conf_mw_deleted = await conn.fetchval(
                """
                WITH del AS (
                  DELETE FROM oracle_conf_processed
                   WHERE window_end < (now() - $1)
                   RETURNING 1
                )
                SELECT COUNT(*)::int FROM del
                """,
                retention_td,
            )
            conf_pack_deleted = await conn.fetchval(
                """
                WITH del AS (
                  DELETE FROM oracle_pack_conf_processed
                   WHERE window_end < (now() - $1)
                   RETURNING 1
                )
                SELECT COUNT(*)::int FROM del
                """,
                retention_td,
            )

            # —É–¥–∞–ª—è–µ–º —à–∞–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ (–∫–∞—Å–∫–∞–¥–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã/sense/WL/BL)
            reports_deleted = await conn.fetchval(
                """
                WITH del AS (
                  DELETE FROM oracle_report_stat
                   WHERE window_end < (now() - $1)
                   RETURNING 1
                )
                SELECT COUNT(*)::int FROM del
                """,
                retention_td,
            )

    log.info(
        "üóÑÔ∏è DB cleanup: reports_deleted=%d, conf_mw_deleted=%d, conf_pack_deleted=%d (retention=%sd)",
        int(reports_deleted or 0),
        int(conf_mw_deleted or 0),
        int(conf_pack_deleted or 0),
        DB_RETENTION_DAYS,
    )

async def _trim_streams():
    # —É–∑–Ω–∞—ë–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è Redis (—Å–µ–∫—É–Ω–¥—ã, –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã) –∏ —Å—á–∏—Ç–∞–µ–º minid –¥–ª—è XTRIM MINID
    try:
        tsec, tmicro = await infra.redis_client.time()
    except Exception:
        # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ TIME –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
        now_ms = int(datetime.utcnow().timestamp() * 1000)
    else:
        now_ms = int(tsec) * 1000 + int(tmicro) // 1000

    cutoff_ms = now_ms - (STREAM_RETENTION_HOURS * 3600 * 1000)
    minid = f"{cutoff_ms}-0"

    total_deleted = 0
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç—Ä–∏–º–∞–º –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏ –ø–æ–¥—Ä–µ–∑–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for stream in ALL_ORACLE_STREAMS:
        try:
            # XTRIM MINID ~ <minid>
            deleted = await infra.redis_client.xtrim(name=stream, minid=minid, approximate=True)
            # redis-py –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö, –ø—Ä–∏–≤–µ–¥—ë–º –∫ int
            d = int(deleted or 0)
            total_deleted += d
            if d > 0:
                log.info("üßΩ Redis trim: stream=%s minid=%s deleted=%d", stream, minid, d)
        except Exception:
            log.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ XTRIM MINID –¥–ª—è —Å—Ç—Ä–∏–º–∞ %s (minid=%s)", stream, minid)

    # —Å–≤–æ–¥–∫–∞ –ø–æ —Å—Ç—Ä–∏–º–∞–º
    log.info("üì¨ Redis streams cleanup: total_deleted=%d, retention=%sh (minid=%s)", total_deleted, STREAM_RETENTION_HOURS, minid)