# oracle_adxbins_snapshot_aggregator.py ‚Äî ADX-bins snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: –≠—Ç–∞–ø 2 (–ø–æ–∑–∏—Ü–∏—è + –≤–∞–ª–∏–¥–∞—Ü–∏—è)

import os
import asyncio
import logging

import infra

log = logging.getLogger("ORACLE_ADXBINS_SNAP")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ consumer-–≥—Ä—É–ø–ø—ã –∏ —á—Ç–µ–Ω–∏—è
STREAM_NAME   = os.getenv("ORACLE_ADXBINS_STREAM",   "signal_log_queue")
GROUP_NAME    = os.getenv("ORACLE_ADXBINS_GROUP",    "oracle_adxbins_snap")
CONSUMER_NAME = os.getenv("ORACLE_ADXBINS_CONSUMER", "oracle_adxbins_1")
XREAD_COUNT   = int(os.getenv("ORACLE_ADXBINS_COUNT",    "50"))
XREAD_BLOCKMS = int(os.getenv("ORACLE_ADXBINS_BLOCK_MS", "1000"))

# üî∏ –°–æ–∑–¥–∞–Ω–∏–µ consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def _ensure_group():
    try:
        await infra.redis_client.xgroup_create(STREAM_NAME, GROUP_NAME, id="$", mkstream=True)
        log.info("‚úÖ Consumer group '%s' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ '%s'", GROUP_NAME, STREAM_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è Consumer group '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", GROUP_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group: %s", e)
            raise

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥ FOR UPDATE + –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
async def _load_position_and_strategy(position_uid: str):
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        async with conn.transaction():
            pos = await conn.fetchrow("""
                SELECT p.id, p.position_uid, p.symbol, p.direction, p.strategy_id,
                       p.pnl, p.status,
                       COALESCE(p.adx_checked, false) AS adx_checked
                FROM positions_v4 p
                WHERE p.position_uid = $1
                FOR UPDATE
            """, position_uid)

            if not pos:
                return None, None, ("skip", "position_not_found")
            if pos["status"] != "closed":
                return pos, None, ("skip", "position_not_closed")
            if pos["adx_checked"]:
                return pos, None, ("skip", "already_checked")

            strat = await conn.fetchrow("""
                SELECT id, enabled, COALESCE(market_watcher, false) AS mw
                FROM strategies_v4
                WHERE id = $1
            """, int(pos["strategy_id"]))
            if not strat or not strat["enabled"] or not strat["mw"]:
                return pos, strat, ("skip", "strategy_inactive_or_no_mw")

            return pos, strat, ("ok", "eligible")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –≠—Ç–∞–ø 1 ‚Üí debug; –≠—Ç–∞–ø 2 ‚Äî info –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async def run_oracle_adxbins_snapshot_aggregator():
    await _ensure_group()
    log.info("üöÄ ADX-BINS SNAP: —Å–ª—É—à–∞–µ–º '%s' (group=%s, consumer=%s)", STREAM_NAME, GROUP_NAME, CONSUMER_NAME)
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={STREAM_NAME: ">"},
                count=XREAD_COUNT,
                block=XREAD_BLOCKMS
            )
            if not resp:
                continue

            to_ack = []
            for _, records in resp:
                for msg_id, data in records:
                    try:
                        if data.get("status") != "closed":
                            to_ack.append(msg_id); continue

                        pos_uid = data.get("position_uid")
                        log.debug("[ADX-BINS SNAP] closed position received: uid=%s", pos_uid)

                        pos, strat, verdict = await _load_position_and_strategy(pos_uid)
                        v_code, v_reason = verdict
                        if v_code == "ok":
                            log.info("[ADX-BINS SNAP] eligible uid=%s strat=%s dir=%s pnl=%s",
                                     pos["position_uid"], pos["strategy_id"], pos["direction"], pos["pnl"])
                            # —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: —á–∏—Ç–∞–µ–º adx –∏–∑ PIS, –±–∏–Ω–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º
                        else:
                            log.info("[ADX-BINS SNAP] skip uid=%s reason=%s", pos_uid, v_reason)

                        to_ack.append(msg_id)

                    except Exception as e:
                        to_ack.append(msg_id)
                        log.exception("‚ùå ADX-BINS SNAP msg error %s: %s", msg_id, e)

            if to_ack:
                await infra.redis_client.xack(STREAM_NAME, GROUP_NAME, *to_ack)

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è ADX-BINS snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"); raise
        except Exception as e:
            log.exception("‚ùå XREADGROUP loop error: %s", e); await asyncio.sleep(1)