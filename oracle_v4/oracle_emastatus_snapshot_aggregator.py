# üî∏ oracle_emastatus_snapshot_aggregator.py ‚Äî EMA-status snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: –≠—Ç–∞–ø 1 (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∑–∞–∫—Ä—ã—Ç–∏–π)

import os
import asyncio
import logging

import infra

log = logging.getLogger("ORACLE_EMASTATUS_SNAP")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ consumer-–≥—Ä—É–ø–ø—ã –∏ —á—Ç–µ–Ω–∏—è
STREAM_NAME   = os.getenv("ORACLE_EMASTATUS_STREAM",   "signal_log_queue")
GROUP_NAME    = os.getenv("ORACLE_EMASTATUS_GROUP",    "oracle_emastatus_snap")
CONSUMER_NAME = os.getenv("ORACLE_EMASTATUS_CONSUMER", "oracle_emastatus_1")
XREAD_COUNT   = int(os.getenv("ORACLE_EMASTATUS_COUNT",    "50"))
XREAD_BLOCKMS = int(os.getenv("ORACLE_EMASTATUS_BLOCK_MS", "1000"))


# üî∏ –°–æ–∑–¥–∞–Ω–∏–µ consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def _ensure_group():
    try:
        await infra.redis_client.xgroup_create(STREAM_NAME, GROUP_NAME, id="$", mkstream=True)
        log.debug("‚úÖ Consumer group '%s' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ '%s'", GROUP_NAME, STREAM_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer group '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", GROUP_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group: %s", e)
            raise


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–≠—Ç–∞–ø 1 ‚Äî —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è)
async def run_oracle_emastatus_snapshot_aggregator():
    await _ensure_group()
    log.debug("üöÄ EMA-STATUS SNAP: —Å–ª—É—à–∞–µ–º '%s' (group=%s, consumer=%s)", STREAM_NAME, GROUP_NAME, CONSUMER_NAME)

    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={STREAM_NAME: ">"},
                count=XREAD_COUNT,
                block=XREAD_BLOCKMS,
            )
            if not resp:
                continue

            to_ack = []
            for _, records in resp:
                for msg_id, data in records:
                    to_ack.append(msg_id)
                    try:
                        status = data.get("status")
                        pos_uid = data.get("position_uid")
                        strategy_id = data.get("strategy_id")
                        direction = data.get("direction")
                        symbol = data.get("symbol")

                        if status != "closed":
                            log.debug("[EMA-STATUS SNAP] skip msg_id=%s uid=%s reason=status=%s", msg_id, pos_uid, status)
                            continue

                        # –≠—Ç–∞–ø 1: —Ç–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∞—Ü–∏—è —Ñ–∞–∫—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–±–µ–∑ —á—Ç–µ–Ω–∏—è –ë–î/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤)
                        log.info(
                            "[EMA-STATUS SNAP] closed position received: uid=%s sym=%s strat=%s dir=%s",
                            pos_uid, symbol, strategy_id, direction
                        )

                        # –≠—Ç–∞–ø 2/3 –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ:
                        # - —Ä–∞—Å—Å—á—ë—Ç –∞–≥—Ä–µ–≥–∞—Ç–∞ (–±–µ–∑ –∞–ø–¥–µ–π—Ç–∞ –ë–î)
                        # - –∞–ø–¥–µ–π—Ç —Ç–∞–±–ª–∏—Ü/Redis –∏ –æ—Ç–º–µ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏

                    except Exception as e:
                        log.exception("‚ùå EMA-STATUS SNAP msg error %s: %s", msg_id, e)

            if to_ack:
                await infra.redis_client.xack(STREAM_NAME, GROUP_NAME, *to_ack)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è EMA-STATUS snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.exception("‚ùå XREADGROUP loop error: %s", e)
            await asyncio.sleep(1)