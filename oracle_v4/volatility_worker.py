# volatility_worker.py

import asyncio
import logging
from datetime import datetime

import infra
import redis.exceptions

log = logging.getLogger("VOLATILITY_WORKER")

# üî∏ –ù—É–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ ts_ind
REQUIRED_PARAMS_TS = [
    "atr14",
    "rsi14",
    "bb20_2_0_upper",
    "bb20_2_0_lower",
    "bb20_2_0_center",
]

# üî∏ OHLCV –ø–æ–ª—è –∏–∑ ts (feed_v4)
REQUIRED_PARAMS_OHLCV = [
    "open",
    "high",
    "low",
    "close",
]

# üî∏ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
async def wait_for_all_volatility_data(symbol: str, open_time: str):
    redis = infra.redis_client
    tf = "m5"
    count = 20

    log.info(f"‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ volatility_state: {symbol} @ {open_time}")

    history = {"ts_ind": {}, "ts": {}}

    # --- ts_ind –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
    for param in REQUIRED_PARAMS_TS:
        key = f"ts_ind:{symbol}:{tf}:{param}"
        try:
            series = await redis.ts().revrange(key, "-", "+", count=count)
            series.reverse()
            values = [(datetime.utcfromtimestamp(ts / 1000), float(v)) for ts, v in series]
            history["ts_ind"][param] = values
            log.debug(f"üîç ts_ind:{param} ‚Äî {len(values)} —Ç–æ—á–µ–∫")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {key}: {e}")
            history["ts_ind"][param] = []

    # --- OHLCV –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ts:{symbol}:{tf}:{field}
    ohlcv_mapping = {
        "open": "o",
        "high": "h",
        "low": "l",
        "close": "c",
    }

    for label, short in ohlcv_mapping.items():
        key = f"ts:{symbol}:{tf}:{short}"
        try:
            series = await redis.ts().revrange(key, "-", "+", count=count)
            series.reverse()
            values = [(datetime.utcfromtimestamp(ts / 1000), float(v)) for ts, v in series]
            history["ts"][label] = values
            log.debug(f"üîç ts:{label} ‚Äî {len(values)} —Ç–æ—á–µ–∫")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {key}: {e}")
            history["ts"][label] = []

    # --- –õ–æ–≥: –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    log.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ OHLCV —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    # —Ä–∞—Å—á—ë—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async def handle_initiator(message: dict):
    symbol = message.get("symbol")
    tf = message.get("timeframe")
    indicator = message.get("indicator")
    open_time = message.get("open_time")
    status = message.get("status")

    if not all([symbol, tf, indicator, open_time, status]):
        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return

    if tf != "m5" or indicator != "atr14" or status != "ready":
        return

    log.info(f"üîî –°–∏–≥–Ω–∞–ª –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ volatility_state: {symbol} | {indicator} | {tf} | {open_time}")
    await wait_for_all_volatility_data(symbol, open_time)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_volatility_worker():
    redis = infra.redis_client
    stream_name = "indicator_stream"
    last_id = "$"

    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: indicator_stream (volatility)")

    while True:
        try:
            response = await redis.xread(
                streams={stream_name: last_id},
                count=10,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_initiator(parsed))
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ indicator_stream")
            await asyncio.sleep(1)