# üî∏ oracle_marketwatcher_backfill.py ‚Äî –≠—Ç–∞–ø 1: —á–∞—Å–æ–≤–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∞—Ä—Ç–∞ (2 –º–∏–Ω), –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ –∞–ø–¥–µ–π—Ç–æ–≤

import asyncio
import logging
from datetime import datetime, timezone

import infra

BATCH_LIMIT = 500  # —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
START_DELAY_SEC = 120  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø—Ä–æ–≥–æ–Ω–æ–º

log = logging.getLogger("ORACLE_MW_BF")


# üî∏ –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥: –Ω–∞–π—Ç–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ, –Ω–æ –Ω–µ —É—á—Ç—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä–∫—É
async def run_oracle_marketwatcher_backfill_once():
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT position_uid, strategy_id, symbol, direction, created_at
            FROM positions_v4
            WHERE status = 'closed'
              AND COALESCE(mrk_watcher_checked, false) = false
            ORDER BY created_at ASC
            LIMIT $1
        """, BATCH_LIMIT)

    cnt = len(rows)
    sample = [r["position_uid"] for r in rows[:10]]
    log.info("[BF-STAGE1] candidates=%d sample=%s", cnt, sample)


# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª: —Å—Ç–∞—Ä—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 –º–∏–Ω—É—Ç—ã, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
async def run_oracle_marketwatcher_backfill_periodic():
    log.info("üöÄ –≠—Ç–∞–ø 1 (BF): —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ %d —Å–µ–∫, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å", START_DELAY_SEC)
    await asyncio.sleep(START_DELAY_SEC)

    while True:
        try:
            await run_oracle_marketwatcher_backfill_once()
        except asyncio.CancelledError:
            log.info("‚èπÔ∏è –ë—ç–∫–æ—Ñ–∏–ª–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –±—ç–∫–æ—Ñ–∏–ª–ª–µ: %s", e)

        await asyncio.sleep(3600)  # 1 —á–∞—Å