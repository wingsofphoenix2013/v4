# volume_worker.py

import asyncio
import logging
from datetime import datetime

import infra
from core_io import save_flag

log = logging.getLogger("VOLUME_WORKER")


# üî∏ –†–∞—Å—á—ë—Ç —Ñ–ª–∞–≥–∞ volume_state
async def wait_for_volume_data(symbol: str, open_time: str):
    redis = infra.redis_client
    tf = "m5"
    count = 20

    log.debug(f"‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è volume_state: {symbol} @ {open_time}")

    key = f"ts:{symbol}:{tf}:v"
    try:
        series = await redis.ts().revrange(key, "-", "+", count=count)
        series.reverse()
        volume = [float(v) for _, v in series]
    except Exception as e:
        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±—ä—ë–º–æ–≤: {e}")
        return

    if len(volume) < 6:
        log.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞ ({len(volume)} —Ç–æ—á–µ–∫)")
        return

    V_curr = volume[-1]
    V_median = sorted(volume)[len(volume) // 2]
    V_last5 = volume[-5:]
    V_max_prev5 = max(volume[-6:-1])

    explanation = []
    result = None

    # --- SPIKE ---
    if V_curr >= 2 * V_median and V_curr >= 2 * V_max_prev5:
        result = "SPIKE"
        explanation.append("‚Ä¢ V_curr ‚â• 2√óV_median –∏ 2√óV_max_prev5 ‚Äî SPIKE")

    # --- RISING ---
    if not result:
        up_steps = sum(1 for i in range(1, 5) if V_last5[i] > V_last5[i - 1])
        if V_curr >= 1.5 * V_median and up_steps >= 3:
            result = "RISING"
            explanation.append(f"‚Ä¢ V_curr ‚â• 1.5√óV_median –∏ {up_steps} —à–∞–≥–æ–≤ —Ä–æ—Å—Ç–∞ ‚Äî RISING")
        else:
            explanation.append(f"‚Ä¢ RISING: V_curr={V_curr:.2f}, median={V_median:.2f}, —Ä–æ—Å—Ç–æ–≤={up_steps} ‚Äî FAILED")

    # --- FALLING ---
    if not result:
        down_steps = sum(1 for i in range(1, 5) if V_last5[i] < V_last5[i - 1])
        if V_curr <= 0.66 * V_median and down_steps >= 3:
            result = "FALLING"
            explanation.append(f"‚Ä¢ V_curr ‚â§ 0.66√óV_median –∏ {down_steps} —à–∞–≥–æ–≤ –ø–∞–¥–µ–Ω–∏—è ‚Äî FALLING")
        else:
            explanation.append(f"‚Ä¢ FALLING: V_curr={V_curr:.2f}, median={V_median:.2f}, —Å–ø–∞–¥–æ–≤={down_steps} ‚Äî FAILED")

    # --- STABLE ---
    if not result:
        in_range = 0.8 * V_median <= V_curr <= 1.2 * V_median
        if in_range and up_steps < 3 and down_steps < 3:
            result = "STABLE"
            explanation.append("‚Ä¢ –û–±—ä—ë–º –≤ –Ω–æ—Ä–º–µ –∏ –Ω–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ ‚Äî STABLE")
        else:
            explanation.append("‚Ä¢ STABLE –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî FAILED")

    if not result:
        result = "STABLE"
        explanation.append("‚Ä¢ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –¥—Ä—É–≥–∏—Ö —Ñ–ª–∞–≥–æ–≤ ‚Äî STABLE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    log.debug(f"üß≠ volume_state = {result} –¥–ª—è {symbol} @ {open_time}")
    for line in explanation:
        log.debug("    " + line)

    await save_flag(symbol, open_time, "volume_state", result)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ indicator_stream
async def handle_initiator(message: dict):
    symbol = message.get("symbol")
    tf = message.get("timeframe")
    indicator = message.get("indicator")
    open_time = message.get("open_time")
    status = message.get("status")

    if not all([symbol, tf, indicator, open_time, status]):
        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return

    if tf != "m5" or indicator != "atr14" or status != "ready":
        return

    log.debug(f"üîî –°–∏–≥–Ω–∞–ª –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ volume_state: {symbol} | {indicator} | {tf} | {open_time}")
    await wait_for_volume_data(symbol, open_time)


# üî∏ –í–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç indicator_stream
async def run_volume_worker():
    redis = infra.redis_client
    stream_name = "indicator_stream"
    last_id = "$"

    log.debug("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: indicator_stream (volume)")

    while True:
        try:
            response = await redis.xread(
                streams={stream_name: last_id},
                count=10,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_initiator(parsed))
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ indicator_stream")
            await asyncio.sleep(1)