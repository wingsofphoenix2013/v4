# üî∏ oracle_v4_main.py ‚Äî entrypoint oracle_v4: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤, –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤

import asyncio
import logging

from infra import (
    setup_logging,
    setup_pg,
    setup_redis_client,
)
from config_loader import (
    load_enabled_tickers,
    load_market_watcher_strategies,
    config_event_listener,
)

# üî∏ –∏–º–ø–æ—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ MW-–æ—Ç—á—ë—Ç–æ–≤
# from oracle_mw_snapshot import run_oracle_mw_snapshot, INITIAL_DELAY_SEC, INTERVAL_SEC
# üî∏ –∏–º–ø–æ—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ PACK-–æ—Ç—á—ë—Ç–æ–≤
from oracle_pack_snapshot import run_oracle_pack_snapshot as run_pack, INITIAL_DELAY_SEC as PACK_INIT_DELAY, INTERVAL_SEC as PACK_INTERVAL
# üî∏ –∏–º–ø–æ—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ confidence
# from oracle_mw_confidence import run_oracle_confidence
from oracle_pack_confidence import run_oracle_pack_confidence
# üî∏ –∏–º–ø–æ—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ –Ω–æ—á–Ω–æ–π –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ confidence
# from oracle_mw_confidence_night import run_oracle_confidence_night, INITIAL_DELAY_H, INTERVAL_H
# üî∏ –∏–º–ø–æ—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sense
# from oracle_mw_sense_stat import run_oracle_sense_stat

log = logging.getLogger("ORACLE_MAIN")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –≤–æ—Ä–∫–µ—Ä–∞
async def run_safe_loop(coro, label: str):
    while True:
        try:
            log.info(f"[{label}] üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro()
        except asyncio.CancelledError:
            log.info(f"[{label}] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
async def run_periodic(coro_func, interval_sec: int, label: str, initial_delay: int = 0):
    if initial_delay > 0:
        log.info(f"[{label}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {initial_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º")
        await asyncio.sleep(initial_delay)
    while True:
        try:
            log.info(f"[{label}] üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫")
            await coro_func()
        except asyncio.CancelledError:
            log.info(f"[{label}] ‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            raise
        except Exception:
            log.exception(f"[{label}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏")
        await asyncio.sleep(interval_sec)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    log.info("üì¶ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ oracle_v4")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    try:
        await setup_pg()
        await setup_redis_client()
        log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return

    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤: —Ç–∏–∫–µ—Ä—ã + —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å market_watcher=true
    try:
        await load_enabled_tickers()
        await load_market_watcher_strategies()
        log.info("üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–∏–∫–µ—Ä—ã –∏ –∫—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π market_watcher")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    log.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")

    # –°–ª—É—à–∞—Ç–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Ç–∏–∫–µ—Ä—ã + —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
    await asyncio.gather(
        run_safe_loop(config_event_listener, "CONFIG_LOADER"),
#         run_periodic(run_oracle_mw_snapshot, INTERVAL_SEC, "ORACLE_MW_SNAPSHOT", initial_delay=INITIAL_DELAY_SEC),
        run_periodic(run_pack, PACK_INTERVAL, "ORACLE_PACK_SNAPSHOT", initial_delay=PACK_INIT_DELAY),
        run_safe_loop(run_oracle_pack_confidence, "ORACLE_PACK_CONFIDENCE"),
#         run_safe_loop(run_oracle_confidence, "ORACLE_CONFIDENCE"),
#         run_periodic(run_oracle_confidence_night, INTERVAL_H * 60 * 60, "ORACLE_CONFIDENCE_NIGHT", initial_delay=INITIAL_DELAY_H * 60 * 60),
#         run_safe_loop(run_oracle_sense_stat, "ORACLE_SENSE_STAT"),
    )

if __name__ == "__main__":
    asyncio.run(main())