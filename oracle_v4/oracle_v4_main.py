# oracle_v4_main.py

import asyncio
import logging

from infra import (
    setup_logging,
    setup_pg,
    setup_redis_client,
)
from config_loader import (
    load_enabled_tickers,
    config_event_listener,
)

from trend_worker import run_trend_worker
from volatility_worker import run_volatility_worker
from volume_worker import run_volume_worker
from ema_position_worker import run_ema_position_worker
from ema_snapshot_worker import run_ema_snapshot_worker
from strategy_confidence_worker import run_strategy_confidence_worker
from voting_engine import run_voting_engine
from voter_analyzer import run_voter_analyzer

log = logging.getLogger("ORACLE_MAIN")

# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –≤–æ—Ä–∫–µ—Ä–∞
async def run_safe_loop(coro, label: str):
    while True:
        try:
            log.info(f"[{label}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro()
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)

# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def run_periodic(coro_func, interval_sec: int, label: str, initial_delay: int = 0):
    if initial_delay > 0:
        log.info(f"[{label}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {initial_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º")
        await asyncio.sleep(initial_delay)
    while True:
        try:
            log.info(f"[{label}] üîÅ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
            await coro_func()
        except Exception:
            log.exception(f"[{label}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
        await asyncio.sleep(interval_sec)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    log.info("üì¶ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ oracle_v4")

    try:
        await setup_pg()
        await setup_redis_client()
        log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return

    try:
        await load_enabled_tickers()
        log.info("üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    log.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")

    await asyncio.gather(
        run_safe_loop(config_event_listener, "CONFIG_LOADER"),
        run_safe_loop(run_trend_worker, "TREND_WORKER"),
        run_safe_loop(run_volatility_worker, "VOLATILITY_WORKER"),
        run_safe_loop(run_volume_worker, "VOLUME_WORKER"),
        run_safe_loop(run_ema_position_worker, "EMA_POSITION_WORKER"),
        run_safe_loop(run_ema_snapshot_worker, "EMA_SNAPSHOT_WORKER"),
        run_safe_loop(run_strategy_confidence_worker, "STRATEGY_CONFIDENCE_WORKER"),
        run_safe_loop(run_voting_engine, "VOTING_ENGINE"),
        run_safe_loop(lambda: run_periodic(run_voter_analyzer, 300, "VOTER_ANALYZER", initial_delay=90), "VOTER_ANALYZER"),
    )

if __name__ == "__main__":
    asyncio.run(main())