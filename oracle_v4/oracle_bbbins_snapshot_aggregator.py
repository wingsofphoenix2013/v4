# oracle_bbbins_snapshot_aggregator.py ‚Äî BB-bins snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: –≠—Ç–∞–ø 1 (–∫–∞—Ä–∫–∞—Å, –ø—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç–∏–π –∏–∑ Stream)

import os
import asyncio
import logging

import infra

log = logging.getLogger("ORACLE_BBBINS_SNAP")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ consumer-–≥—Ä—É–ø–ø—ã –∏ —á—Ç–µ–Ω–∏—è
STREAM_NAME   = os.getenv("ORACLE_BBBINS_STREAM",   "signal_log_queue")
GROUP_NAME    = os.getenv("ORACLE_BBBINS_GROUP",    "oracle_bbbins_snap")
CONSUMER_NAME = os.getenv("ORACLE_BBBINS_CONSUMER", "oracle_bbbins_1")
XREAD_COUNT   = int(os.getenv("ORACLE_BBBINS_COUNT",    "50"))
XREAD_BLOCKMS = int(os.getenv("ORACLE_BBBINS_BLOCK_MS", "1000"))

# üî∏ –°–æ–∑–¥–∞–Ω–∏–µ consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def _ensure_group():
    try:
        await infra.redis_client.xgroup_create(STREAM_NAME, GROUP_NAME, id="$", mkstream=True)
        log.info("‚úÖ Consumer group '%s' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ '%s'", GROUP_NAME, STREAM_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è Consumer group '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", GROUP_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group: %s", e)
            raise

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ (–≠—Ç–∞–ø 1)
async def run_oracle_bbbins_snapshot_aggregator():
    await _ensure_group()
    log.info("üöÄ BB-BINS SNAP: —Å–ª—É—à–∞–µ–º '%s' (group=%s, consumer=%s)", STREAM_NAME, GROUP_NAME, CONSUMER_NAME)
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={STREAM_NAME: ">"},
                count=XREAD_COUNT,
                block=XREAD_BLOCKMS
            )
            if not resp:
                continue

            to_ack = []
            for _, records in resp:
                for msg_id, data in records:
                    try:
                        if data.get("status") != "closed":
                            to_ack.append(msg_id)
                            continue
                        pos_uid = data.get("position_uid")
                        log.info("[BB-BINS SNAP] closed position received: uid=%s", pos_uid)
                        to_ack.append(msg_id)
                    except Exception as e:
                        to_ack.append(msg_id)
                        log.exception("‚ùå BB-BINS SNAP msg error %s: %s", msg_id, e)

            if to_ack:
                await infra.redis_client.xack(STREAM_NAME, GROUP_NAME, *to_ack)

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è BB-BINS snapshot –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"); raise
        except Exception as e:
            log.exception("‚ùå XREADGROUP loop error: %s", e); await asyncio.sleep(1)