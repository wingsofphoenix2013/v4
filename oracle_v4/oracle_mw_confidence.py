# oracle_mw_confidence.py ‚Äî –≤–æ—Ä–∫–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –¥–æ–≤–µ—Ä–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º MW-–æ—Ç—á—ë—Ç–æ–≤

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_MW_CONF")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REPORT_READY_STREAM = "oracle:mw:reports_ready"
STREAM_BLOCK_MS = 10_000
HISTORY_LOOKBACK_HOURS = 48
HISTORY_MAX_REPORTS = 12
CONFIDENCE_DECIMALS = 4


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def _clamp01(x: float) -> float:
    return max(0.0, min(1.0, x))


def _round_conf(x: float) -> float:
    return round(_clamp01(x), CONFIDENCE_DECIMALS)


def _compute_confidence(
    trades_total: int,
    closed_total: int,
    presence_count: int,
    streak: int,
    avg_inc_per_report: float,
    cross_confirmations: int,
) -> Tuple[float, Dict]:
    closed_total = max(1, closed_total)

    # trade_score: –¥–æ–ª—è —Å–¥–µ–ª–æ–∫
    share = trades_total / closed_total
    trade_score = min(1.0, share * 5.0)

    # temporal_score: —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    presence_rate = presence_count / HISTORY_MAX_REPORTS
    growth_factor = 1.0 if avg_inc_per_report >= 1.0 else avg_inc_per_report
    temporal_score = min(1.0, 0.7 * presence_rate + 0.2 * (streak / HISTORY_MAX_REPORTS) + 0.1 * growth_factor)

    # cross_bonus: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –æ–∫–Ω–∞—Ö
    cross_bonus = min(1.0, cross_confirmations / 3.0)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
    raw = 0.5 * trade_score + 0.35 * temporal_score + 0.15 * cross_bonus
    conf = _round_conf(raw)

    inputs = {
        "trades_total": trades_total,
        "closed_total": closed_total,
        "share": round(share, 4),
        "presence_count": presence_count,
        "streak": streak,
        "avg_inc_per_report": round(avg_inc_per_report, 4),
        "cross_confirmations": cross_confirmations,
        "raw": round(raw, 4),
    }
    return conf, inputs

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞-—Å–ª—É—à–∞—Ç–µ–ª—å
async def run_oracle_mw_confidence():
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    redis = infra.redis_client
    last_id = "$"
    log.info("üöÄ ORACLE_MW_CONF —Å–ª—É—à–∞–µ—Ç %s", REPORT_READY_STREAM)

    while True:
        try:
            # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è; –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ redis.asyncio –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç block
            result = await redis.xread({REPORT_READY_STREAM: last_id}, block=STREAM_BLOCK_MS)
            if not result:
                continue

            for stream_name, messages in result:
                for msg_id, fields in messages:
                    last_id = msg_id
                    # –ø–æ–ª–µ data –º–æ–∂–µ—Ç –±—ã—Ç—å str –∏–ª–∏ bytes
                    data_raw = fields.get("data") or fields.get(b"data")
                    if not data_raw:
                        log.debug("[CONF] –ø—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—è data (id=%s)", msg_id)
                        continue

                    # –ø–∞—Ä—Å–∏–º JSON
                    try:
                        payload = json.loads(data_raw)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (id=%s)", msg_id)
                        continue

                    report_id = payload.get("report_id")
                    if not report_id:
                        log.debug("[CONF] —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ report_id (id=%s)", msg_id)
                        continue

                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞
                    try:
                        updated, avg_conf = await _process_report_id(int(report_id))
                        log.info("[CONF] report_id=%s updated=%d avg_conf=%.4f", report_id, updated, avg_conf)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ report_id=%s", report_id)

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è ORACLE_MW_CONF –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception:
            log.exception("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è, –ø–∞—É–∑–∞ 5—Å")
            await asyncio.sleep(5)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ report_id
async def _process_report_id(report_id: int) -> Tuple[int, float]:
    now = datetime.utcnow()
    lookback_cut = now - timedelta(hours=HISTORY_LOOKBACK_HOURS)

    async with infra.pg_pool.acquire() as conn:
        header = await conn.fetchrow(
            "SELECT strategy_id, time_frame, created_at, closed_total FROM oracle_report_stat WHERE id = $1",
            report_id,
        )
        if not header:
            return 0, 0.0

        strategy_id = int(header["strategy_id"])
        report_time_frame = header["time_frame"]
        report_created_at = header["created_at"]
        closed_total = int(header["closed_total"] or 0)

        rows = await conn.fetch(
            """
            SELECT id, direction, timeframe, agg_type, agg_base, agg_state, trades_total
              FROM oracle_mw_aggregated_stat
             WHERE report_id = $1
            """,
            report_id,
        )
        if not rows:
            return 0, 0.0

        updates = []
        for r in rows:
            row_id = int(r["id"])
            trades_total = int(r["trades_total"] or 0)

            # –∏—Å—Ç–æ—Ä–∏—è –∑–∞ 2 —Å—É—Ç–æ–∫
            history = await conn.fetch(
                """
                SELECT a.trades_total
                  FROM oracle_mw_aggregated_stat a
                  JOIN oracle_report_stat r ON a.report_id = r.id
                 WHERE a.strategy_id = $1
                   AND a.time_frame = $2
                   AND a.direction = $3
                   AND a.timeframe = $4
                   AND a.agg_type = $5
                   AND a.agg_base = $6
                   AND a.agg_state = $7
                   AND r.created_at >= $8
                 ORDER BY r.created_at DESC
                 LIMIT $9
                """,
                strategy_id, report_time_frame, r["direction"], r["timeframe"],
                r["agg_type"], r["agg_base"], r["agg_state"],
                lookback_cut, HISTORY_MAX_REPORTS,
            )

            presence_count = len(history)
            streak = presence_count  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: –≤—Å–µ –ø–æ–¥—Ä—è–¥
            avg_inc = 0.0
            if presence_count >= 2:
                delta = int(history[0]["trades_total"]) - int(history[-1]["trades_total"])
                avg_inc = delta / max(1, presence_count - 1)

            conf, inputs = _compute_confidence(
                trades_total=trades_total,
                closed_total=closed_total,
                presence_count=presence_count,
                streak=streak,
                avg_inc_per_report=avg_inc,
                cross_confirmations=0,  # —É–ø—Ä–æ—â–µ–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            )
            updates.append((conf, inputs, row_id))

        updated = 0
        avg_conf = 0.0
        async with conn.transaction():
            for conf, inputs, row_id in updates:
                await conn.execute(
                    """
                    UPDATE oracle_mw_aggregated_stat
                       SET confidence = $1,
                           confidence_inputs = $2,
                           confidence_updated_at = now()
                     WHERE id = $3
                    """,
                    conf, json.dumps(inputs, separators=(",", ":"), ensure_ascii=False), row_id,
                )
                updated += 1
                avg_conf += conf

        return updated, (avg_conf / updated if updated else 0.0)


# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è main
async def run_safe_oracle_confidence():
    while True:
        try:
            await run_oracle_mw_confidence()
        except asyncio.CancelledError:
            raise
        except Exception:
            log.exception("‚ùå ORACLE_MW_CONF —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5—Å")
            await asyncio.sleep(5)