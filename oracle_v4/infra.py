# üî∏ infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ oracle_v4: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, PG/Redis, –∫—ç—à–∏ —Ç–∏–∫–µ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import os
import logging
import asyncpg
import redis.asyncio as aioredis

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pg_pool = None
redis_client = None
enabled_tickers: dict[str, dict] = {}
market_watcher_strategies: set[int] = set()
king_watcher_strategies: set[int] = set()  # NEW

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_INFRA")


# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    log.debug("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (DEBUG_MODE=%s)", DEBUG_MODE)


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async def setup_pg():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")

    pool = await asyncpg.create_pool(
        dsn=db_url,
        min_size=2,
        max_size=10,
        timeout=30.0,
    )
    # –±—ã—Å—Ç—Ä—ã–π health-check
    async with pool.acquire() as conn:
        await conn.execute("SELECT 1")

    globals()["pg_pool"] = pool
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
async def setup_redis_client():
    host = os.getenv("REDIS_HOST", "localhost")
    port = int(os.getenv("REDIS_PORT", 6379))
    password = os.getenv("REDIS_PASSWORD")
    use_tls = os.getenv("REDIS_USE_TLS", "false").lower() == "true"

    protocol = "rediss" if use_tls else "redis"
    redis_url = f"{protocol}://{host}:{port}"

    client = aioredis.from_url(
        redis_url,
        password=password,
        decode_responses=True,  # —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥
    )

    # health-check
    await client.ping()

    globals()["redis_client"] = client
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∏–∫–µ—Ä–æ–≤
def set_enabled_tickers(new_dict: dict):
    global enabled_tickers
    enabled_tickers = new_dict or {}
    log.debug("–ö—ç—à —Ç–∏–∫–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω (%d)", len(enabled_tickers))


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (king_watcher=true)
def set_king_watcher_strategies(id_set: set[int]):
    global king_watcher_strategies
    king_watcher_strategies = set(int(x) for x in (id_set or set()))
    log.info("üß† –ö—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π king_watcher –æ–±–Ω–æ–≤–ª—ë–Ω (%d)", len(king_watcher_strategies))

def add_king_watcher_strategy(sid: int):
    king_watcher_strategies.add(int(sid))
    log.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∫—ç—à king_watcher: %s (–∏—Ç–æ–≥–æ %d)", sid, len(king_watcher_strategies))

def remove_king_watcher_strategy(sid: int):
    king_watcher_strategies.discard(int(sid))
    log.debug("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ –∫—ç—à–∞ king_watcher: %s (–∏—Ç–æ–≥–æ %d)", sid, len(king_watcher_strategies))


# üî∏ –¢–æ—á–µ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∫—ç—à
def add_market_watcher_strategy(sid: int):
    market_watcher_strategies.add(int(sid))
    log.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∫—ç—à market_watcher: %s (–∏—Ç–æ–≥–æ %d)", sid, len(market_watcher_strategies))


# üî∏ –¢–æ—á–µ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫—ç—à–∞
def remove_market_watcher_strategy(sid: int):
    market_watcher_strategies.discard(int(sid))
    log.debug("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ –∫—ç—à–∞ market_watcher: %s (–∏—Ç–æ–≥–æ %d)", sid, len(market_watcher_strategies))

