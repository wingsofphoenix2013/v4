# üî∏ oracle_kingwatch_backfill.py ‚Äî KingWatcher backfill: –¥–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç –ø–æ —Ç—Ä–∏–ø–ª–µ—Ç—É MW –Ω–∞ –±–∞—Ä–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π king_watcher=true)
#     –û–±–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–∏ –∞–ø–¥–µ–π—Ç–µ —Ç—Ä–∏–ø–ª–µ—Ç–∞ –ø–∏—à–µ–º –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ "–≤—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏" –≤ —Å—Ç—Ä–æ–∫—É.

import os
import asyncio
import logging
from datetime import datetime, timezone
from decimal import Decimal, ROUND_HALF_UP

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_KW_BF")


# üî∏ –ö–æ–Ω—Ñ–∏–≥ backfill'–∞
BATCH_SIZE           = int(os.getenv("KW_BF_BATCH_SIZE", "500"))
MAX_CONCURRENCY      = int(os.getenv("KW_BF_MAX_CONCURRENCY", "12"))
SHORT_SLEEP_MS       = int(os.getenv("KW_BF_SLEEP_MS", "150"))
START_DELAY_SEC      = int(os.getenv("KW_BF_START_DELAY_SEC", "120"))
RECHECK_INTERVAL_SEC = int(os.getenv("KW_BF_RECHECK_INTERVAL_SEC", "300"))


# üî∏ –¢–∞–π–º—à–∞–≥–∏ TF
TF_ORDER = ("m5", "m15", "h1")
TF_STEP_SEC = {"m5": 300, "m15": 900, "h1": 3600}


# üî∏ SQL-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã (–ø–æ–∑–∏—Ü–∏–∏ –∫ –¥–æ–±–æ—Ä—É)
_CANDIDATES_SQL = """
SELECT p.position_uid
FROM positions_v4 p
JOIN strategies_v4 s ON s.id = p.strategy_id
WHERE p.status = 'closed'
  AND COALESCE(p.king_watcher_checked, false) = false
  AND s.enabled = true
  AND COALESCE(s.archived, false) = false
  AND COALESCE(s.king_watcher, false) = true
ORDER BY p.closed_at NULLS LAST, p.id
LIMIT $1
"""


# üî∏ SQL-–ø–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–∫–∞
_COUNT_SQL = """
SELECT COUNT(*)
FROM positions_v4 p
JOIN strategies_v4 s ON s.id = p.strategy_id
WHERE p.status = 'closed'
  AND COALESCE(p.king_watcher_checked, false) = false
  AND s.enabled = true
  AND COALESCE(s.archived, false) = false
  AND COALESCE(s.king_watcher, false) = true
"""


# üî∏ –£—Ç–∏–ª–∏—Ç–∞: floor –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞ TF (UTC, NAIVE)
def _floor_to_bar_open(dt_utc: datetime, tf: str) -> datetime:
    """
    –í—Ö–æ–¥/–≤—ã—Ö–æ–¥: naive-UTC datetime (tzinfo=None).
    –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª aware ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ naive UTC.
    """
    if dt_utc.tzinfo is not None:
        dt_utc = dt_utc.astimezone(timezone.utc).replace(tzinfo=None)
    step_sec = TF_STEP_SEC[tf]
    epoch = int(dt_utc.timestamp())  # —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ UTC
    floored = (epoch // step_sec) * step_sec
    return datetime.utcfromtimestamp(floored)  # naive UTC


# üî∏ –ß—Ç–µ–Ω–∏–µ MW regime_code –∏–∑ indicator_marketwatcher_v4
async def _load_imw_code(symbol: str, tf: str, bar_open: datetime):
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        code = await conn.fetchval(
            """
            SELECT regime_code
            FROM indicator_marketwatcher_v4
            WHERE symbol = $1 AND timeframe = $2 AND open_time = $3
            """,
            symbol, tf, bar_open
        )
    return None if code is None else int(code)


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏/—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ñ–∏–ª—å—Ç—Ä—ã KW)
async def _load_pos_and_strat(position_uid: str):
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        pos = await conn.fetchrow(
            """
            SELECT p.id, p.position_uid, p.symbol, p.direction, p.strategy_id,
                   p.pnl, p.status, p.created_at,
                   COALESCE(p.king_watcher_checked, false) AS kw_checked
            FROM positions_v4 p
            WHERE p.position_uid = $1
            """,
            position_uid,
        )
        if not pos or pos["status"] != "closed" or bool(pos["kw_checked"]):
            return pos, None, ("skip", "not_applicable")

        strat = await conn.fetchrow(
            """
            SELECT id, enabled, COALESCE(archived, false) AS archived, COALESCE(king_watcher, false) AS kw
            FROM strategies_v4
            WHERE id = $1
            """,
            int(pos["strategy_id"]),
        )
        if (not strat) or (not strat["enabled"]) or bool(strat["archived"]) or (not strat["kw"]):
            return pos, strat, ("skip", "strategy_inactive_or_no_kw")

    return pos, strat, ("ok", "eligible")


# üî∏ –°–æ–±—Ä–∞—Ç—å —Ç—Ä–∏–ø–ª–µ—Ç MW-–∫–æ–¥–æ–≤ –ø–æ –±–∞—Ä—É –æ—Ç–∫—Ä—ã—Ç–∏—è
async def _collect_mw_triplet(symbol: str, created_at_utc: datetime):
    per_tf = {}
    # –ø–µ—Ä–µ–±–æ—Ä TF; —Ç—Ä–∏–ø–ª–µ—Ç –≤–∞–ª–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ—Ö —Ç—Ä—ë—Ö
    for tf in TF_ORDER:
        bar_open = _floor_to_bar_open(created_at_utc, tf)
        code = await _load_imw_code(symbol, tf, bar_open)
        if code is None:
            return None
        per_tf[tf] = code
    return f"{per_tf['m5']}-{per_tf['m15']}-{per_tf['h1']}"


# üî∏ Advisory-lock –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∫–ª—é—á (class_id=10 –¥–ª—è KW)
async def _advisory_xact_lock(conn, key_text: str):
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hashtext(text) ‚Üí int4; –¥–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: (class_id, hash)
    await conn.execute(
        "SELECT pg_advisory_xact_lock($1::int4, hashtext($2)::int4)",
        10, key_text
    )


# üî∏ Claim –ø–æ–∑–∏—Ü–∏–∏ –∏ –∞–ø–¥–µ–π—Ç –∞–≥—Ä–µ–≥–∞—Ç–∞ (–≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ total + Redis KV
async def _aggregate_with_claim(pos, triplet: str):
    pg = infra.pg_pool
    redis = infra.redis_client

    s_id = int(pos["strategy_id"])
    dir_ = str(pos["direction"])

    pnl_raw = pos["pnl"]
    pnl = Decimal(str(pnl_raw if pnl_raw is not None else "0")).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)
    is_win = 1 if pnl > Decimal("0") else 0

    async with pg.acquire() as conn:
        async with conn.transaction():
            # claim –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –≥–æ–Ω–æ–∫ —Å live/–¥—Ä—É–≥–∏–º–∏ backfill
            claimed = await conn.fetchrow(
                """
                UPDATE positions_v4
                SET king_watcher_checked = true
                WHERE position_uid = $1
                  AND status = 'closed'
                  AND COALESCE(king_watcher_checked, false) = false
                RETURNING position_uid
                """,
                pos["position_uid"]
            )
            if not claimed:
                return ("claimed_by_other", 0, 0)

            # advisory-lock –Ω–∞ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–π –∫–ª—é—á
            await _advisory_xact_lock(conn, f"{s_id}:{dir_}:{triplet}")

            # –ø—Ä–µ–¥—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            await conn.execute(
                """
                INSERT INTO positions_kw_stat_comp
                  (strategy_id, direction, status_triplet,
                   closed_trades, won_trades, pnl_sum, winrate, avg_pnl, updated_at,
                   strategy_total_closed_trades)
                VALUES ($1,$2,$3, 0,0,0,0,0,NOW(), 0)
                ON CONFLICT (strategy_id, direction, status_triplet) DO NOTHING
                """,
                s_id, dir_, triplet
            )

            # –∞–ø–¥–µ–π—Ç –∞–≥—Ä–µ–≥–∞—Ç–∞ –ø–æ–¥ FOR UPDATE
            row = await conn.fetchrow(
                """
                SELECT closed_trades, won_trades, pnl_sum
                FROM positions_kw_stat_comp
                WHERE strategy_id=$1 AND direction=$2 AND status_triplet=$3
                FOR UPDATE
                """,
                s_id, dir_, triplet
            )
            c0 = int(row["closed_trades"]); w0 = int(row["won_trades"]); s0 = Decimal(str(row["pnl_sum"]))
            c = c0 + 1
            w = w0 + is_win
            s = (s0 + pnl).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)
            wr = (Decimal(w) / Decimal(c)).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)
            ap = (s / Decimal(c)).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

            await conn.execute(
                """
                UPDATE positions_kw_stat_comp
                SET closed_trades=$4, won_trades=$5, pnl_sum=$6, winrate=$7, avg_pnl=$8, updated_at=NOW()
                WHERE strategy_id=$1 AND direction=$2 AND status_triplet=$3
                """,
                s_id, dir_, triplet,
                c, w, str(s), str(wr), str(ap)
            )

            # —Å—á–∏—Ç–∞–µ–º "–≤—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏" –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
            total_n = await conn.fetchval(
                """
                SELECT COALESCE(SUM(closed_trades), 0)
                FROM positions_kw_stat_comp
                WHERE strategy_id=$1 AND direction=$2
                """,
                s_id, dir_
            )
            await conn.execute(
                """
                UPDATE positions_kw_stat_comp
                SET strategy_total_closed_trades = $4
                WHERE strategy_id=$1 AND direction=$2 AND status_triplet=$3
                """,
                s_id, dir_, triplet, int(total_n)
            )

            # Redis KV –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            try:
                await redis.set(
                    f"oracle:kw:comp:{s_id}:{dir_}:{triplet}",
                    f'{{"closed_trades": {c}, "winrate": {float(wr):.4f}}}'
                )
            except Exception:
                log.debug("Redis SET failed (kw comp)")

            return ("aggregated", c, int(total_n))


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ UID
async def _process_uid(uid: str):
    try:
        pos, strat, verdict = await _load_pos_and_strat(uid)
        if not pos:
            return ("skip", "pos_not_found")
        v_code, v_reason = verdict
        if v_code != "ok":
            return ("skip", v_reason)

        created_at = pos["created_at"]  # timestamp (naive UTC –ø–æ —Å—Ö–µ–º–µ)
        created_at_utc = created_at.astimezone(timezone.utc).replace(tzinfo=None) if created_at.tzinfo is not None else created_at

        triplet = await _collect_mw_triplet(pos["symbol"], created_at_utc)
        if triplet is None:
            return ("triplet_missing", "-")

        agg_status, closed_trades, total_trades = await _aggregate_with_claim(pos, triplet)
        if agg_status == "aggregated":
            win_flag = 1 if (pos["pnl"] is not None and pos["pnl"] > 0) else 0
            return ("aggregated", f"triplet={triplet} win={win_flag} closed_trades={closed_trades} strat_total={total_trades}")
        else:
            return ("claimed", "by_other")

    except Exception as e:
        log.exception("‚ùå KW-BF uid=%s error: %s", uid, e)
        return ("error", "exception")


# üî∏ –í—ã–±–æ—Ä–∫–∞ –ø–∞—á–∫–∏ UID'–æ–≤
async def _fetch_candidates(batch_size: int):
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        rows = await conn.fetch(_CANDIDATES_SQL, batch_size)
    return [r["position_uid"] for r in rows]


# üî∏ –ü–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤)
async def _count_remaining():
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        val = await conn.fetchval(_COUNT_SQL)
    return int(val or 0)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª backfill'–∞
async def run_oracle_kingwatch_backfill():
    if START_DELAY_SEC > 0:
        log.debug("‚è≥ KW-BF: –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ %d —Å–µ–∫ (batch=%d, conc=%d)", START_DELAY_SEC, BATCH_SIZE, MAX_CONCURRENCY)
        await asyncio.sleep(START_DELAY_SEC)

    gate = asyncio.Semaphore(MAX_CONCURRENCY)

    while True:
        try:
            log.debug("üöÄ KW-BF: —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ö–æ–¥–∞")
            batch_idx = 0
            total_agg = total_missing = total_skip = total_claim = total_err = 0

            while True:
                uids = await _fetch_candidates(BATCH_SIZE)
                if not uids:
                    break

                batch_idx += 1
                agg = missing = skip = claim = err = 0
                results = []

                # –≤–æ—Ä–∫–µ—Ä –Ω–∞ –æ–¥–∏–Ω uid
                async def worker(one_uid: str):
                    async with gate:
                        res = await _process_uid(one_uid)
                        results.append(res)

                await asyncio.gather(*[asyncio.create_task(worker(u)) for u in uids])

                # —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞—Ç—á—É
                for status, _info in results:
                    if status == "aggregated":
                        agg += 1
                    elif status == "triplet_missing":
                        missing += 1
                    elif status == "claimed":
                        claim += 1
                    elif status == "skip":
                        skip += 1
                    else:
                        err += 1

                total_agg += agg
                total_missing += missing
                total_claim += claim
                total_skip += skip
                total_err += err

                remaining = None
                if batch_idx % 5 == 1:
                    try:
                        remaining = await _count_remaining()
                    except Exception:
                        remaining = None

                if remaining is None:
                    log.debug("[KW-BF] batch=%d size=%d aggregated=%d missing=%d claimed=%d skipped=%d errors=%d",
                             batch_idx, len(uids), agg, missing, claim, skip, err)
                else:
                    log.debug("[KW-BF] batch=%d size=%d aggregated=%d missing=%d claimed=%d skipped=%d errors=%d remaining‚âà%d",
                             batch_idx, len(uids), agg, missing, claim, skip, err, remaining)

                await asyncio.sleep(SHORT_SLEEP_MS / 1000)

            log.debug("‚úÖ KW-BF: –ø—Ä–æ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω batches=%d aggregated=%d missing=%d claimed=%d skipped=%d errors=%d ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %ds",
                     batch_idx, total_agg, total_missing, total_claim, total_skip, total_err, RECHECK_INTERVAL_SEC)

            await asyncio.sleep(RECHECK_INTERVAL_SEC)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è KW-BF –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.exception("‚ùå KW-BF loop error: %s", e)
            await asyncio.sleep(1)