# voting_engine.py

import asyncio
import logging
import json

import infra

log = logging.getLogger("VOTING_ENGINE")

REQUEST_STREAM = "strategy_voting_request"


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_voting_engine():
    redis = infra.redis_client

    try:
        stream_info = await redis.xinfo_stream(REQUEST_STREAM)
        last_id = stream_info["last-generated-id"]
    except Exception:
        last_id = "$"

    log.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: {REQUEST_STREAM} —Å last_id = {last_id}")

    while True:
        try:
            response = await redis.xread(
                streams={REQUEST_STREAM: last_id},
                count=50,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_voting_request(parsed))
                    last_id = msg_id
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Stream")
            await asyncio.sleep(1)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–®–ê–ì 3 ‚Äî –ø–æ–ª—É—á–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ)
async def handle_voting_request(msg: dict):
    try:
        strategy_id = int(msg["strategy_id"])
        direction = msg["direction"]
        tf_trigger = msg["tf"]
        symbol = msg["symbol"]
        log_uid = msg["log_uid"]

        log.info(f"üì• log_uid={log_uid} | strategy={strategy_id} | dir={direction} | tf={tf_trigger} | symbol={symbol}")

        redis = infra.redis_client
        snapshots = {}

        for tf in ["m5", "m15", "h1"]:
            key = f"snapshot:{symbol}:{tf}"
            val = await redis.get(key)

            if not val:
                log.warning(f"‚õî –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á {key}")
                continue

            try:
                data = json.loads(val)
                snapshot_id = data["snapshot_id"]
                pattern_id = data["pattern_id"]

                snapshots[tf] = {
                    "snapshot_id": snapshot_id,
                    "pattern_id": pattern_id
                }

                log.info(f"üîç {tf}: snapshot_id={snapshot_id}, pattern_id={pattern_id}")

            except Exception:
                log.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è {key}")
                continue

        if not snapshots:
            log.warning(f"‚ö†Ô∏è log_uid={log_uid} ‚Üí –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # üîπ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º confidence –∏ winrate
        votes_raw = {}

        for tf, obj in snapshots.items():
            for obj_type in ["snapshot", "pattern"]:
                object_id = obj[f"{obj_type}_id"] if f"{obj_type}_id" in obj else obj.get(f"{obj_type}_id")
                if object_id is None:
                    continue

                conf_key = f"confidence:{strategy_id}:{direction}:{tf}:{obj_type}:{object_id}"
                raw = await redis.get(conf_key)

                if not raw:
                    log.warning(f"‚õî –ù–µ—Ç confidence –∫–ª—é—á–∞: {conf_key}")
                    continue

                try:
                    conf = json.loads(raw)
                    winrate = conf.get("winrate")
                    confidence = conf.get("confidence_raw")

                    source_key = f"{obj_type}_{tf}"
                    votes_raw[source_key] = {
                        "object_id": object_id,
                        "winrate": winrate,
                        "confidence_raw": confidence
                    }

                    log.info(f"üì¶ {source_key}: winrate={winrate:.3f}, conf={confidence:.3f}")

                except Exception:
                    log.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {conf_key}")
                    continue

        if not votes_raw:
            log.warning(f"‚ö†Ô∏è log_uid={log_uid} ‚Üí –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return

        log.debug(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {json.dumps(votes_raw, indent=2)}")

        # (–¥–∞–ª—å—à–µ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)

    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")