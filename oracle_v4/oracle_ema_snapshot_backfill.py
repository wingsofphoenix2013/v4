# üî∏ oracle_ema_snapshot_backfill.py ‚Äî EMA snapshot backfill: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –±–∞—Ç—á=200, –±–µ–∑ –±—é–¥–∂–µ—Ç–∞, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞

import os
import asyncio
import logging
from datetime import datetime

import infra
from oracle_ema_snapshot_aggregator import _process_closed

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_EMA_SNAP_BF")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ –±—ç–∫–æ—Ñ–∏–ª–ª–∞
BATCH_LIMIT       = int(os.getenv("ORACLE_EMASNAP_BF_BATCH", "200"))            # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
CONCURRENCY       = int(os.getenv("ORACLE_EMASNAP_BF_CONCURRENCY", "4"))        # –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
START_DELAY_SEC   = int(os.getenv("ORACLE_EMASNAP_BF_START_DELAY_SEC", "120"))  # –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞
EMPTY_SLEEP_SEC   = int(os.getenv("ORACLE_EMASNAP_BF_EMPTY_SLEEP_SEC", "900"))  # –ø–∞—É–∑–∞ –µ—Å–ª–∏ —Ö–≤–æ—Å—Ç –ø—É—Å—Ç (5 –º–∏–Ω)
BATCH_PAUSE_MS    = int(os.getenv("ORACLE_EMASNAP_BF_BATCH_PAUSE_MS", "50"))    # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –∑–∞–¥–∞—á (—Å–º—è–≥—á–µ–Ω–∏–µ)
AFTER_CYCLE_SLEEP = int(os.getenv("ORACLE_EMASNAP_BF_AFTER_CYCLE_SLEEP", "5"))  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á-—Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫)

# üî∏ –í—ã–±–æ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ enabled & market_watcher, –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏ –Ω–µ —É—á—Ç–µ–Ω—ã)
async def _fetch_candidates(limit: int) -> list[str]:
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT p.position_uid
            FROM positions_v4 p
            JOIN strategies_v4 s ON s.id = p.strategy_id
            WHERE p.status = 'closed'
              AND COALESCE(p.emastatus_checked, false) = false
              AND s.enabled = true
              AND COALESCE(s.market_watcher, false) = true
            ORDER BY p.created_at ASC
            LIMIT $1
        """, limit)
    return [r["position_uid"] for r in rows]

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ position_uid (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞)
async def _process_one(uid: str) -> tuple[bool, str]:
    try:
        ok, reason = await _process_closed(uid)
        return ok, reason or "ok"
    except Exception as e:
        log.exception("‚ùå EMA-SNAP BF pos=%s error: %s", uid, e)
        return False, "exception"

# üî∏ –û–¥–∏–Ω –±–∞—Ç—á: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ CONCURRENCY –∑–∞–¥–∞—á, —Å—É–º–º–∞—Ä–Ω—ã–µ –ª–æ–≥–∏
async def _run_batch(candidates: list[str]) -> None:
    if not candidates:
        log.info("[EMA-SNAP BF] —Ö–≤–æ—Å—Ç –ø—É—Å—Ç, –∂–¥—ë–º %d —Å–µ–∫", EMPTY_SLEEP_SEC)
        await asyncio.sleep(EMPTY_SLEEP_SEC)
        return

    sem = asyncio.Semaphore(CONCURRENCY)
    processed = 0
    deferred  = 0
    skipped   = 0

    # üîπ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–¥–∞—á–∞ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º
    async def worker(uid: str):
        nonlocal processed, deferred, skipped
        async with sem:
            ok, reason = await _process_one(uid)
            if ok:
                processed += 1
            else:
                if reason in ("skip", "strategy_inactive"):
                    skipped += 1
                else:
                    deferred += 1
            await asyncio.sleep(BATCH_PAUSE_MS / 1000)

    # üîπ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    tasks = [asyncio.create_task(worker(uid)) for uid in candidates]
    # üîπ –ü—Ä–æ–≥—Ä–µ—Å—Å-–ª–æ–≥ —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    while True:
        done = sum(1 for t in tasks if t.done())
        if done == len(tasks):
            break
        log.debug("[EMA-SNAP BF] progress: %d/%d (proc=%d, def=%d, skip=%d)",
                  done, len(tasks), processed, deferred, skipped)
        await asyncio.sleep(2)

    await asyncio.gather(*tasks, return_exceptions=True)
    log.info("[EMA-SNAP BF] batch processed: %d, deferred=%d, skipped=%d (total=%d)",
             processed, deferred, skipped, len(candidates))

# üî∏ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª: –±–µ—Ä—ë–º –±–∞—Ç—á ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Üí –ø–æ–≤—Ç–æ—Ä—è–µ–º
async def run_oracle_ema_snapshot_backfill_periodic():
    log.info("üöÄ EMA-SNAP BF: —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ %d —Å–µ–∫, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=%d, –±–∞—Ç—á=%d, –±–µ–∑ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏",
             START_DELAY_SEC, CONCURRENCY, BATCH_LIMIT)
    await asyncio.sleep(START_DELAY_SEC)

    while True:
        try:
            start_ts = datetime.utcnow()
            candidates = await _fetch_candidates(BATCH_LIMIT)
            await _run_batch(candidates)
            log.debug("[EMA-SNAP BF] —Ü–∏–∫–ª –∑–∞–Ω—è–ª ~%ds, —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ %ds",
                      int((datetime.utcnow() - start_ts).total_seconds()), AFTER_CYCLE_SLEEP)
        except asyncio.CancelledError:
            log.info("‚èπÔ∏è EMA-SNAP BF –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.exception("‚ùå EMA-SNAP BF loop error: %s", e)

        await asyncio.sleep(AFTER_CYCLE_SLEEP)