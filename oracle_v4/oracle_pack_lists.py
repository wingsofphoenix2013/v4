# oracle_pack_lists.py ‚Äî –≤–æ—Ä–∫–µ—Ä PACK-lists: WL/BL v1 (sense+conf+wr) –∏ v2 (–º–∞—Å—Å–∞+wr), –æ–±–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è 7d

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_PACK_LISTS")

# üî∏ –°—Ç—Ä–∏–º-–∏—Å—Ç–æ—á–Ω–∏–∫ (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å SENSE ‚Üí –≤—Ä–µ–º—è —Å–æ–±–∏—Ä–∞—Ç—å —Å–ø–∏—Å–∫–∏)
PACK_LISTS_BUILD_READY_STREAM = "oracle:pack_lists:build_ready"
PACK_LISTS_CONSUMER_GROUP = "oracle_pack_lists_group"
PACK_LISTS_CONSUMER_NAME = "oracle_pack_lists_worker"

# üî∏ –°—Ç—Ä–∏–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å–ø–∏—Å–∫–∏ –≥–æ—Ç–æ–≤—ã
PACK_LISTS_REPORTS_READY_STREAM = "oracle:pack_lists:reports_ready"
PACK_LISTS_REPORTS_READY_MAXLEN = 10_000

# üî∏ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ª–µ–≥–∫–æ –º–µ–Ω—è—é—Ç—Å—è ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞)
SENSE_SCORE_MIN = 0.5     # v1: score_smoothed > 0.5 –Ω–∞ –æ—Å–∏ (pack_base+agg_type+agg_key)
CONF_MIN = 0.5            # v1: aggregated confidence > 0.5
WR_WL_MIN = 0.55          # –≤ whitelist –ø—Ä–∏ winrate ‚â• 0.55
WR_BL_MAX = 0.5           # –≤ blacklist –ø—Ä–∏ winrate < 0.5
WL_V2_MIN_SHARE = 0.01    # v2: –¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ (1%)

# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_oracle_pack_lists():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫ PACK-lists: –Ω–µ—Ç PG/Redis")
        return

    # —Å–æ–∑–¥–∞–Ω–∏–µ consumer group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await infra.redis_client.xgroup_create(
            name=PACK_LISTS_BUILD_READY_STREAM,
            groupname=PACK_LISTS_CONSUMER_GROUP,
            id="$",
            mkstream=True,
        )
        log.debug("üì° –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: %s", PACK_LISTS_CONSUMER_GROUP)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            pass
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã Redis Stream")
            return

    log.debug("üöÄ –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ PACK-lists (WL/BL v1+v2)")

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=PACK_LISTS_CONSUMER_GROUP,
                consumername=PACK_LISTS_CONSUMER_NAME,
                streams={PACK_LISTS_BUILD_READY_STREAM: ">"},
                count=64,
                block=30_000,
            )
            if not resp:
                continue

            for _, msgs in resp:
                for msg_id, fields in msgs:
                    try:
                        payload = json.loads(fields.get("data", "{}"))
                        report_id = int(payload.get("report_id", 0))
                        strategy_id = int(payload.get("strategy_id", 0))
                        time_frame = payload.get("time_frame")
                        window_end = payload.get("window_end")

                        # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        if not (report_id and strategy_id and time_frame and window_end):
                            log.debug("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ %s", payload)
                            await infra.redis_client.xack(PACK_LISTS_BUILD_READY_STREAM, PACK_LISTS_CONSUMER_GROUP, msg_id)
                            continue

                        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û 7d
                        if str(time_frame) != "7d":
                            await infra.redis_client.xack(PACK_LISTS_BUILD_READY_STREAM, PACK_LISTS_CONSUMER_GROUP, msg_id)
                            continue

                        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ v1 (sense+conf+wr)
                        rows_total_v1, rows_wl_v1, rows_bl_v1 = await _build_lists_v1_7d(report_id, strategy_id, window_end)
                        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ v1
                        try:
                            payload_v1 = {
                                "strategy_id": int(strategy_id),
                                "report_id": int(report_id),
                                "time_frame": "7d",
                                "version": "v1",
                                "window_end": datetime.fromisoformat(str(window_end).replace("Z", "")).isoformat(),
                                "rows_total": int(rows_total_v1),
                                "rows_whitelist": int(rows_wl_v1),
                                "rows_blacklist": int(rows_bl_v1),
                                "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                            }
                            await infra.redis_client.xadd(
                                name=PACK_LISTS_REPORTS_READY_STREAM,
                                fields={"data": json.dumps(payload_v1, separators=(",", ":"))},
                                maxlen=PACK_LISTS_REPORTS_READY_MAXLEN,
                                approximate=True,
                            )
                            log.debug("[PACK_LISTS_REPORTS_READY] v1 sid=%s report_id=%s wl=%d bl=%d",
                                      strategy_id, report_id, rows_wl_v1, rows_bl_v1)
                        except Exception:
                            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ v1 —Å–æ–±—ã—Ç–∏—è –≤ %s", PACK_LISTS_REPORTS_READY_STREAM)

                        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ v2 (–º–∞—Å—Å–∞+wr, –±–µ–∑ sense/conf)
                        rows_total_v2, rows_wl_v2, rows_bl_v2 = await _build_lists_v2_7d(report_id, strategy_id, window_end)
                        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ v2
                        try:
                            payload_v2 = {
                                "strategy_id": int(strategy_id),
                                "report_id": int(report_id),
                                "time_frame": "7d",
                                "version": "v2",
                                "window_end": datetime.fromisoformat(str(window_end).replace("Z", "")).isoformat(),
                                "rows_total": int(rows_total_v2),
                                "rows_whitelist": int(rows_wl_v2),
                                "rows_blacklist": int(rows_bl_v2),
                                "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                            }
                            await infra.redis_client.xadd(
                                name=PACK_LISTS_REPORTS_READY_STREAM,
                                fields={"data": json.dumps(payload_v2, separators=(",", ":"))},
                                maxlen=PACK_LISTS_REPORTS_READY_MAXLEN,
                                approximate=True,
                            )
                            log.debug("[PACK_LISTS_REPORTS_READY] v2 sid=%s report_id=%s wl=%d bl=%d",
                                      strategy_id, report_id, rows_wl_v2, rows_bl_v2)
                        except Exception:
                            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ v2 —Å–æ–±—ã—Ç–∏—è –≤ %s", PACK_LISTS_REPORTS_READY_STREAM)

                        # ACK —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è v1 –∏ v2
                        await infra.redis_client.xack(PACK_LISTS_BUILD_READY_STREAM, PACK_LISTS_CONSUMER_GROUP, msg_id)

                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è PACK-lists")

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è PACK-lists –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ PACK-lists ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –°–±–æ—Ä WL/BL v1 (7d): sense>0.5, confidence>0.5, –ø–æ winrate ‚Üí WL/BL
async def _build_lists_v1_7d(report_id: int, strategy_id: int, window_end_iso: str) -> Tuple[int, int, int]:
    # –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    try:
        window_end_dt = datetime.fromisoformat(str(window_end_iso).replace("Z", ""))
    except Exception:
        log.exception("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç window_end (v1): %r", window_end_iso)
        return 0, 0, 0

    async with infra.pg_pool.acquire() as conn:
        # –æ—Å–∏, –ø—Ä–æ—à–µ–¥—à–∏–µ sense-—Ñ–∏–ª—å—Ç—Ä
        axes = await conn.fetch(
            """
            SELECT timeframe, direction, pack_base, agg_type, agg_key
            FROM oracle_pack_sense_stat
            WHERE report_id = $1
              AND time_frame = '7d'
              AND score_smoothed > $2
            """,
            report_id, float(SENSE_SCORE_MIN)
        )
        if not axes:
            # –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ v1-—Å—Ä–µ–∑
            async with conn.transaction():
                await conn.execute("DELETE FROM oracle_pack_whitelist WHERE strategy_id = $1 AND version = 'v1'", strategy_id)
            log.debug("‚ÑπÔ∏è PACK-lists v1: –Ω–µ—Ç –æ—Å–µ–π sense>%.2f (sid=%s, report=%s) ‚Äî v1 –æ—á–∏—â–µ–Ω", SENSE_SCORE_MIN, strategy_id, report_id)
            return 0, 0, 0

        selectors = {(r["timeframe"], r["direction"], r["pack_base"], r["agg_type"], r["agg_key"]) for r in axes}

        # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã aggregated_stat —Å –ø–æ—Ä–æ–≥–æ–º –ø–æ confidence
        cand_rows = await conn.fetch(
            """
            SELECT
              a.id          AS aggregated_id,
              a.strategy_id AS strategy_id,
              a.direction   AS direction,
              a.timeframe   AS timeframe,
              a.pack_base   AS pack_base,
              a.agg_type    AS agg_type,
              a.agg_key     AS agg_key,
              a.agg_value   AS agg_value,
              a.winrate     AS winrate,
              a.confidence  AS confidence
            FROM oracle_pack_aggregated_stat a
            WHERE a.report_id   = $1
              AND a.time_frame  = '7d'
              AND a.strategy_id = $2
              AND a.confidence  > $3
            """,
            report_id, strategy_id, float(CONF_MIN)
        )

        # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è WL/BL –ø–æ winrate
        to_insert = []
        rows_wl = 0
        rows_bl = 0
        for r in cand_rows:
            key = (r["timeframe"], r["direction"], r["pack_base"], r["agg_type"], r["agg_key"])
            if key not in selectors:
                continue

            wr = float(r["winrate"] or 0.0)

            if wr >= WR_WL_MIN:
                list_tag = "whitelist"; rows_wl += 1
            elif wr < WR_BL_MAX:
                list_tag = "blacklist"; rows_bl += 1
            else:
                continue

            to_insert.append((
                int(r["aggregated_id"]),
                int(r["strategy_id"]),
                str(r["direction"]),
                str(r["timeframe"]),
                str(r["pack_base"]),
                str(r["agg_type"]),
                str(r["agg_key"]),
                str(r["agg_value"]),
                float(wr),
                float(r["confidence"] or 0.0),
            ))

        # –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º v1-—Å—Ä–µ–∑
        async with conn.transaction():
            await conn.execute("DELETE FROM oracle_pack_whitelist WHERE strategy_id = $1 AND version = 'v1'", strategy_id)
            if to_insert:
                await conn.executemany(
                    """
                    INSERT INTO oracle_pack_whitelist (
                        aggregated_id, strategy_id, direction, timeframe,
                        pack_base, agg_type, agg_key, agg_value,
                        winrate, confidence, list, version
                    ) VALUES (
                        $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,CASE WHEN $9 >= $11 THEN 'whitelist' ELSE 'blacklist' END,'v1'
                    )
                    """,
                    [row + (WR_WL_MIN,) for row in to_insert]
                )

        rows_total = len(to_insert)
        log.debug("‚úÖ PACK-lists v1 –æ–±–Ω–æ–≤–ª—ë–Ω (7d): sid=%s report_id=%s rows_total=%d wl=%d bl=%d",
                  strategy_id, report_id, rows_total, rows_wl, rows_bl)
        return rows_total, rows_wl, rows_bl


# üî∏ –°–±–æ—Ä WL/BL v2 (7d): –ø–æ –¥–æ–ª–µ —Å–¥–µ–ª–æ–∫ –∏ winrate (–±–µ–∑ sense/conf)
async def _build_lists_v2_7d(report_id: int, strategy_id: int, window_end_iso: str) -> Tuple[int, int, int]:
    # –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    try:
        window_end_dt = datetime.fromisoformat(str(window_end_iso).replace("Z", ""))
    except Exception:
        log.exception("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç window_end (v2): %r", window_end_iso)
        return 0, 0, 0

    async with infra.pg_pool.acquire() as conn:
        # –æ–±—â–∏–π –æ–±—ä—ë–º –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —à–∞–ø–∫–∏ –æ—Ç—á—ë—Ç–∞ 7d
        closed_total = await conn.fetchval(
            "SELECT closed_total FROM oracle_report_stat WHERE id = $1",
            report_id
        )
        closed_total = int(closed_total or 0)
        if closed_total <= 0:
            # –æ—á–∏—â–∞–µ–º v2-—Å—Ä–µ–∑
            async with conn.transaction():
                await conn.execute("DELETE FROM oracle_pack_whitelist WHERE strategy_id = $1 AND version = 'v2'", strategy_id)
            log.debug("‚ÑπÔ∏è PACK-lists v2: closed_total=0 (sid=%s, report=%s) ‚Äî v2 –æ—á–∏—â–µ–Ω", strategy_id, report_id)
            return 0, 0, 0

        # –ø–æ—Ä–æ–≥ –ø–æ –¥–æ–ª–µ
        threshold = float(closed_total) * float(WL_V2_MIN_SHARE)

        # –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ 7d (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ sense/conf)
        cand_rows = await conn.fetch(
            """
            SELECT
              a.id            AS aggregated_id,
              a.strategy_id   AS strategy_id,
              a.direction     AS direction,
              a.timeframe     AS timeframe,
              a.pack_base     AS pack_base,
              a.agg_type      AS agg_type,
              a.agg_key       AS agg_key,
              a.agg_value     AS agg_value,
              a.trades_total  AS trades_total,
              a.winrate       AS winrate,
              a.confidence    AS confidence
            FROM oracle_pack_aggregated_stat a
            WHERE a.report_id = $1
              AND a.time_frame = '7d'
              AND a.strategy_id = $2
            """,
            report_id, strategy_id
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Å–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è WL/BL –ø–æ winrate
        to_insert = []
        rows_wl = 0
        rows_bl = 0
        for r in cand_rows:
            n = float(r["trades_total"] or 0.0)
            if n <= threshold:
                continue

            wr = float(r["winrate"] or 0.0)
            if wr >= WR_WL_MIN:
                list_tag = "whitelist"; rows_wl += 1
            elif wr < WR_BL_MAX:
                list_tag = "blacklist"; rows_bl += 1
            else:
                continue

            to_insert.append((
                int(r["aggregated_id"]),
                int(r["strategy_id"]),
                str(r["direction"]),
                str(r["timeframe"]),
                str(r["pack_base"]),
                str(r["agg_type"]),
                str(r["agg_key"]),
                str(r["agg_value"]),
                float(wr),
                float(r["confidence"] or 0.0),
                list_tag,
            ))

        # –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º v2-—Å—Ä–µ–∑
        async with conn.transaction():
            await conn.execute("DELETE FROM oracle_pack_whitelist WHERE strategy_id = $1 AND version = 'v2'", strategy_id)
            if to_insert:
                await conn.executemany(
                    """
                    INSERT INTO oracle_pack_whitelist (
                        aggregated_id, strategy_id, direction, timeframe,
                        pack_base, agg_type, agg_key, agg_value,
                        winrate, confidence, list, version
                    ) VALUES (
                        $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,'v2'
                    )
                    """,
                    to_insert
                )

        rows_total = len(to_insert)
        log.debug("‚úÖ PACK-lists v2 –æ–±–Ω–æ–≤–ª—ë–Ω (7d): sid=%s report_id=%s rows_total=%d wl=%d bl=%d (threshold=%.4f of %d)",
                  strategy_id, report_id, rows_total, rows_wl, rows_bl, threshold, closed_total)
        return rows_total, rows_wl, rows_bl