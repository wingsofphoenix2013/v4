# oracle_mw_sense.py ‚Äî –≤–æ—Ä–∫–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ sense_score –ø–æ MW-–∞–≥—Ä–µ–≥–∞—Ç–∞–º (–æ–Ω–ª–∞–π–Ω-–∞–¥–∞–ø—Ç–∞—Ü–∏—è, —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 7 –∑–Ω–∞—á–µ–Ω–∏—è–º)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import math
import logging
from collections import defaultdict
from typing import Dict, Tuple, List, Optional
from datetime import datetime

import infra

log = logging.getLogger("ORACLE_MW_SENSE")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ / –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
STREAM = "oracle:mw:reports_ready"      # –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ –≥–æ—Ç–æ–≤—ã—Ö MW-–æ—Ç—á—ë—Ç–∞—Ö
GROUP = "oracle_mw_sense_v1"            # —Å–≤–æ—è consumer group, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º
CONSUMER = "sense_worker_1"             # –∏–º—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
BLOCK_MS = 5000                         # —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è XREADGROUP (–º—Å)
BATCH_COUNT = 64                        # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑ —á–∏—Ç–∞–µ–º

SMOOTH_WINDOW_N = 7                     # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ 7 –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ)
METHOD_VERSION = "sense_v1_online_w7"   # –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ (–¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏)

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def _safe_div(a: float, b: float) -> float:
    # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    return (a / b) if b else 0.0

def _bin_entropy(q: float) -> float:
    # –±–∏–Ω–∞—Ä–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ª–æ–≥–∞—Ä–∏—Ñ–º–∞—Ö; 0<=q<=1
    if q <= 0.0 or q >= 1.0:
        return 0.0
    return -(q * math.log(q) + (1.0 - q) * math.log(1.0 - q))

def _geom_mean(values: List[float]) -> float:
    # –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ [0..1]; –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî 0
    if not values:
        return 0.0
    prod = 1.0
    n = 0
    for v in values:
        v_clamped = max(0.0, min(1.0, float(v)))
        prod *= v_clamped
        n += 1
        if prod == 0.0:
            return 0.0
    return prod ** (1.0 / n)

# üî∏ –ü–∞—Ä—Å–µ—Ä ISO-–≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è ‚Üí datetime (UTC-naive –ø–æ–¥ —Å—Ö–µ–º—É timestamp)
def _to_dt(x: Optional[str]) -> Optional[datetime]:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
    if not x:
        return None
    s = str(x)
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞ 'Z' (UTC)
    if s.endswith("Z"):
        try:
            return datetime.fromisoformat(s.replace("Z", "+00:00")).replace(tzinfo=None)
        except Exception:
            pass
    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ISO (—Å –∏–ª–∏ –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥, —Å —Ç–∞–π–º–∑–æ–Ω–æ–π –∏–ª–∏ –±–µ–∑)
    try:
        dt = datetime.fromisoformat(s)
        # –µ—Å–ª–∏ aware ‚Äî –¥–µ–ª–∞–µ–º naive (UTC –ø–æ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã)
        return dt.replace(tzinfo=None)
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ—Ç–∫—É—Å—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ/—Å—É—Ñ—Ñ–∏–∫—Å—ã
        base = s.split("+")[0].split("Z")[0]
        try:
            return datetime.fromisoformat(base).replace(tzinfo=None)
        except Exception:
            return None

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer group
async def _ensure_group(redis):
    # —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    try:
        await redis.xgroup_create(name=STREAM, groupname=GROUP, id="$", mkstream=True)
        log.info("–°–æ–∑–¥–∞–Ω–∞ consumer group '%s' –Ω–∞ —Å—Ç—Ä–∏–º–µ '%s'", GROUP, STREAM)
    except Exception:
        # –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ oracle_v4_main.py —á–µ—Ä–µ–∑ run_safe_loop)
async def run_oracle_mw_sense():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
    if infra.redis_client is None or infra.pg_pool is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    await _ensure_group(infra.redis_client)
    log.info("üì° ORACLE_MW_SENSE –∑–∞–ø—É—â–µ–Ω (group=%s, consumer=%s)", GROUP, CONSUMER)

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    while True:
        try:
            messages = await infra.redis_client.xreadgroup(
                groupname=GROUP,
                consumername=CONSUMER,
                streams={STREAM: ">"},
                count=BATCH_COUNT,
                block=BLOCK_MS,
            )
            if not messages:
                continue

            # —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤: [(stream, [(id, {fields}), ...])]
            for _stream, entries in messages:
                for msg_id, fields in entries:
                    try:
                        data = json.loads(fields.get("data", "{}"))
                        await _process_report_event(data)
                        await infra.redis_client.xack(STREAM, GROUP, msg_id)
                    except asyncio.CancelledError:
                        log.info("‚èπÔ∏è ORACLE_MW_SENSE –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É (msg_id=%s)", msg_id)
                        raise
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è sense, msg_id=%s", msg_id)
                        # –Ω–µ ack ‚Äî –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ pending –¥–ª—è —Ä–µ—Ç—Ä–∞—è
        except asyncio.CancelledError:
            log.info("‚èπÔ∏è ORACLE_MW_SENSE –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ORACLE_MW_SENSE")
            await asyncio.sleep(2.0)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è REPORT_READY
async def _process_report_event(evt: Dict):
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è
    if not evt or "report_id" not in evt:
        return

    report_id = int(evt["report_id"])
    strategy_id = int(evt.get("strategy_id", 0))
    time_frame = str(evt.get("time_frame", ""))  # '7d'|'14d'|'28d'
    window_start = _to_dt(evt.get("window_start"))
    window_end = _to_dt(evt.get("window_end"))

    # –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    log.info("[SENSE] –æ–±—Ä–∞–±–æ—Ç–∫–∞ report_id=%s strategy_id=%s time_frame=%s", report_id, strategy_id, time_frame)

    async with infra.pg_pool.acquire() as conn:
        # —á–∏—Ç–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –æ—Ç—á—ë—Ç–∞
        rows = await conn.fetch(
            """
            SELECT direction, timeframe, agg_base, agg_state,
                   trades_total, trades_wins, winrate, confidence
              FROM oracle_mw_aggregated_stat
             WHERE report_id = $1
            """,
            report_id,
        )
        if not rows:
            log.info("[SENSE] report_id=%s ‚Äî –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫", report_id)
            return

        # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ (direction, timeframe, agg_base) ‚Üí –≤–Ω—É—Ç—Ä–∏ –ø–æ agg_state
        group_map: Dict[Tuple[str, str, str], List[dict]] = defaultdict(list)
        for r in rows:
            key = (r["direction"], r["timeframe"], r["agg_base"])
            group_map[key].append(
                {
                    "agg_state": r["agg_state"],
                    "t": int(r["trades_total"]),
                    "w": int(r["trades_wins"]),
                    "wr": float(r["winrate"]),
                    "conf": float(r["confidence"]),
                }
            )

        # –ø–æ–ª—É—á–∏–º —á–∏—Å–ª–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–¥–ª—è coverage)
        t_all_by_dir: Dict[str, int] = {"long": 0, "short": 0}
        if window_start and window_end and strategy_id:
            t_all_rows = await conn.fetch(
                """
                SELECT direction, COUNT(*)::int AS cnt
                  FROM positions_v4
                 WHERE strategy_id = $1
                   AND status = 'closed'
                   AND closed_at >= $2
                   AND closed_at <  $3
                 GROUP BY direction
                """,
                strategy_id, window_start, window_end,
            )
            for rr in t_all_rows:
                t_all_by_dir[str(rr["direction"])] = int(rr["cnt"])

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã ‚Üí –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ç–æ–≥–æ–≤—ã–π sense
        for (direction, timeframe, agg_base), items in group_map.items():
            # —Å—É–º–º–∞—Ä–Ω—ã–µ t –∏ w
            T = sum(x["t"] for x in items)
            W = sum(x["w"] for x in items)
            wr_overall = _safe_div(W, T)

            # coverage: –¥–æ–ª—è —Å–¥–µ–ª–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –ø–æ–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω–æ–π –±–∞–∑–æ–π
            T_all_dir = t_all_by_dir.get(direction, 0)
            coverage = max(0.0, min(1.0, _safe_div(T, T_all_dir))) if T_all_dir else 0.0

            # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ p_s –∏ —ç–Ω—Ç—Ä–æ–ø–∏—è
            K_obs = sum(1 for x in items if x["t"] > 0)
            if T > 0 and K_obs > 1:
                p = [x["t"] / T for x in items if x["t"] > 0]
                H = -sum(pi * math.log(pi) for pi in p)
                H_max = math.log(len(p))
                entropy_norm = _safe_div(H, H_max)
            else:
                entropy_norm = 0.0

            # information gain (–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            if T > 0:
                H_y = _bin_entropy(wr_overall)
                H_y_s = 0.0
                for x in items:
                    if x["t"] <= 0:
                        continue
                    ps = x["t"] / T
                    H_y_s += ps * _bin_entropy(x["wr"])
                IG = max(0.0, H_y - H_y_s)
                ig_norm = _safe_div(IG, H_y) if H_y > 0 else 0.0
            else:
                ig_norm = 0.0

            # —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π confidence
            if T > 0:
                confidence_avg = sum((x["t"] / T) * max(0.0, min(1.0, x["conf"])) for x in items if x["t"] > 0)
            else:
                confidence_avg = 0.0

            # –∏—Ç–æ–≥–æ–≤—ã–π raw sense ‚Äî –±–µ–∑ —Ä—É—á–Ω—ã—Ö –≤–µ—Å–æ–≤ (–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ 4 —Ñ–∞–∫—Ç–æ—Ä–æ–≤)
            sense_raw = _geom_mean([coverage, entropy_norm, ig_norm, confidence_avg])

            # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º N=7 –∑–Ω–∞—á–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ): –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            prev_rows = await conn.fetch(
                """
                SELECT sense_score_raw
                  FROM oracle_mw_sense_stat
                 WHERE strategy_id = $1
                   AND time_frame  = $2
                   AND timeframe   = $3
                   AND direction   = $4
                   AND agg_base    = $5
                 ORDER BY computed_at DESC
                 LIMIT $6
                """,
                strategy_id, time_frame, timeframe, direction, agg_base, SMOOTH_WINDOW_N - 1,
            )
            history = [float(r["sense_score_raw"]) for r in prev_rows]
            smooth_vals = [sense_raw] + history
            sense_smooth = sum(smooth_vals) / len(smooth_vals)

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (UPSERT –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É —Ä–µ–ø–æ—Ä—Ç–∞)
            await conn.execute(
                """
                INSERT INTO oracle_mw_sense_stat (
                    report_id, strategy_id, time_frame, timeframe, direction, agg_base,
                    sense_score_raw, sense_score_smooth,
                    coverage, entropy_norm, ig_norm, confidence_avg,
                    trades_total, states_count,
                    method_version, smoothing_window_n, inputs
                )
                VALUES (
                    $1, $2, $3, $4, $5, $6,
                    $7, $8,
                    $9, $10, $11, $12,
                    $13, $14,
                    $15, $16, $17
                )
                ON CONFLICT (report_id, strategy_id, time_frame, timeframe, direction, agg_base)
                DO UPDATE SET
                    sense_score_raw     = EXCLUDED.sense_score_raw,
                    sense_score_smooth  = EXCLUDED.sense_score_smooth,
                    coverage            = EXCLUDED.coverage,
                    entropy_norm        = EXCLUDED.entropy_norm,
                    ig_norm             = EXCLUDED.ig_norm,
                    confidence_avg      = EXCLUDED.confidence_avg,
                    trades_total        = EXCLUDED.trades_total,
                    states_count        = EXCLUDED.states_count,
                    method_version      = EXCLUDED.method_version,
                    smoothing_window_n  = EXCLUDED.smoothing_window_n,
                    inputs              = EXCLUDED.inputs,
                    computed_at         = now()
                """,
                report_id,
                strategy_id,
                time_frame,
                timeframe,
                direction,
                agg_base,
                round(float(sense_raw), 4),
                round(float(sense_smooth), 4),
                round(float(coverage), 4),
                round(float(entropy_norm), 4),
                round(float(ig_norm), 4),
                round(float(confidence_avg), 4),
                int(T),
                int(K_obs),
                METHOD_VERSION,
                SMOOTH_WINDOW_N,
                json.dumps(
                    {
                        "window_start": window_start.isoformat() if window_start else None,
                        "window_end": window_end.isoformat() if window_end else None,
                        "components": {
                            "coverage": coverage,
                            "entropy_norm": entropy_norm,
                            "ig_norm": ig_norm,
                            "confidence_avg": confidence_avg,
                        },
                        "totals": {"T": T, "W": W, "wr_overall": wr_overall},
                        "states": [
                            {
                                "agg_state": x["agg_state"],
                                "t": x["t"],
                                "w": x["w"],
                                "wr": x["wr"],
                                "conf": x["conf"],
                                "p": _safe_div(x["t"], T) if T > 0 else 0.0,
                            }
                            for x in items
                        ],
                        "version": METHOD_VERSION,
                        "smooth": {"window_n": SMOOTH_WINDOW_N},
                    },
                    separators=(",", ":"),
                ),
            )

            # –ª–æ–≥ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∫–ª—é—á—É
            log.info(
                "[SENSE] sid=%s win=%s tf=%s dir=%s base=%s | raw=%.4f smooth=%.4f | cov=%.4f ent=%.4f ig=%.4f conf=%.4f | T=%d K=%d",
                strategy_id, time_frame, timeframe, direction, agg_base,
                round(sense_raw, 4), round(sense_smooth, 4),
                round(coverage, 4), round(entropy_norm, 4), round(ig_norm, 4), round(confidence_avg, 4),
                int(T), int(K_obs),
            )

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–æ –æ—Ç—á—ë—Ç—É
    log.info("[SENSE] report_id=%s ‚Äî —Ä–∞—Å—á—ë—Ç sense –∑–∞–≤–µ—Ä—à—ë–Ω", report_id)