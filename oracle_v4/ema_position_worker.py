# ema_position_worker.py

import asyncio
import logging
from collections import Counter, defaultdict

import infra

log = logging.getLogger("EMA_WORKER")

VALID_EMAS = {"ema9", "ema21", "ema50", "ema100", "ema200"}
VALID_INTERVALS = {"m5", "m15", "h1"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
signal_counter = Counter()
signal_stats = defaultdict(lambda: defaultdict(int))


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis Stream
async def handle_ema_message(message: dict):
    symbol = message.get("symbol")
    interval = message.get("timeframe")
    indicator = message.get("indicator")
    open_time = message.get("open_time")
    status = message.get("status")

    if not all([symbol, interval, indicator, open_time, status]):
        return

    if indicator not in VALID_EMAS:
        return

    if interval not in VALID_INTERVALS:
        return

    if status != "ready":
        return

    signal_stats[symbol][interval] += 1
    log.info(f"üì• –°–∏–≥–Ω–∞–ª EMA: {symbol} | {interval} | {indicator} @ {open_time}")

    # –ö–∞–∂–¥—ã–µ 100 —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = sum(sum(v.values()) for v in signal_stats.values())
    if total % 100 == 0:
        log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∏–∫–µ—Ä–∞–º:")
        for sym in sorted(signal_stats):
            counts = signal_stats[sym]
            line = f"‚Ä¢ {sym}: " + ", ".join(f"{tf}={counts.get(tf, 0)}" for tf in sorted(VALID_INTERVALS))
            log.info(line)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_ema_position_worker():
    redis = infra.redis_client
    stream_name = "indicator_stream"

    # –°—Ç–∞—Ä—Ç—É–µ–º —Å —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ)
    try:
        stream_info = await redis.xinfo_stream(stream_name)
        last_id = stream_info["last-generated-id"]
    except Exception as e:
        log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å last ID –∏–∑ stream: {e}")
        last_id = "$"

    log.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ indicator_stream (EMA) —Å last_id = {last_id}")

    while True:
        try:
            response = await redis.xread(
                streams={stream_name: last_id},
                count=50,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_ema_message(parsed))
                    last_id = msg_id  # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ indicator_stream")
            await asyncio.sleep(1)