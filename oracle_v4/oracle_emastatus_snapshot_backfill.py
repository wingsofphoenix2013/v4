# üî∏ oracle_emastatus_snapshot_backfill.py ‚Äî EMA-status backfill: –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (batch=500, conc=10, —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 120—Å, –ø–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 4—á)

import os
import asyncio
import logging
from typing import List, Tuple

import infra
from oracle_emastatus_snapshot_aggregator import (
    _load_position_and_strategy,
    _load_ema_status_bins,
    _update_aggregates_and_mark,
)

log = logging.getLogger("ORACLE_EMASTATUS_BF")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ backfill'–∞
BATCH_SIZE           = int(os.getenv("EMA_BF_BATCH_SIZE", "500"))
MAX_CONCURRENCY      = int(os.getenv("EMA_BF_MAX_CONCURRENCY", "10"))
SHORT_SLEEP_MS       = int(os.getenv("EMA_BF_SLEEP_MS", "250"))           # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑–µ
START_DELAY_SEC      = int(os.getenv("EMA_BF_START_DELAY_SEC", "120"))    # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
RECHECK_INTERVAL_SEC = int(os.getenv("EMA_BF_RECHECK_INTERVAL_SEC", str(4*3600)))  # –ø–µ—Ä–µ–æ–±—Ö–æ–¥ —Ä–∞–∑ –≤ 4 —á–∞—Å–∞

_CANDIDATES_SQL = """
SELECT p.position_uid
FROM positions_v4 p
JOIN strategies_v4 s ON s.id = p.strategy_id
WHERE p.status = 'closed'
  AND COALESCE(p.emastatus_checked, false) = false
  AND s.enabled = true
  AND COALESCE(s.market_watcher, false) = true
ORDER BY p.closed_at NULLS LAST, p.id
LIMIT $1
"""

_COUNT_SQL = """
SELECT COUNT(*)
FROM positions_v4 p
JOIN strategies_v4 s ON s.id = p.strategy_id
WHERE p.status = 'closed'
  AND COALESCE(p.emastatus_checked, false) = false
  AND s.enabled = true
  AND COALESCE(s.market_watcher, false) = true
"""

# üî∏ –í—ã–±–æ—Ä–∫–∞ –ø–∞—á–∫–∏ UID'–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
async def _fetch_candidates(batch_size: int) -> List[str]:
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        rows = await conn.fetch(_CANDIDATES_SQL, batch_size)
    return [r["position_uid"] for r in rows]

# üî∏ –ü–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤)
async def _count_remaining() -> int:
    pg = infra.pg_pool
    async with pg.acquire() as conn:
        val = await conn.fetchval(_COUNT_SQL)
    return int(val or 0)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ UID (idempotent)
async def _process_uid(uid: str) -> Tuple[str, str]:
    try:
        pos, strat, verdict = await _load_position_and_strategy(uid)
        v_code, v_reason = verdict
        if v_code != "ok":
            return ("skip", v_reason)

        ema_bins = await _load_ema_status_bins(uid)
        await _update_aggregates_and_mark(pos, ema_bins)
        return ("updated", "ok" if ema_bins else "no_ema_status")

    except Exception as e:
        log.exception("‚ùå EMA-BF uid=%s error: %s", uid, e)
        return ("error", "exception")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª backfill'–∞: –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∑–∞—Ç–µ–º –ø–∞—É–∑–∞ RECHECK_INTERVAL_SEC
async def run_oracle_emastatus_snapshot_backfill():
    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    if START_DELAY_SEC > 0:
        log.info("‚è≥ EMA-BF: –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ %d —Å–µ–∫ (batch=%d, conc=%d)", START_DELAY_SEC, BATCH_SIZE, MAX_CONCURRENCY)
        await asyncio.sleep(START_DELAY_SEC)

    gate = asyncio.Semaphore(MAX_CONCURRENCY)

    while True:
        try:
            log.info("üöÄ EMA-BF: —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ö–æ–¥–∞")
            batch_idx = 0
            total_updated = total_skipped = total_errors = 0

            # –∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ ‚Äî –ø–æ–∫–∞ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            while True:
                uids = await _fetch_candidates(BATCH_SIZE)
                if not uids:
                    break

                batch_idx += 1
                updated = skipped = errors = 0

                results = []
                async def worker(one_uid: str):
                    async with gate:
                        res = await _process_uid(one_uid)
                        results.append(res)

                await asyncio.gather(*[asyncio.create_task(worker(u)) for u in uids])

                for status, reason in results:
                    if status == "updated":
                        updated += 1
                    elif status == "skip":
                        skipped += 1
                    else:
                        errors += 1

                total_updated += updated
                total_skipped += skipped
                total_errors  += errors

                # –æ—Ç—á—ë—Ç –ø–æ –±–∞—Ç—á—É ‚Äî INFO
                # –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º ¬´remaining‚âà¬ª (–Ω–µ –Ω–∞ –∫–∞–∂–¥—ã–π –±–∞—Ç—á, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ë–î)
                remaining = None
                if batch_idx % 5 == 1:  # –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–π 5-–π –±–∞—Ç—á
                    try:
                        remaining = await _count_remaining()
                    except Exception:
                        remaining = None

                if remaining is None:
                    log.info("[EMA-BF] batch=%d size=%d updated=%d skipped=%d errors=%d",
                             batch_idx, len(uids), updated, skipped, errors)
                else:
                    log.info("[EMA-BF] batch=%d size=%d updated=%d skipped=%d errors=%d remaining‚âà%d",
                             batch_idx, len(uids), updated, skipped, errors, remaining)

                # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏, —á—Ç–æ–±—ã —Å–≥–ª–∞–¥–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
                await asyncio.sleep(SHORT_SLEEP_MS / 1000)

            # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä–æ—Ö–æ–¥–∞
            log.info("‚úÖ EMA-BF: –ø—Ä–æ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω batches=%d updated=%d skipped=%d errors=%d ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %ds",
                     batch_idx, total_updated, total_skipped, total_errors, RECHECK_INTERVAL_SEC)

            # —Ä–µ–∂–∏–º ¬´–¥–µ–∂—É—Ä–Ω–æ–≥–æ¬ª –∑–∞–ø—É—Å–∫–∞ ‚Äî —Å–ø–∏–º RECHECK_INTERVAL_SEC –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥
            await asyncio.sleep(RECHECK_INTERVAL_SEC)

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è EMA-BF –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.exception("‚ùå EMA-BF loop error: %s", e)
            await asyncio.sleep(1)