# oracle_mw_sense_stat.py ‚Äî –≤–æ—Ä–∫–µ—Ä sense-stat: –æ—Ü–µ–Ω–∫–∞ ¬´—Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã¬ª agg_base (0..1) –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ whitelist (7d)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_SENSE_STAT")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis Stream (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –î–õ–Ø sense)
SENSE_REPORT_READY_STREAM = "oracle:mw_sense:reports_ready"
SENSE_CONSUMER_GROUP = "oracle_sense_stat_group"
SENSE_CONSUMER_NAME = "oracle_sense_stat_worker"

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis Stream –¥–ª—è whitelist
WHITELIST_READY_STREAM = "oracle:mw_whitelist:reports_ready"
WHITELIST_READY_MAXLEN = 10_000

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ sense
TF_LIST = ("m5", "m15", "h1")
DIRECTIONS = ("long", "short")
AGG_BASES = (
    # solo
    "trend", "volatility", "extremes", "momentum",
    # pairs
    "trend_volatility", "trend_extremes", "trend_momentum",
    "volatility_extremes", "volatility_momentum",
    "extremes_momentum",
    # triples
    "trend_volatility_extremes",
    "trend_volatility_momentum",
    "trend_extremes_momentum",
    "volatility_extremes_momentum",
    # quadruple
    "trend_volatility_extremes_momentum",
)
SMOOTH_HISTORY_N = 5
CONF_THRESHOLD_SENSE = 0.1  # –≤–∫–ª—é—á–∞–µ–º –≤ —Ä–∞—Å—á—ë—Ç sense —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å confidence > 0.1
EPS = 1e-12

# üî∏ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è whitelist (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞)
SCORE_SENSE_MIN = 0.5    # –±–∞–∑–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ WL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ score_smoothed > 0.5
CONF_THRESHOLD_WL = 0.25 # —Å—Ç—Ä–æ–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞ (agg_state) ‚Äî confidence > 0.25
WL_WR_MIN = 0.55         # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π winrate –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ whitelist (>= 0.55)

# üî∏ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è confirmation –ø–æ confidence
CONFIRM_T0 = 0.75  # => confirmation = 0
CONFIRM_T1 = 0.50  # => confirmation = 1  (–µ—Å–ª–∏ conf –≤ [0.50, 0.75))
CONFIRM_T2 = 0.25  # => confirmation = 2  (–µ—Å–ª–∏ conf –≤ [0.25, 0.50))

# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_oracle_sense_stat():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    try:
        await infra.redis_client.xgroup_create(
            name=SENSE_REPORT_READY_STREAM,
            groupname=SENSE_CONSUMER_GROUP,
            id="$",
            mkstream=True,
        )
        log.debug("üì° –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –≤ Redis Stream: %s", SENSE_CONSUMER_GROUP)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            pass
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã Redis Stream")
            return

    log.debug("üöÄ –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ sense-stat")

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=SENSE_CONSUMER_GROUP,
                consumername=SENSE_CONSUMER_NAME,
                streams={SENSE_REPORT_READY_STREAM: ">"},
                count=64,
                block=30_000,
            )
            if not resp:
                continue

            for stream_name, msgs in resp:
                for msg_id, fields in msgs:
                    try:
                        payload = json.loads(fields.get("data", "{}"))
                        report_id = int(payload.get("report_id", 0))
                        strategy_id = int(payload.get("strategy_id", 0))
                        time_frame = payload.get("time_frame")
                        window_end = payload.get("window_end")

                        if not (report_id and strategy_id and time_frame and window_end):
                            log.debug("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö %s", payload)
                            await infra.redis_client.xack(SENSE_REPORT_READY_STREAM, SENSE_CONSUMER_GROUP, msg_id)
                            continue

                        await _process_report(report_id, strategy_id, time_frame, window_end)
                        await infra.redis_client.xack(SENSE_REPORT_READY_STREAM, SENSE_CONSUMER_GROUP, msg_id)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ sense-stat")

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è –í–æ—Ä–∫–µ—Ä sense-stat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ sense-stat ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: —Ä–∞—Å—á—ë—Ç sense-stat + (–µ—Å–ª–∏ 7d) –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ whitelist
async def _process_report(report_id: int, strategy_id: int, time_frame: str, window_end_iso: str):
    # –ø–∞—Ä—Å–∏–Ω–≥ window_end
    try:
        window_end_dt = datetime.fromisoformat(str(window_end_iso).replace("Z", ""))
    except Exception:
        log.exception("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç window_end: %r", window_end_iso)
        return

    async with infra.pg_pool.acquire() as conn:
        # –≤—ã–±–æ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ (confidence > 0.1 –¥–ª—è sense)
        rows = await conn.fetch(
            """
            SELECT timeframe, direction, agg_base, agg_state,
                   trades_total, trades_wins, winrate, confidence
              FROM oracle_mw_aggregated_stat
             WHERE report_id = $1
               AND confidence > $2
            """,
            report_id, CONF_THRESHOLD_SENSE
        )

        if not rows:
            log.debug("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ (confidence>%s) –¥–ª—è report_id=%s (sid=%s tf=%s)",
                     CONF_THRESHOLD_SENSE, report_id, strategy_id, time_frame)
            return

        # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (timeframe, direction, agg_base)
        data: Dict[Tuple[str, str, str], List[dict]] = {}
        for r in rows:
            key = (r["timeframe"], r["direction"], r["agg_base"])
            data.setdefault(key, []).append({
                "agg_state": r["agg_state"],
                "n": int(r["trades_total"] or 0),
                "w": int(r["trades_wins"] or 0),
                "p": float(r["winrate"] or 0.0),
            })

        updated = 0
        for tf in TF_LIST:
            for direction in DIRECTIONS:
                for base in AGG_BASES:
                    states = data.get((tf, direction, base), [])
                    if not states:
                        continue  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                    score_current, states_used, components = _compute_score(states)

                    # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ (‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤)
                    prev_vals = await conn.fetch(
                        """
                        SELECT score_current
                          FROM oracle_mw_sense_stat
                         WHERE strategy_id = $1
                           AND time_frame  = $2
                           AND timeframe   = $3
                           AND direction   = $4
                           AND agg_base    = $5
                           AND window_end  < $6
                         ORDER BY window_end DESC
                         LIMIT $7
                        """,
                        strategy_id, time_frame, tf, direction, base,
                        window_end_dt, int(SMOOTH_HISTORY_N)
                    )
                    hist = [float(x["score_current"]) for x in prev_vals] if prev_vals else []
                    score_smoothed = _smooth_mean(score_current, hist)

                    # –∑–∞–ø–∏—Å—å/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ sense
                    await conn.execute(
                        """
                        INSERT INTO oracle_mw_sense_stat (
                            report_id, strategy_id, time_frame, window_end,
                            timeframe, direction, agg_base,
                            states_used, score_current, score_smoothed, components,
                            created_at, updated_at
                        ) VALUES (
                            $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,now(),now()
                        )
                        ON CONFLICT (report_id, timeframe, direction, agg_base)
                        DO UPDATE SET
                            states_used    = EXCLUDED.states_used,
                            score_current  = EXCLUDED.score_current,
                            score_smoothed = EXCLUDED.score_smoothed,
                            components     = EXCLUDED.components,
                            updated_at     = now()
                        """,
                        report_id, strategy_id, time_frame, window_end_dt,
                        tf, direction, base,
                        int(states_used), float(score_current), float(score_smoothed),
                        json.dumps(components, separators=(",", ":"))
                    )
                    updated += 1

        log.debug("‚úÖ sense-stat –≥–æ—Ç–æ–≤: report_id=%s sid=%s tf=%s window_end=%s ‚Äî —Å—Ç—Ä–æ–∫=%d",
                 report_id, strategy_id, time_frame, window_end_iso, updated)

        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ whitelist —Ç–æ–ª—å–∫–æ –¥–ª—è 7d
        if str(time_frame) == "7d":
            inserted = await _build_whitelist_for_7d(conn, report_id, strategy_id, window_end_dt)
            log.debug("‚úÖ whitelist –æ–±–Ω–æ–≤–ª—ë–Ω (7d): report_id=%s sid=%s rows=%d", report_id, strategy_id, inserted)
            # —Å–æ–±—ã—Ç–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ whitelist
            try:
                payload = {
                    "strategy_id": int(strategy_id),
                    "report_id": int(report_id),
                    "time_frame": "7d",
                    "window_end": window_end_dt.isoformat(),
                    "rows_inserted": int(inserted),
                    "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                }
                await infra.redis_client.xadd(
                    name=WHITELIST_READY_STREAM,
                    fields={"data": json.dumps(payload, separators=(",", ":"))},
                    maxlen=WHITELIST_READY_MAXLEN,
                    approximate=True,
                )
                log.debug("[WHITELIST_READY] sid=%s report_id=%s rows=%d", strategy_id, report_id, inserted)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ %s", WHITELIST_READY_STREAM)

# üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ whitelist –¥–ª—è 7d: –æ—á–∏—â–∞–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–≤–µ–∂–∏–º –Ω–∞–±–æ—Ä–æ–º
async def _build_whitelist_for_7d(conn, report_id: int, strategy_id: int, window_end_dt: datetime) -> int:
    # —Å–ø–∏—Å–æ–∫ –±–∞–∑ (–ø–æ –¥–∞–Ω–Ω–æ–º—É report_id), —É –∫–æ—Ç–æ—Ä—ã—Ö score_smoothed > SCORE_SENSE_MIN
    bases_rows = await conn.fetch(
        """
        SELECT timeframe, direction, agg_base
          FROM oracle_mw_sense_stat
         WHERE report_id = $1
           AND time_frame = '7d'
           AND score_smoothed > $2
        """,
        report_id, float(SCORE_SENSE_MIN)
    )
    if not bases_rows:
        # –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å—Ä–µ–∑–æ–º –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        async with conn.transaction():
            await conn.execute("DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1", strategy_id)
        return 0

    selectors = {(r["timeframe"], r["direction"], r["agg_base"]) for r in bases_rows}

    # –≤—ã–±–æ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–∞–∑–∞–º)
    cand_rows = await conn.fetch(
        """
        SELECT
            a.id          AS aggregated_id,
            a.strategy_id AS strategy_id,
            a.direction   AS direction,
            a.timeframe   AS timeframe,
            a.agg_base    AS agg_base,
            a.agg_state   AS agg_state,
            a.winrate     AS winrate,
            a.confidence  AS confidence
        FROM oracle_mw_aggregated_stat a
        WHERE a.report_id = $1
          AND a.time_frame = '7d'
          AND a.strategy_id = $2
          AND a.confidence > $3
          AND a.winrate >= $4
        """,
        report_id, strategy_id, float(CONF_THRESHOLD_WL), float(WL_WR_MIN)
    )

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–∞–∑–∞–º (score_smoothed > SCORE_SENSE_MIN)
    filtered = [
        dict(r) for r in cand_rows
        if (r["timeframe"], r["direction"], r["agg_base"]) in selectors
    ]

    # –≤—ã—á–∏—Å–ª—è–µ–º confirmation –ø–æ confidence –∏ –≥–æ—Ç–æ–≤–∏–º –±–∞—Ç—á –Ω–∞ –≤—Å—Ç–∞–≤–∫—É
    to_insert = []
    for r in filtered:
        wr = float(r["winrate"] or 0.0)
        conf_val = float(r["confidence"] or 0.0)

        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ winrate (SQL —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª)
        if wr < WL_WR_MIN:
            continue

        # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ confirmation –ø–æ confidence
        confm = _confirmation_by_confidence(conf_val)

        to_insert.append({
            "aggregated_id": int(r["aggregated_id"]),
            "strategy_id": int(r["strategy_id"]),
            "direction": str(r["direction"]),
            "timeframe": str(r["timeframe"]),
            "agg_base": str(r["agg_base"]),
            "agg_state": str(r["agg_state"]),
            "winrate": float(wr),
            "confidence": conf_val,
            "confirmation": int(confm),
        })

    # –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async with conn.transaction():
        await conn.execute("DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1", strategy_id)

        if to_insert:
            await conn.executemany(
                """
                INSERT INTO oracle_mw_whitelist (
                    aggregated_id, strategy_id, direction, timeframe,
                    agg_base, agg_state, winrate, confidence, confirmation
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9
                )
                """,
                [
                    (
                        row["aggregated_id"],
                        row["strategy_id"],
                        row["direction"],
                        row["timeframe"],
                        row["agg_base"],
                        row["agg_state"],
                        row["winrate"],
                        row["confidence"],
                        row["confirmation"],
                    )
                    for row in to_insert
                ]
            )

    return len(to_insert)

# üî∏ –†–∞—Å—á—ë—Ç —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã (winrate –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –≤–Ω—É—Ç—Ä–∏ –±–∞–∑—ã)
def _compute_score(states: List[dict]) -> Tuple[float, int, Dict]:
    # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å n>0
    if len([s for s in states if s["n"] > 0]) < 2:
        comps = {"k_states": len(states), "n_total": sum(int(s["n"]) for s in states), "reason": "insufficient_states"}
        return 0.0, len(states), comps

    n_total = sum(int(s["n"]) for s in states if s["n"] > 0)
    if n_total <= 0:
        comps = {"k_states": len(states), "n_total": 0, "reason": "no_mass"}
        return 0.0, len(states), comps

    p_bar = sum(float(s["p"]) * int(s["n"]) for s in states if s["n"] > 0) / max(1, n_total)
    ss_between = 0.0
    ss_within = 0.0
    for s in states:
        n_i = int(s["n"])
        if n_i <= 0:
            continue
        p_i = float(s["p"])
        # –º–µ–∂–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: –≤–∫–ª–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ss_between += n_i * (p_i - p_bar) ** 2
        # –≤–Ω—É—Ç—Ä–∏–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å—É–º–º–∞ p(1-p) –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
        ss_within += p_i * (1.0 - p_i)

    score = ss_between / (ss_between + ss_within + EPS)
    score = max(0.0, min(1.0, float(round(score, 4))))

    comps = {
        "k_states": len(states),
        "n_total": n_total,
        "p_bar": round(p_bar, 6),
        "ss_between": round(ss_between, 6),
        "ss_within": round(ss_within, 6),
        "formula": "score = SS_between / (SS_between + SS_within)",
    }
    return score, len(states), comps

# üî∏ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏ ‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
def _smooth_mean(current: float, history: List[float]) -> float:
    vals = [float(current)] + [float(x) for x in history if x is not None]
    if not vals:
        return float(current)
    sm = sum(vals) / len(vals)
    sm = max(0.0, min(1.0, float(round(sm, 4))))
    return sm

# üî∏ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ confirmation –ø–æ confidence
def _confirmation_by_confidence(conf: float) -> int:
    if conf >= CONFIRM_T0:
        return 0
    if conf >= CONFIRM_T1:
        return 1
    if conf >= CONFIRM_T2:
        return 2
    return 2