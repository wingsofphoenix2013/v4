# oracle_mw_sense_stat.py ‚Äî –≤–æ—Ä–∫–µ—Ä sense-stat: –æ—Ü–µ–Ω–∫–∞ ¬´—Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã¬ª agg_base (0..1) –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ whitelist (7d)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_SENSE_STAT")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis Stream (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –î–õ–Ø sense)
SENSE_REPORT_READY_STREAM = "oracle:mw_sense:reports_ready"
SENSE_CONSUMER_GROUP = "oracle_sense_stat_group"
SENSE_CONSUMER_NAME = "oracle_sense_stat_worker"

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis Stream –¥–ª—è whitelist
WHITELIST_READY_STREAM = "oracle:mw_whitelist:reports_ready"
WHITELIST_READY_MAXLEN = 10_000

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ sense
TF_LIST = ("m5", "m15", "h1")
DIRECTIONS = ("long", "short")

# üî∏ –†–∞–±–æ—á–∏–π –Ω–∞–±–æ—Ä –æ—Å–µ–π: solo=trend –∏ –∫–æ–º–±–æ —Ç–æ–ª—å–∫–æ —Å trend (+ derived-–±–∞–∑—ã, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ indicator_position_stat)
AGG_BASES = (
    "trend",

    "trend_volatility",
    "trend_extremes",
    "trend_momentum",

    # derived-–ø–∞—Ä—ã (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ position_snapshot_live.py –∏ oracle_mw_snapshot.py)
    "trend_pullback_flag",     # pullback –ø—Ä–æ—Ç–∏–≤/–ø–æ —Ç—Ä–µ–Ω–¥—É: against|with|none
    "trend_mom_align",         # –∏–º–ø—É–ª—å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω/–ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞: aligned|countertrend|flat
    # "trend_high_vol",        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) high_vol: yes|no

    "trend_volatility_extremes",
    "trend_volatility_momentum",
    "trend_extremes_momentum",

    # derived-—Ç—Ä–∏–ø–ª–µ—Ç—ã (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏)
    "trend_volatility_mom_align",
    "trend_volatility_pullback_flag",

    # –∫–≤–∞—Ä—Ç–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π
    "trend_volatility_extremes_momentum",
)

SMOOTH_HISTORY_N = 5
CONF_THRESHOLD_SENSE = 0.1  # –≤–∫–ª—é—á–∞–µ–º –≤ —Ä–∞—Å—á—ë—Ç sense —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å confidence > 0.1
EPS = 1e-12

# üî∏ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è whitelist v1 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞)
SCORE_SENSE_MIN = 0.5    # –±–∞–∑–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ WL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ score_smoothed > 0.5
CONF_THRESHOLD_WL = 0.5  # —Å—Ç—Ä–æ–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞ (agg_state) ‚Äî confidence > 0.5
WL_WR_MIN = 0.55         # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π winrate –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ whitelist (>= 0.55)

# üî∏ –ü–æ—Ä–æ–≥ –¥–ª—è whitelist v2 (–¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ –æ–∫–Ω–µ 7d)
WL_V2_MIN_SHARE = 0.02   # 2%


# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_oracle_sense_stat():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    try:
        await infra.redis_client.xgroup_create(
            name=SENSE_REPORT_READY_STREAM,
            groupname=SENSE_CONSUMER_GROUP,
            id="$",
            mkstream=True,
        )
        log.debug("üì° –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –≤ Redis Stream: %s", SENSE_CONSUMER_GROUP)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            pass
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã Redis Stream")
            return

    log.debug("üöÄ –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ sense-stat")

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=SENSE_CONSUMER_GROUP,
                consumername=SENSE_CONSUMER_NAME,
                streams={SENSE_REPORT_READY_STREAM: ">"},
                count=64,
                block=30_000,
            )
            if not resp:
                continue

            for stream_name, msgs in resp:
                for msg_id, fields in msgs:
                    try:
                        payload = json.loads(fields.get("data", "{}"))
                        report_id = int(payload.get("report_id", 0))
                        strategy_id = int(payload.get("strategy_id", 0))
                        time_frame = payload.get("time_frame")
                        window_end = payload.get("window_end")

                        if not (report_id and strategy_id and time_frame and window_end):
                            log.debug("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö %s", payload)
                            await infra.redis_client.xack(SENSE_REPORT_READY_STREAM, SENSE_CONSUMER_GROUP, msg_id)
                            continue

                        await _process_report(report_id, strategy_id, time_frame, window_end)
                        await infra.redis_client.xack(SENSE_REPORT_READY_STREAM, SENSE_CONSUMER_GROUP, msg_id)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ sense-stat")

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è –í–æ—Ä–∫–µ—Ä sense-stat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ sense-stat ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: —Ä–∞—Å—á—ë—Ç sense-stat + WL v1 (7d) + WL v2 (7d)
async def _process_report(report_id: int, strategy_id: int, time_frame: str, window_end_iso: str):
    # –ø–∞—Ä—Å–∏–Ω–≥ window_end
    try:
        window_end_dt = datetime.fromisoformat(str(window_end_iso).replace("Z", ""))
    except Exception:
        log.exception("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç window_end: %r", window_end_iso)
        return

    async with infra.pg_pool.acquire() as conn:
        # –≤—ã–±–æ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –¥–ª—è sense (confidence > 0.1)
        rows = await conn.fetch(
            """
            SELECT timeframe, direction, agg_base, agg_state,
                   trades_total, trades_wins, winrate, confidence
              FROM oracle_mw_aggregated_stat
             WHERE report_id = $1
               AND confidence > $2
            """,
            report_id, CONF_THRESHOLD_SENSE
        )

        updated = 0
        if rows:
            # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (timeframe, direction, agg_base)
            data: Dict[Tuple[str, str, str], List[dict]] = {}
            for r in rows:
                key = (r["timeframe"], r["direction"], r["agg_base"])
                data.setdefault(key, []).append({
                    "agg_state": r["agg_state"],
                    "n": int(r["trades_total"] or 0),
                    "w": int(r["trades_wins"] or 0),
                    "p": float(r["winrate"] or 0.0),
                })

            for tf in TF_LIST:
                for direction in DIRECTIONS:
                    # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–∞–∑—ã, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è (tf, direction) –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–ø–∏—Å–∫–æ–º
                    bases_present = [b for b in AGG_BASES if (tf, direction, b) in data]
                    for base in bases_present:
                        states = data[(tf, direction, base)]
                        if not states:
                            continue

                        score_current, states_used, components = _compute_score(states)

                        # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ (‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤)
                        prev_vals = await conn.fetch(
                            """
                            SELECT score_current
                              FROM oracle_mw_sense_stat
                             WHERE strategy_id = $1
                               AND time_frame  = $2
                               AND timeframe   = $3
                               AND direction   = $4
                               AND agg_base    = $5
                               AND window_end  < $6
                             ORDER BY window_end DESC
                             LIMIT $7
                            """,
                            strategy_id, time_frame, tf, direction, base,
                            window_end_dt, int(SMOOTH_HISTORY_N)
                        )
                        hist = [float(x["score_current"]) for x in prev_vals] if prev_vals else []
                        score_smoothed = _smooth_mean(score_current, hist)

                        # –∑–∞–ø–∏—Å—å/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ sense
                        await conn.execute(
                            """
                            INSERT INTO oracle_mw_sense_stat (
                                report_id, strategy_id, time_frame, window_end,
                                timeframe, direction, agg_base,
                                states_used, score_current, score_smoothed, components,
                                created_at, updated_at
                            ) VALUES (
                                $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,now(),now()
                            )
                            ON CONFLICT (report_id, timeframe, direction, agg_base)
                            DO UPDATE SET
                                states_used    = EXCLUDED.states_used,
                                score_current  = EXCLUDED.score_current,
                                score_smoothed = EXCLUDED.score_smoothed,
                                components     = EXCLUDED.components,
                                updated_at     = now()
                            """,
                            report_id, strategy_id, time_frame, window_end_dt,
                            tf, direction, base,
                            int(states_used), float(score_current), float(score_smoothed),
                            json.dumps(components, separators=(",", ":"))
                        )
                        updated += 1

            log.debug("‚úÖ sense-stat –≥–æ—Ç–æ–≤: report_id=%s sid=%s tf=%s window_end=%s ‚Äî —Å—Ç—Ä–æ–∫=%d",
                      report_id, strategy_id, time_frame, window_end_iso, updated)
        else:
            log.debug("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ (confidence>%s) –¥–ª—è report_id=%s (sid=%s tf=%s) ‚Äî sense –ø—Ä–æ–ø—É—â–µ–Ω",
                      CONF_THRESHOLD_SENSE, report_id, strategy_id, time_frame)

        # whitelist —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –¥–ª—è 7d (–∏ v1, –∏ v2)
        if str(time_frame) == "7d":
            # v1 (–ø–æ SENSE/CONF/WR)
            inserted_v1 = await _build_whitelist_for_7d(conn, report_id, strategy_id, window_end_dt)
            log.debug("‚úÖ whitelist –æ–±–Ω–æ–≤–ª—ë–Ω (v1, 7d): report_id=%s sid=%s rows=%d", report_id, strategy_id, inserted_v1)
            try:
                payload = {
                    "strategy_id": int(strategy_id),
                    "report_id": int(report_id),
                    "time_frame": "7d",
                    "version": "v1",
                    "window_end": window_end_dt.isoformat(),
                    "rows_inserted": int(inserted_v1),
                    "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                }
                await infra.redis_client.xadd(
                    name=WHITELIST_READY_STREAM,
                    fields={"data": json.dumps(payload, separators=(",", ":"))},
                    maxlen=WHITELIST_READY_MAXLEN,
                    approximate=True,
                )
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ %s (v1)", WHITELIST_READY_STREAM)

            # v2 (–ø–æ –¥–æ–ª–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º sense/conf)
            inserted_v2 = await _build_whitelist_v2(conn, report_id, strategy_id, "7d", window_end_dt, WL_V2_MIN_SHARE)
            log.debug("‚úÖ whitelist –æ–±–Ω–æ–≤–ª—ë–Ω (v2, 7d): report_id=%s sid=%s rows=%d", report_id, strategy_id, inserted_v2)
            try:
                payload_v2 = {
                    "strategy_id": int(strategy_id),
                    "report_id": int(report_id),
                    "time_frame": "7d",
                    "version": "v2",
                    "window_end": window_end_dt.isoformat(),
                    "rows_inserted": int(inserted_v2),
                    "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                }
                await infra.redis_client.xadd(
                    name=WHITELIST_READY_STREAM,
                    fields={"data": json.dumps(payload_v2, separators=(",", ":"))},
                    maxlen=WHITELIST_READY_MAXLEN,
                    approximate=True,
                )
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ %s (v2)", WHITELIST_READY_STREAM)


# üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ whitelist v1 –¥–ª—è 7d: –æ—á–∏—â–∞–µ–º –¢–û–õ–¨–ö–û v1 –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–≤–µ–∂–∏–º –Ω–∞–±–æ—Ä–æ–º
async def _build_whitelist_for_7d(conn, report_id: int, strategy_id: int, window_end_dt: datetime) -> int:
    # –æ—Å–∏ (agg_base), –ø—Ä–æ—à–µ–¥—à–∏–µ sense-—Ñ–∏–ª—å—Ç—Ä (score_smoothed > SCORE_SENSE_MIN) –Ω–∞ —ç—Ç–æ–º –æ—Ç—á—ë—Ç–µ
    bases_rows = await conn.fetch(
        """
        SELECT timeframe, direction, agg_base
          FROM oracle_mw_sense_stat
         WHERE report_id = $1
           AND time_frame = '7d'
           AND score_smoothed > $2
        """,
        report_id, float(SCORE_SENSE_MIN)
    )
    if not bases_rows:
        async with conn.transaction():
            await conn.execute(
                "DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1 AND version = 'v1'",
                strategy_id
            )
        return 0

    selectors = {(r["timeframe"], r["direction"], r["agg_base"]) for r in bases_rows}

    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ aggregated_stat –ø–æ 7d —Å –ø–æ—Ä–æ–≥–∞–º–∏ confidence / winrate
    cand_rows = await conn.fetch(
        """
        SELECT
            a.id          AS aggregated_id,
            a.strategy_id AS strategy_id,
            a.direction   AS direction,
            a.timeframe   AS timeframe,
            a.agg_base    AS agg_base,
            a.agg_state   AS agg_state,
            a.winrate     AS winrate,
            a.confidence  AS confidence
        FROM oracle_mw_aggregated_stat a
        WHERE a.report_id   = $1
          AND a.time_frame  = '7d'
          AND a.strategy_id = $2
          AND a.confidence  > $3
          AND a.winrate     >= $4
        """,
        report_id, strategy_id, float(CONF_THRESHOLD_WL), float(WL_WR_MIN)
    )

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Å—è–º
    filtered = [
        dict(r) for r in cand_rows
        if (r["timeframe"], r["direction"], r["agg_base"]) in selectors
    ]

    # –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º v1-—Å—Ä–µ–∑ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async with conn.transaction():
        await conn.execute(
            "DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1 AND version = 'v1'",
            strategy_id
        )
        if filtered:
            await conn.executemany(
                """
                INSERT INTO oracle_mw_whitelist (
                    aggregated_id, strategy_id, direction, timeframe,
                    agg_base, agg_state, winrate, confidence, version
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,'v1'
                )
                """,
                [
                    (
                        int(r["aggregated_id"]),
                        int(r["strategy_id"]),
                        str(r["direction"]),
                        str(r["timeframe"]),
                        str(r["agg_base"]),
                        str(r["agg_state"]),
                        float(r["winrate"] or 0.0),
                        float(r["confidence"] or 0.0),
                    )
                    for r in filtered
                ]
            )

    return len(filtered)


# üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ whitelist v2 (7d): –±–µ–∑ sense/conf, –ø–æ –¥–æ–ª–µ —Å–¥–µ–ª–æ–∫ –∏ –ø–æ—Ä–æ–≥—É winrate
async def _build_whitelist_v2(conn, report_id: int, strategy_id: int, time_frame: str, window_end_dt: datetime, min_share: float) -> int:
    # –æ–±—â–∏–π –æ–±—ä—ë–º –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —à–∞–ø–∫–∏ –æ—Ç—á—ë—Ç–∞ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞)
    closed_total = await conn.fetchval(
        "SELECT closed_total FROM oracle_report_stat WHERE id = $1",
        report_id
    )
    closed_total = int(closed_total or 0)
    if closed_total <= 0:
        async with conn.transaction():
            await conn.execute(
                "DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1 AND version = 'v2'",
                strategy_id
            )
        return 0

    threshold = float(closed_total) * float(min_share)

    # –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ 7d
    cand_rows = await conn.fetch(
        """
        SELECT
            a.id            AS aggregated_id,
            a.strategy_id   AS strategy_id,
            a.direction     AS direction,
            a.timeframe     AS timeframe,
            a.agg_base      AS agg_base,
            a.agg_state     AS agg_state,
            a.winrate       AS winrate,
            a.confidence    AS confidence,
            a.trades_total  AS trades_total
        FROM oracle_mw_aggregated_stat a
        WHERE a.report_id = $1
          AND a.time_frame = $2
        """,
        report_id, str(time_frame)
    )

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Å–µ –∏ WR
    filtered = [
        dict(r) for r in cand_rows
        if float(r["trades_total"] or 0.0) > threshold
           and float(r["winrate"] or 0.0) >= float(WL_WR_MIN)
    ]

    # –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º v2-—Å—Ä–µ–∑
    async with conn.transaction():
        await conn.execute(
            "DELETE FROM oracle_mw_whitelist WHERE strategy_id = $1 AND version = 'v2'",
            strategy_id
        )
        if filtered:
            await conn.executemany(
                """
                INSERT INTO oracle_mw_whitelist (
                    aggregated_id, strategy_id, direction, timeframe,
                    agg_base, agg_state, winrate, confidence, version
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,'v2'
                )
                """,
                [
                    (
                        int(r["aggregated_id"]),
                        int(r["strategy_id"]),
                        str(r["direction"]),
                        str(r["timeframe"]),
                        str(r["agg_base"]),
                        str(r["agg_state"]),
                        float(r["winrate"] or 0.0),
                        float(r["confidence"] or 0.0),
                    )
                    for r in filtered
                ]
            )

    return len(filtered)


# üî∏ –†–∞—Å—á—ë—Ç —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã (winrate –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –≤–Ω—É—Ç—Ä–∏ –±–∞–∑—ã)
def _compute_score(states: List[dict]) -> Tuple[float, int, Dict]:
    # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å n>0
    if len([s for s in states if s["n"] > 0]) < 2:
        comps = {"k_states": len(states), "n_total": sum(int(s["n"]) for s in states), "reason": "insufficient_states"}
        return 0.0, len(states), comps

    n_total = sum(int(s["n"]) for s in states if s["n"] > 0)
    if n_total <= 0:
        comps = {"k_states": len(states), "n_total": 0, "reason": "no_mass"}
        return 0.0, len(states), comps

    p_bar = sum(float(s["p"]) * int(s["n"]) for s in states if s["n"] > 0) / max(1, n_total)
    ss_between = 0.0
    ss_within = 0.0
    for s in states:
        n_i = int(s["n"])
        if n_i <= 0:
            continue
        p_i = float(s["p"])
        # –º–µ–∂–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è
        ss_between += n_i * (p_i - p_bar) ** 2
        # –≤–Ω—É—Ç—Ä–∏–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å—É–º–º–∞ p(1-p) –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
        ss_within += p_i * (1.0 - p_i)

    score = ss_between / (ss_between + ss_within + EPS)
    score = max(0.0, min(1.0, float(round(score, 4))))

    comps = {
        "k_states": len(states),
        "n_total": n_total,
        "p_bar": round(p_bar, 6),
        "ss_between": round(ss_between, 6),
        "ss_within": round(ss_within, 6),
        "formula": "score = SS_between / (SS_between + SS_within)",
    }
    return score, len(states), comps


# üî∏ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏ ‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
def _smooth_mean(current: float, history: List[float]) -> float:
    vals = [float(current)] + [float(x) for x in history if x is not None]
    if not vals:
        return float(current)
    sm = sum(vals) / len(vals)
    sm = max(0.0, min(1.0, float(round(sm, 4))))
    return sm