# üî∏ config_loader.py ‚Äî —Ç–∏–∫–µ—Ä—ã + —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (market_watcher-only, Bybit)

import json
import asyncio
import logging

import infra
from infra import (
    set_enabled_tickers,
    set_market_watcher_strategies,
    add_market_watcher_strategy,
    remove_market_watcher_strategy,
)

log = logging.getLogger("CONFIG_LOADER")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (Bybit)
async def load_enabled_tickers():
    query = """
        SELECT symbol, precision_price, precision_qty, created_at
        FROM tickers_bb
        WHERE status = 'enabled' AND tradepermission = 'enabled'
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        tickers = {r["symbol"]: dict(r) for r in rows}
        set_enabled_tickers(tickers)
        log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: %d", len(tickers))


# üî∏ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å market_watcher=true
async def load_market_watcher_strategies():
    query = """
        SELECT id
        FROM strategies_v4
        WHERE enabled = true
          AND (archived IS NOT TRUE)
          AND market_watcher = true
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        ids = {int(r["id"]) for r in rows}
        set_market_watcher_strategies(ids)
        log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π market_watcher: %d", len(ids))


# üî∏ –¢–æ—á–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (enable/disable/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤)
async def handle_strategy_event(payload: dict):
    sid = payload.get("id")
    if not sid:
        return

    # –ò—Å—Ç–∏–Ω–∞ –≤ –ë–î –≤–∞–∂–Ω–µ–µ, —á–µ–º –ø–æ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è ‚Äî –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async with infra.pg_pool.acquire() as conn:
        row = await conn.fetchrow(
            """
            SELECT
                id,
                enabled,
                COALESCE(archived, false)        AS archived,
                COALESCE(market_watcher, false)  AS mw
            FROM strategies_v4
            WHERE id = $1
            """,
            int(sid),
        )

    if not row:
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å—á–µ–∑–ª–∞ ‚Äî –ø–æ—á–∏—Å—Ç–∏–º –∫—ç—à
        remove_market_watcher_strategy(int(sid))
        log.info("üßπ strategy id=%s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î ‚Äî —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ market_watcher (–µ—Å–ª–∏ –±—ã–ª–∞)", sid)
        return

    enabled = bool(row["enabled"])
    archived = bool(row["archived"])
    mw = bool(row["mw"])

    # --- market_watcher –∫—ç—à
    should_mw = enabled and (not archived) and mw
    in_mw = (int(sid) in infra.market_watcher_strategies)

    if should_mw and not in_mw:
        add_market_watcher_strategy(int(sid))
        log.info("‚ûï strategy id=%s –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à market_watcher", sid)
    elif (not should_mw) and in_mw:
        remove_market_watcher_strategy(int(sid))
        log.info("‚ûñ strategy id=%s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ market_watcher", sid)
    else:
        log.debug(
            "‚ÑπÔ∏è strategy id=%s ‚Äî MW –∫—ç—à –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (enabled=%s, archived=%s, mw=%s)",
            sid, enabled, archived, mw
        )


# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π Pub/Sub (—Ç–∏–∫–µ—Ä—ã + —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
async def config_event_listener():
    pubsub = infra.redis_client.pubsub()
    # Bybit-–∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤; –∫–∞–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–º
    await pubsub.subscribe("bb:tickers_events", "strategies_v4_events")
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: bb:tickers_events, strategies_v4_events")

    async for message in pubsub.listen():
        if message["type"] != "message":
            continue

        try:
            data = json.loads(message["data"])
            channel = message["channel"]  # decode_responses=True ‚Üí —É–∂–µ —Å—Ç—Ä–æ–∫–∞

            if channel == "bb:tickers_events":
                log.info("üîî –°–æ–±—ã—Ç–∏–µ —Ç–∏–∫–µ—Ä–æ–≤: %s", data)
                await load_enabled_tickers()

            elif channel == "strategies_v4_events":
                log.info("üîî –°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: %s", data)
                # —Å–æ–±—ã—Ç–∏–µ ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Ç–∞–µ–º –∏–∑ –ë–î
                await handle_strategy_event(data)

        except Exception as e:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: %s", e)