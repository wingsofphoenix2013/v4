# oracle_pack_sense_stat.py ‚Äî –≤–æ—Ä–∫–µ—Ä PACK-sense: –æ—Ü–µ–Ω–∫–∞ ¬´—Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã¬ª –ø–æ pack_base+agg_type+agg_key (0..1), —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ 5 –ø—Ä–æ–≥–æ–Ω–∞–º

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("ORACLE_PACK_SENSE")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis Stream (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PACK-confidence –¥–ª—è –æ—Ç—á—ë—Ç–∞)
PACK_SENSE_REPORT_READY_STREAM = "oracle:pack_sense:reports_ready"
PACK_SENSE_CONSUMER_GROUP = "oracle_pack_sense_group"
PACK_SENSE_CONSUMER_NAME = "oracle_pack_sense_worker"

# üî∏ –°—Ç—Ä–∏–º –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è sense
PACK_LISTS_BUILD_READY_STREAM = "oracle:pack_lists:build_ready"
PACK_LISTS_BUILD_READY_MAXLEN = 10_000

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
TF_LIST = ("m5", "m15", "h1")
DIRECTIONS = ("long", "short")
CONF_THRESHOLD = 0.1           # –≤–∫–ª—é—á–∞–µ–º –≤ —Ä–∞—Å—á—ë—Ç sense —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å confidence > 0.1
SMOOTH_HISTORY_N = 5           # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏ ‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏–º
EPS = 1e-12

# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_oracle_pack_sense():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    # —Å–æ–∑–¥–∞–Ω–∏–µ consumer group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await infra.redis_client.xgroup_create(
            name=PACK_SENSE_REPORT_READY_STREAM,
            groupname=PACK_SENSE_CONSUMER_GROUP,
            id="$",
            mkstream=True,
        )
        log.debug("üì° –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π Redis Stream: %s", PACK_SENSE_CONSUMER_GROUP)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            pass
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã Redis Stream")
            return

    log.debug("üöÄ –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ PACK-sense")

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=PACK_SENSE_CONSUMER_GROUP,
                consumername=PACK_SENSE_CONSUMER_NAME,
                streams={PACK_SENSE_REPORT_READY_STREAM: ">"},
                count=64,
                block=30_000,
            )
            if not resp:
                continue

            for stream_name, msgs in resp:
                for msg_id, fields in msgs:
                    try:
                        payload = json.loads(fields.get("data", "{}"))
                        report_id = int(payload.get("report_id", 0))
                        strategy_id = int(payload.get("strategy_id", 0))
                        time_frame = payload.get("time_frame")
                        window_end = payload.get("window_end")

                        if not (report_id and strategy_id and time_frame and window_end):
                            log.debug("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ PACK-sense —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö %s", payload)
                            await infra.redis_client.xack(PACK_SENSE_REPORT_READY_STREAM, PACK_SENSE_CONSUMER_GROUP, msg_id)
                            continue

                        await _process_report(report_id, strategy_id, time_frame, window_end)
                        await infra.redis_client.xack(PACK_SENSE_REPORT_READY_STREAM, PACK_SENSE_CONSUMER_GROUP, msg_id)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ PACK-sense")

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è –í–æ—Ä–∫–µ—Ä PACK-sense –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ PACK-sense ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: —Ä–∞—Å—á—ë—Ç sense –ø–æ pack_base+agg_type+agg_key
async def _process_report(report_id: int, strategy_id: int, time_frame: str, window_end_iso: str):
    # –ø–∞—Ä—Å–∏–Ω–≥ window_end
    try:
        window_end_dt = datetime.fromisoformat(str(window_end_iso).replace("Z", ""))
    except Exception:
        log.exception("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç window_end: %r", window_end_iso)
        return

    async with infra.pg_pool.acquire() as conn:
        # –≤—ã–±–∏—Ä–∞–µ–º –í–°–ï –∞–≥—Ä–µ–≥–∞—Ç—ã —ç—Ç–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (–¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –∫–ª—é—á–µ–π pack_base+agg_type+agg_key)
        rows_all = await conn.fetch(
            """
            SELECT timeframe, direction, pack_base, agg_type, agg_key
            FROM oracle_pack_aggregated_stat
            WHERE report_id = $1
            GROUP BY timeframe, direction, pack_base, agg_type, agg_key
            """,
            report_id
        )
        if not rows_all:
            log.debug("‚ÑπÔ∏è PACK-sense: –Ω–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–ª—è report_id=%s", report_id)
            return

        # –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ñ–∏–ª—å—Ç—Ä confidence>0.1 (states/agg_value —É—Ä–æ–≤–Ω—è)
        rows = await conn.fetch(
            """
            SELECT timeframe, direction, pack_base, agg_type, agg_key, agg_value,
                   trades_total, trades_wins, winrate
            FROM oracle_pack_aggregated_stat
            WHERE report_id = $1
              AND confidence > $2
            """,
            report_id, float(CONF_THRESHOLD)
        )
        # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á—É –±–∞–∑—ã sense: pack_base + agg_type + agg_key (+tf, dir)
        data: Dict[Tuple[str, str, str, str, str], List[dict]] = {}
        for r in rows:
            key = (r["timeframe"], r["direction"], r["pack_base"], r["agg_type"], r["agg_key"])
            data.setdefault(key, []).append({
                "agg_value": r["agg_value"],
                "n": int(r["trades_total"] or 0),
                "w": int(r["trades_wins"] or 0),
                "p": float(r["winrate"] or 0.0),
            })

        updated = 0
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –í–°–ï–ú –±–∞–∑–æ–≤—ã–º –∫–ª—é—á–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ ‚Üí score=0
        for r in rows_all:
            tf = r["timeframe"]; direction = r["direction"]
            pbase = r["pack_base"]; atype = r["agg_type"]; akey = r["agg_key"]
            states = data.get((tf, direction, pbase, atype, akey), [])

            score_current, states_used, components = _compute_score(states)

            # —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ (‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
            prev_vals = await conn.fetch(
                """
                SELECT score_current
                FROM oracle_pack_sense_stat
                WHERE strategy_id = $1
                  AND time_frame  = $2
                  AND timeframe   = $3
                  AND direction   = $4
                  AND pack_base   = $5
                  AND agg_type    = $6
                  AND agg_key     = $7
                  AND window_end  < $8
                ORDER BY window_end DESC
                LIMIT $9
                """,
                strategy_id, time_frame, tf, direction, pbase, atype, akey,
                window_end_dt, int(SMOOTH_HISTORY_N)
            )
            hist = [float(x["score_current"]) for x in prev_vals] if prev_vals else []
            score_smoothed = _smooth_mean(score_current, hist)

            await conn.execute(
                """
                INSERT INTO oracle_pack_sense_stat (
                    report_id, strategy_id, time_frame, window_end,
                    timeframe, direction, pack_base, agg_type, agg_key,
                    states_used, score_current, score_smoothed, components,
                    created_at, updated_at
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,
                    $10,$11,$12,$13,
                    now(), now()
                )
                ON CONFLICT (report_id, timeframe, direction, pack_base, agg_type, agg_key)
                DO UPDATE SET
                    states_used    = EXCLUDED.states_used,
                    score_current  = EXCLUDED.score_current,
                    score_smoothed = EXCLUDED.score_smoothed,
                    components     = EXCLUDED.components,
                    updated_at     = now()
                """,
                report_id, strategy_id, time_frame, window_end_dt,
                tf, direction, pbase, atype, akey,
                int(states_used), float(score_current), float(score_smoothed),
                json.dumps(components, separators=(",", ":"))
            )
            updated += 1

        log.debug("‚úÖ PACK-sense –≥–æ—Ç–æ–≤: report_id=%s sid=%s tf=%s window_end=%s ‚Äî —Å—Ç—Ä–æ–∫=%d",
                 report_id, strategy_id, time_frame, window_end_iso, updated)

        # –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ sense ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤
        try:
            payload = {
                "strategy_id": int(strategy_id),
                "report_id": int(report_id),
                "time_frame": str(time_frame),
                "window_end": window_end_dt.isoformat(),
                "generated_at": datetime.utcnow().replace(tzinfo=None).isoformat(),
                "axes_updated": int(updated),
            }
            await infra.redis_client.xadd(
                name=PACK_LISTS_BUILD_READY_STREAM,
                fields={"data": json.dumps(payload, separators=(",", ":"))},
                maxlen=PACK_LISTS_BUILD_READY_MAXLEN,
                approximate=True,
            )
            log.debug("[PACK_LISTS_BUILD_READY] sid=%s report_id=%s tf=%s axes=%d",
                      strategy_id, report_id, time_frame, updated)
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ %s", PACK_LISTS_BUILD_READY_STREAM)

# üî∏ –†–∞—Å—á—ë—Ç —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π —Å–∏–ª—ã –ø–æ —Å–ø–∏—Å–∫—É states (agg_value: p, n)
def _compute_score(states: List[dict]) -> Tuple[float, int, Dict]:
    # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞) ‚Äî score=0, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º k/n –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if not states or len([s for s in states if s["n"] > 0]) < 2:
        comps = {
            "k_states": len(states),
            "n_total": sum(int(s["n"]) for s in states),
            "reason": "insufficient_states" if states else "no_states_after_conf_filter",
            "p_bar": 0.0,
            "ss_between": 0.0,
            "ss_within": 0.0,
            "formula": "score = SS_between / (SS_between + SS_within)"
        }
        return 0.0, len(states), comps

    # –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è winrate –ø–æ —Å–¥–µ–ª–∫–∞–º
    n_total = sum(int(s["n"]) for s in states if s["n"] > 0)
    if n_total <= 0:
        comps = {"k_states": len(states), "n_total": 0, "reason": "no_mass", "p_bar": 0.0, "ss_between": 0.0, "ss_within": 0.0, "formula": "score = SS_between / (SS_between + SS_within)"}
        return 0.0, len(states), comps

    p_bar = sum(float(s["p"]) * int(s["n"]) for s in states if s["n"] > 0) / max(1, n_total)

    # –º–µ–∂–≥—Ä—É–ø–ø–æ–≤–∞—è/–≤–Ω—É—Ç—Ä–∏–≥—Ä—É–ø–ø–æ–≤–∞—è ¬´–¥–∏—Å–ø–µ—Ä—Å–∏–∏¬ª
    ss_between = 0.0
    ss_within = 0.0
    for s in states:
        n_i = int(s["n"])
        if n_i <= 0:
            continue
        p_i = float(s["p"])
        ss_between += n_i * (p_i - p_bar) ** 2
        ss_within += p_i * (1.0 - p_i)

    score = ss_between / (ss_between + ss_within + EPS)
    score = max(0.0, min(1.0, float(round(score, 4))))

    comps = {
        "k_states": len(states),
        "n_total": n_total,
        "p_bar": round(p_bar, 6),
        "ss_between": round(ss_between, 6),
        "ss_within": round(ss_within, 6),
        "formula": "score = SS_between / (SS_between + SS_within)",
    }
    return score, len(states), comps


# üî∏ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏ ‚â§5 –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
def _smooth_mean(current: float, history: List[float]) -> float:
    vals = [float(current)] + [float(x) for x in history if x is not None]
    if not vals:
        return float(current)
    sm = sum(vals) / len(vals)
    sm = max(0.0, min(1.0, float(round(sm, 4))))
    return sm