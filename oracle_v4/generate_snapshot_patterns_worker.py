# generate_snapshot_patterns_worker.py

import asyncio
import logging
import itertools

import infra

log = logging.getLogger("PATTERN_GENERATOR")
logging.basicConfig(level=logging.INFO)

ELEMENTS = ["PRICE", "EMA9", "EMA21", "EMA50", "EMA100", "EMA200"]
EPSILON = 0.0005  # —É—Å–ª–æ–≤–Ω—ã–π –ø–æ—Ä–æ–≥ ‚Äî –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç.–∫. —Å–∏–º—É–ª—è—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤


# üî∏ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã (EMA –ø–æ —á–∏—Å–ª—É, PRICE ‚Äî –≤ –∫–æ–Ω–µ—Ü)
def sort_key(x):
    if x == "PRICE":
        return 999
    return int(x.replace("EMA", ""))


# üî∏ –í—Å–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–ª–∏–ø–∞–Ω–∏—è)
def generate_structural_patterns(trio):
    from itertools import permutations

    results = set()

    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ 1, 2, 3 –≥—Ä—É–ø–ø
    # –ì—Ä—É–ø–ø—ã: [[A,B,C]], [[A,B], [C]], [[A], [B,C]], [[A],[B],[C]]
    partitions = []

    # –û–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
    partitions.append([trio])

    # –î–≤–µ –≥—Ä—É–ø–ø—ã (A+B)+C
    for i in range(3):
        group1 = [trio[i], trio[(i+1)%3]]
        group2 = [trio[(i+2)%3]]
        partitions.append([group1, group2])
        partitions.append([group2, group1])

    # –¢—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
    for perm in permutations(trio):
        partitions.append([[perm[0]], [perm[1]], [perm[2]]])

    # –ü–æ—Å—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
    for part in partitions:
        groups = ["=".join(sorted(group, key=sort_key)) for group in part]
        results.add(" > ".join(groups))

    return results


# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def run_generate_snapshot_patterns():
    await infra.setup_pg()
    log.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö EMA –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (3 –∏–∑ 6 —Å —Å–ª–∏–ø–∞–Ω–∏–µ–º)")

    insert_query = """
        INSERT INTO oracle_emasnapshot_pattern (pattern)
        VALUES ($1)
        ON CONFLICT (pattern) DO NOTHING
    """

    all_patterns = set()
    combos = list(itertools.combinations(ELEMENTS, 3))

    for trio in combos:
        patterns = generate_structural_patterns(trio)
        all_patterns.update(patterns)

    log.info(f"üî¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(all_patterns)}")

    async with infra.pg_pool.acquire() as conn:
        for pattern in sorted(all_patterns):
            await conn.execute(insert_query, pattern)
            log.debug(f"‚ûï {pattern}")

    log.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {len(all_patterns)} —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ oracle_emasnapshot_pattern")