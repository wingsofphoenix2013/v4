import asyncio
import logging

import infra

log = logging.getLogger("VOTER_ANALYZER")

# üî∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
BATCH_SIZE = 100

# üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∏–∑ strategy_voting_list
async def fetch_positions_to_evaluate():
    query = """
        SELECT p.id, p.log_uid, p.strategy_id, p.symbol, p.pnl
        FROM positions_v4 p
        JOIN strategy_voting_list svl ON p.strategy_id = svl.strategy_id
        WHERE p.status = 'closed'
          AND p.voter_checked = false
          AND p.log_uid IS NOT NULL
        ORDER BY p.closed_at
        LIMIT $1
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query, BATCH_SIZE)
        log.info(f"üî∏ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {len(rows)}")
        return rows

# üî∏ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–∑–∏—Ü–∏–µ–π
async def analyze_position(pos):
    log_uid = pos["log_uid"]
    strategy_id = pos["strategy_id"]
    symbol = pos["symbol"]
    pnl = pos["pnl"]
    position_result = "win" if pnl > 0 else "loss"
    position_present = True  # –≤—Å–µ–≥–¥–∞ True, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞

    query = """
        SELECT model, decision
        FROM strategy_voting_log
        WHERE log_uid = $1
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query, log_uid)

    if not rows:
        # –ü–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å, –Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ
        classification = f"missed_{position_result}"
        log.info(
            f"üî∏ {log_uid} | strategy_id={strategy_id} | model=‚Äî | decision=‚Äî | "
            f"position={position_result} | ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification.upper()}"
        )
        return

    for row in rows:
        model = row["model"]
        decision = row["decision"]

        if decision == "open":
            if position_result == "win":
                classification = "TP"
            else:
                classification = "FP"
        elif decision == "reject":
            if position_result == "win":
                classification = "FN"
            else:
                classification = "TN"
        else:
            classification = "invalid"

        log.info(
            f"üî∏ {log_uid} | strategy_id={strategy_id} | model={model} | decision={decision} | "
            f"position={position_result} | ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification}"
        )

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
async def run_voter_analyzer():
    positions = await fetch_positions_to_evaluate()
    for pos in positions:
        log.debug(
            f"üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ #{pos['id']} | strategy_id={pos['strategy_id']} | "
            f"log_uid={pos['log_uid']} | pnl={pos['pnl']}"
        )
        await analyze_position(pos)