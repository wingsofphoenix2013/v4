# trend_worker.py

import asyncio
import logging
from datetime import datetime
import infra
import redis.exceptions

log = logging.getLogger("TREND_WORKER")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
REQUIRED_PARAMS = {
    "m15": [
        "ema9",
        "ema21",
        "adx_dmi14_adx",
        "adx_dmi14_plus_di",
        "adx_dmi14_minus_di",
    ],
    "m5": [
        "macd12_macd",
        "macd12_macd_signal",
        "macd12_macd_hist",
        "rsi14",
    ],
}
# üî∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ Redis TS (—Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ä–∞—Å—á—ë—Ç–æ–º —Ñ–ª–∞–≥–∞)
async def wait_for_all_indicators(symbol: str, open_time: str):
    redis = infra.redis_client
    max_wait_sec = 20
    check_interval = 1
    waited = 0

    log.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} @ {open_time}")

    # –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º—Å)
    target_dt = datetime.fromisoformat(open_time.replace("Z", ""))
    target_ts = int(target_dt.timestamp() * 1000)

    while waited < max_wait_sec:
        all_ready = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        for tf, params in REQUIRED_PARAMS.items():
            for param in params:
                key = f"ts_ind:{symbol}:{tf}:{param}"
                try:
                    val = await redis.ts().get(key)
                except redis.exceptions.ResponseError as e:
                    if "WRONGTYPE" in str(e):
                        log.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø Redis –∫–ª—é—á–∞: {key} ‚Äî –Ω–µ TimeSeries")
                        all_ready = False
                        break
                    else:
                        raise
                if not val:
                    log.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {key} –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    all_ready = False
                    break
            if not all_ready:
                break

        if not all_ready:
            await asyncio.sleep(check_interval)
            waited += check_interval
            continue

        # ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = {}  # tf -> param -> List[float]
        for tf, params in REQUIRED_PARAMS.items():
            interval_ms = 900_000 if tf == "m15" else 300_000
            from_ts = target_ts - interval_ms * 4
            history[tf] = {}

            for param in params:
                key = f"ts_ind:{symbol}:{tf}:{param}"
                try:
                    series = await redis.ts().range(key, from_ts, target_ts, count=5)
                    values = [float(v) for _, v in series]
                    history[tf][param] = values
                except redis.exceptions.ResponseError as e:
                    log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è TS –¥–ª—è {key}: {e}")
                    history[tf][param] = []

        # üîç –†–∞—Å—á—ë—Ç —É—Å–ª–æ–≤–∏–π
        explanation = []
        result = None

        # --- UP ---
        cond_up = 0
        try:
            if history["m15"]["ema9"][-1] > history["m15"]["ema21"][-1] and \
               history["m15"]["ema9"][-1] > history["m15"]["ema9"][0]:
                cond_up += 1
                explanation.append("‚Ä¢ EMA(9) > EMA(21) –∏ –Ω–∞–∫–ª–æ–Ω –≤–≤–µ—Ä—Ö ‚Äî OK")
            else:
                explanation.append("‚Ä¢ EMA(9) > EMA(21) –∏ –Ω–∞–∫–ª–æ–Ω –≤–≤–µ—Ä—Ö ‚Äî FAILED")

            if history["m15"]["adx_dmi14_adx"][-1] > 20 and \
               history["m15"]["adx_dmi14_plus_di"][-1] > history["m15"]["adx_dmi14_minus_di"][-1]:
                cond_up += 1
                explanation.append("‚Ä¢ ADX > 20 –∏ DMI+ > DMI‚àí ‚Äî OK")
            else:
                explanation.append("‚Ä¢ ADX > 20 –∏ DMI+ > DMI‚àí ‚Äî FAILED")

            h_hist = history["m5"]["macd12_macd_hist"]
            if history["m5"]["macd12_macd"][-1] > history["m5"]["macd12_macd_signal"][-1] and \
               h_hist[-1] > 0 and h_hist[-1] > h_hist[-2]:
                cond_up += 1
                explanation.append("‚Ä¢ MACD > —Å–∏–≥–Ω–∞–ª, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî OK")
            else:
                explanation.append("‚Ä¢ MACD > —Å–∏–≥–Ω–∞–ª, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî FAILED")

            h_rsi = history["m5"]["rsi14"]
            if h_rsi[-1] > 55 and min(h_rsi) > 50:
                cond_up += 1
                explanation.append("‚Ä¢ RSI > 55 –∏ –≤—ã—à–µ 50 –Ω–∞ –≤—Å–µ—Ö 5 —Å–≤–µ—á–∞—Ö ‚Äî OK")
            else:
                explanation.append("‚Ä¢ RSI > 55 –∏ –≤—ã—à–µ 50 –Ω–∞ –≤—Å–µ—Ö 5 —Å–≤–µ—á–∞—Ö ‚Äî FAILED")
        except Exception as e:
            explanation.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —É—Å–ª–æ–≤–∏–π UP: {e}")

        if cond_up >= 3:
            result = "UP"

        # --- DOWN ---
        if not result:
            cond_down = 0
            try:
                if history["m15"]["ema9"][-1] < history["m15"]["ema21"][-1] and \
                   history["m15"]["ema9"][-1] < history["m15"]["ema9"][0]:
                    cond_down += 1
                    explanation.append("‚Ä¢ EMA(9) < EMA(21) –∏ –Ω–∞–∫–ª–æ–Ω –≤–Ω–∏–∑ ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ EMA(9) < EMA(21) –∏ –Ω–∞–∫–ª–æ–Ω –≤–Ω–∏–∑ ‚Äî FAILED")

                if history["m15"]["adx_dmi14_adx"][-1] > 20 and \
                   history["m15"]["adx_dmi14_minus_di"][-1] > history["m15"]["adx_dmi14_plus_di"][-1]:
                    cond_down += 1
                    explanation.append("‚Ä¢ ADX > 20 –∏ DMI‚àí > DMI+ ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ ADX > 20 –∏ DMI‚àí > DMI+ ‚Äî FAILED")

                h_hist = history["m5"]["macd12_macd_hist"]
                if history["m5"]["macd12_macd"][-1] < history["m5"]["macd12_macd_signal"][-1] and \
                   h_hist[-1] < 0 and h_hist[-1] < h_hist[-2]:
                    cond_down += 1
                    explanation.append("‚Ä¢ MACD < —Å–∏–≥–Ω–∞–ª, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É–±—ã–≤–∞–µ—Ç ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ MACD < —Å–∏–≥–Ω–∞–ª, –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É–±—ã–≤–∞–µ—Ç ‚Äî FAILED")

                h_rsi = history["m5"]["rsi14"]
                if h_rsi[-1] < 45 and max(h_rsi) < 50:
                    cond_down += 1
                    explanation.append("‚Ä¢ RSI < 45 –∏ –Ω–∏–∂–µ 50 –Ω–∞ –≤—Å–µ—Ö 5 —Å–≤–µ—á–∞—Ö ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ RSI < 45 –∏ –Ω–∏–∂–µ 50 –Ω–∞ –≤—Å–µ—Ö 5 —Å–≤–µ—á–∞—Ö ‚Äî FAILED")
            except Exception as e:
                explanation.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —É—Å–ª–æ–≤–∏–π DOWN: {e}")

            if cond_down >= 3:
                result = "DOWN"

        # --- TRANSITION ---
        if not result:
            cond_trans = 0
            try:
                h_adx = history["m15"]["adx_dmi14_adx"]
                if h_adx[0] < 15 and h_adx[-1] > 20:
                    cond_trans += 1
                    explanation.append("‚Ä¢ ADX —Ä–∞—Å—Ç—ë—Ç —Å <15 –¥–æ >20 ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ ADX —Ä–∞—Å—Ç—ë—Ç —Å <15 –¥–æ >20 ‚Äî FAILED")

                e9 = history["m15"]["ema9"]
                e21 = history["m15"]["ema21"]
                if (e9[0] < e21[0] and e9[-1] > e21[-1]) or (e9[0] > e21[0] and e9[-1] < e21[-1]):
                    cond_trans += 1
                    explanation.append("‚Ä¢ EMA(9) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA(21) ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ EMA(9) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA(21) ‚Äî FAILED")

                h_hist = history["m5"]["macd12_macd_hist"]
                if h_hist[-1] * h_hist[-2] < 0:
                    cond_trans += 1
                    explanation.append("‚Ä¢ MACD hist –º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ MACD hist –º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ ‚Äî FAILED")

                h_rsi = history["m5"]["rsi14"]
                if 47 <= h_rsi[0] <= 53 and (h_rsi[-1] > 55 or h_rsi[-1] < 45):
                    cond_trans += 1
                    explanation.append("‚Ä¢ RSI –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã 47‚Äì53 ‚Äî OK")
                else:
                    explanation.append("‚Ä¢ RSI –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã 47‚Äì53 ‚Äî FAILED")
            except Exception as e:
                explanation.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —É—Å–ª–æ–≤–∏–π TRANSITION: {e}")

            if cond_trans >= 3:
                result = "TRANSITION"

        # --- FLAT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
        if not result:
            result = "FLAT"
            explanation.append("‚Ä¢ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚â•3 —É—Å–ª–æ–≤–∏–π –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Üí FLAT")

        log.debug(f"üß≠ trend_state = {result} –¥–ª—è {symbol} @ {open_time}")
        for line in explanation:
            log.debug("    " + line)

        await save_flag(symbol, open_time, "trend_state", result)

        return
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async def handle_initiator(message: dict):
    symbol = message.get("symbol")
    tf = message.get("timeframe")
    indicator = message.get("indicator")
    open_time = message.get("open_time")
    status = message.get("status")

    if not all([symbol, tf, indicator, open_time, status]):
        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return

    if tf != "m15" or indicator != "ema9" or status != "ready":
        return

    log.debug(f"üîî –ò–Ω–∏—Ü–∏–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {symbol} | {indicator} | {tf} | {open_time}")
    await wait_for_all_indicators(symbol, open_time)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç Redis Stream
async def run_trend_worker():
    redis = infra.redis_client
    stream_name = "indicator_stream"
    last_id = "$"

    log.debug("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: indicator_stream")

    while True:
        try:
            response = await redis.xread(
                streams={stream_name: last_id},
                count=10,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_initiator(parsed))
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ indicator_stream")
            await asyncio.sleep(1)
# üî∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ —Ñ–ª–∞–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
async def save_flag(symbol: str, open_time: str, flag_type: str, flag_value: str):
    query = """
        INSERT INTO oracle_flags_v4 (symbol, open_time, flag_type, flag_value)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT DO NOTHING
    """
    async with infra.pg_pool.acquire() as conn:
        await conn.execute(query, symbol, open_time, flag_type, flag_value)
        log.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–ª–∞–≥ {flag_type}={flag_value} –¥–ª—è {symbol} @ {open_time}")