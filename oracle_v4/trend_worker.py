# trend_worker.py

import asyncio
import logging
from datetime import datetime
import infra
import redis.exceptions

log = logging.getLogger("TREND_WORKER")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
REQUIRED_PARAMS = {
    "m15": [
        "ema9",
        "ema21",
        "adx_dmi14_adx",
        "adx_dmi14_plus_di",
        "adx_dmi14_minus_di",
    ],
    "m5": [
        "macd12_macd",
        "macd12_macd_signal",
        "macd12_macd_hist",
        "rsi14",
    ],
}
# üî∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ Redis TS (—Å –∏—Å—Ç–æ—Ä–∏–µ–π)
async def wait_for_all_indicators(symbol: str, open_time: str):
    redis = infra.redis_client
    max_wait_sec = 20
    check_interval = 1
    waited = 0

    log.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} @ {open_time}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º open_time –≤ timestamp
    target_dt = datetime.fromisoformat(open_time.replace("Z", ""))
    target_ts = int(target_dt.timestamp() * 1000)

    while waited < max_wait_sec:
        all_ready = True
        values_ready = {}

        for tf, params in REQUIRED_PARAMS.items():
            for param in params:
                key = f"ts_ind:{symbol}:{tf}:{param}"
                try:
                    val = await redis.ts().get(key)
                except redis.exceptions.ResponseError as e:
                    if "WRONGTYPE" in str(e):
                        log.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø Redis –∫–ª—é—á–∞: {key} ‚Äî –Ω–µ TimeSeries")
                        all_ready = False
                        break
                    else:
                        raise

                if not val:
                    log.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {key} –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    all_ready = False
                    break

                values_ready[f"{tf}:{param}"] = val[1]

            if not all_ready:
                break

        if all_ready:
            log.info(f"‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {symbol} @ {open_time}")

            log.info("üìä –ò—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ Redis TS:")
            for tf, params in REQUIRED_PARAMS.items():
                for param in params:
                    key = f"ts_ind:{symbol}:{tf}:{param}"

                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º m15 = 900_000 –º—Å, m5 = 300_000 –º—Å
                    interval_ms = 900_000 if tf == "m15" else 300_000
                    from_ts = target_ts - interval_ms * 4  # 5 —Ç–æ—á–µ–∫ –≤–∫–ª—é—á–∞—è —Ü–µ–ª–µ–≤—É—é

                    try:
                        series = await redis.ts().range(
                            key,
                            from_ts,
                            target_ts,
                            count=5
                        )
                    except redis.exceptions.ResponseError as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è TS –¥–ª—è {key}: {e}")
                        continue

                    log.info(f"üîç {key}")
                    for ts, value in series:
                        ts_str = datetime.utcfromtimestamp(ts / 1000).isoformat()
                        log.info(f"    ‚Ä¢ {ts_str} ‚Üí {value}")

            return

        await asyncio.sleep(check_interval)
        waited += check_interval

    log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {symbol} @ {open_time} –∑–∞ {max_wait_sec} —Å–µ–∫")
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async def handle_initiator(message: dict):
    symbol = message.get("symbol")
    tf = message.get("timeframe")
    indicator = message.get("indicator")
    open_time = message.get("open_time")
    status = message.get("status")

    if not all([symbol, tf, indicator, open_time, status]):
        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return

    if tf != "m15" or indicator != "ema9" or status != "ready":
        return

    log.info(f"üîî –ò–Ω–∏—Ü–∏–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {symbol} | {indicator} | {tf} | {open_time}")
    await wait_for_all_indicators(symbol, open_time)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç Redis Stream
async def run_trend_worker():
    redis = infra.redis_client
    stream_name = "indicator_stream"
    last_id = "$"

    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: indicator_stream")

    while True:
        try:
            response = await redis.xread(
                streams={stream_name: last_id},
                count=10,
                block=1000
            )
            for stream, messages in response:
                for msg_id, msg_data in messages:
                    parsed = {k: v for k, v in msg_data.items()}
                    asyncio.create_task(handle_initiator(parsed))
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ indicator_stream")
            await asyncio.sleep(1)