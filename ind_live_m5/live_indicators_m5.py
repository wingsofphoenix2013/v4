# live_indicators_m5.py ‚Äî —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ¬´–∂–∏–≤—ã—Ö¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ m5 –≤ Redis KV (ind_live:*) + L1-–∫—ç—à –≤ –ø–∞–º—è—Ç–∏

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Optional, List, Any

from indicators.compute_and_store import compute_snapshot_values_async
from packs.pack_utils import floor_to_bar, load_ohlcv_df


# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LIVE_M5")


# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞
TF = "m5"                            # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è Stage-1
BARS = 800                           # –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
INITIAL_DELAY_SEC = 60               # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ run_* –ø–µ—Ç–ª–µ)
SLEEP_BETWEEN_CYCLES_SEC = 3         # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
TTL_SEC = 90                         # TTL –¥–ª—è ind_live:* –∫–ª—é—á–µ–π –∏ L1, —Å–µ–∫
MAX_CONCURRENCY = 30                 # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ Redis KV (ind_live:*), —Å TTL
async def _publish_values(redis, symbol: str, tf: str, values: Dict[str, str]) -> (int, int):
    ok = 0
    err = 0
    tasks = []
    for pname, sval in values.items():
        key = f"ind_live:{symbol}:{tf}:{pname}"
        try:
            tasks.append(redis.set(key, sval, ex=TTL_SEC))
        except Exception:
            err += 1
    if tasks:
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for r in results:
            if isinstance(r, Exception):
                err += 1
            else:
                ok += 1
    return ok, err


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: –∑–∞–≥—Ä—É–∑–∫–∞ DF, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º m5, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Redis –∏ L1
async def _process_symbol(redis,
                          live_cache,  # –æ–±—ä–µ–∫—Ç L1-–∫—ç—à–∞; –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è None
                          symbol: str,
                          precision: int,
                          instances_m5: List[Dict[str, Any]],
                          now_ms: int) -> Dict[str, int]:
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –∫ –Ω–∞—á–∞–ª—É —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ä–∞
    bar_open_ms = floor_to_bar(now_ms, TF)

    # –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
    df = await load_ohlcv_df(redis, symbol, TF, bar_open_ms, BARS)
    if df is None or df.empty:
        return {"computed": 0, "written": 0, "errors": 0, "skipped": len(instances_m5)}

    computed = 0
    written = 0
    errors = 0
    skipped = 0

    # –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–ª—è L1
    l1_values: Dict[str, str] = {}

    # –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º m5
    for inst in instances_m5:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ enabled_at
        enabled_at = inst.get("enabled_at")
        if enabled_at:
            enabled_ms = int(enabled_at.replace(tzinfo=None).timestamp() * 1000)
            if bar_open_ms < enabled_ms:
                skipped += 1
                continue

        # —Ä–∞—Å—á—ë—Ç live –∑–Ω–∞—á–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–æ–≤—ã–µ, —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –ø–æ precision)
        try:
            values = await compute_snapshot_values_async(inst, symbol, df, precision)
        except Exception:
            errors += 1
            continue

        if not values:
            skipped += 1
            continue

        computed += 1

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Redis
        ok, err = await _publish_values(redis, symbol, TF, values)
        written += ok
        errors += err

        # –Ω–∞–∫–æ–ø–∏–º –≤ L1
        try:
            l1_values.update(values)
        except Exception:
            log.debug(f"LIVE_M5 L1 update skipped for {symbol}: merge error")

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ L1
    if live_cache and l1_values:
        try:
            await live_cache.set(symbol, TF, bar_open_ms, l1_values, ttl_sec=TTL_SEC)
        except Exception as e:
            log.debug(f"LIVE_M5 L1 set error for {symbol}: {e}")

    return {"computed": computed, "written": written, "errors": errors, "skipped": skipped}


# üî∏ –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ LIVE m5 (–±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–∞—É–∑/–∑–∞–¥–µ—Ä–∂–µ–∫) ‚Äî –¥–ª—è —Å–µ–∫–≤–µ–Ω—Å–æ—Ä–∞
async def live_m5_pass(redis,
                       get_instances_by_tf,
                       get_precision,
                       get_active_symbols,
                       live_cache=None) -> None:
    t0 = time.monotonic()

    # —Å–Ω–∏–º–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ m5
    symbols = list(get_active_symbols()) or []
    instances_m5 = [i for i in get_instances_by_tf(TF)]
    total_instances = len(instances_m5)

    if not symbols or not instances_m5:
        elapsed_ms = int((time.monotonic() - t0) * 1000)
        log.info(
            f"LIVE_M5 PASS done: symbols={len(symbols)} instances={total_instances} "
            f"computed=0 written=0 errors=0 skipped=0 elapsed_ms={elapsed_ms}"
        )
        return

    # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (ms) –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∞
    now_ms = int(datetime.utcnow().timestamp() * 1000)

    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    sem = asyncio.Semaphore(MAX_CONCURRENCY)

    async def _wrap(symbol: str):
        async with sem:
            try:
                precision = int(get_precision(symbol) or 8)
            except Exception:
                precision = 8
            return await _process_symbol(redis, live_cache, symbol, precision, instances_m5, now_ms)

    tasks = [asyncio.create_task(_wrap(sym)) for sym in symbols]
    results = await asyncio.gather(*tasks, return_exceptions=False)

    # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    agg_computed = sum(r["computed"] for r in results)
    agg_written  = sum(r["written"] for r in results)
    agg_errors   = sum(r["errors"] for r in results)
    agg_skipped  = sum(r["skipped"] for r in results)

    elapsed_ms = int((time.monotonic() - t0) * 1000)
    log.info(
        f"LIVE_M5 PASS done: symbols={len(symbols)} instances={total_instances} "
        f"computed={agg_computed} written={agg_written} errors={agg_errors} skipped={agg_skipped} "
        f"elapsed_ms={elapsed_ms}"
    )


# üî∏ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä LIVE m5 (–¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ —Å–µ–∫–≤–µ–Ω—Å–æ—Ä–∞)
async def run_live_indicators_m5(pg,
                                 redis,
                                 get_instances_by_tf,
                                 get_precision,
                                 get_active_symbols,
                                 live_cache=None):
    log.debug("LIVE_M5: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (Stage-1: —Ç–æ–ª—å–∫–æ m5, —Ç–æ–ª—å–∫–æ RAW ‚Üí Redis ind_live:* + L1)")
    await asyncio.sleep(INITIAL_DELAY_SEC)
    while True:
        await live_m5_pass(
            redis,
            get_instances_by_tf,
            get_precision,
            get_active_symbols,
            live_cache=live_cache,
        )
        await asyncio.sleep(SLEEP_BETWEEN_CYCLES_SEC)