# live_indicators_m5.py ‚Äî —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ¬´–∂–∏–≤—ã—Ö¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ m5 –≤ Redis KV (ind_live:*)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
from datetime import datetime

from indicators.compute_and_store import compute_snapshot_values_async
from packs.pack_utils import floor_to_bar, load_ohlcv_df


# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LIVE_M5")


# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞
TF = "m5"                            # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è Stage-1
BARS = 800                           # –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
INITIAL_DELAY_SEC = 60               # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º
SLEEP_BETWEEN_CYCLES_SEC = 3         # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
TTL_SEC = 90                         # TTL –¥–ª—è ind_live:* –∫–ª—é—á–µ–π, —Å–µ–∫
MAX_CONCURRENCY = 30                 # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ Redis KV (ind_live:*), —Å TTL
async def _publish_values(redis, symbol: str, tf: str, values: dict[str, str]) -> tuple[int, int]:
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (—É—Å–ø–µ—à–Ω–æ_—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ—à–∏–±–æ–∫)
    ok = 0
    err = 0
    tasks = []
    for pname, sval in values.items():
        key = f"ind_live:{symbol}:{tf}:{pname}"
        try:
            tasks.append(redis.set(key, sval, ex=TTL_SEC))
        except Exception:
            err += 1
    if tasks:
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for r in results:
            if isinstance(r, Exception):
                err += 1
            else:
                ok += 1
    return ok, err


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: –∑–∞–≥—Ä—É–∑–∫–∞ DF, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º m5, –ø—É–±–ª–∏–∫–∞—Ü–∏—è
async def _process_symbol(redis,
                          symbol: str,
                          precision: int,
                          instances_m5: list[dict],
                          now_ms: int) -> dict:
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –∫ –Ω–∞—á–∞–ª—É —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ä–∞
    bar_open_ms = floor_to_bar(now_ms, TF)

    # –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
    df = await load_ohlcv_df(redis, symbol, TF, bar_open_ms, BARS)
    if df is None or df.empty:
        return {"symbol": symbol, "computed": 0, "written": 0, "errors": 0, "skipped": len(instances_m5)}

    computed = 0
    written = 0
    errors = 0
    skipped = 0

    # –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º m5
    for inst in instances_m5:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ enabled_at: –µ—Å–ª–∏ –±–∞—Ä —Ä–∞–Ω—å—à–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        enabled_at = inst.get("enabled_at")
        if enabled_at:
            enabled_ms = int(enabled_at.replace(tzinfo=None).timestamp() * 1000)
            if bar_open_ms < enabled_ms:
                skipped += 1
                continue

        # —Ä–∞—Å—á—ë—Ç ¬´–∂–∏–≤—ã—Ö¬ª –∑–Ω–∞—á–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–æ–≤—ã–µ, —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –ø–æ precision)
        try:
            values = await compute_snapshot_values_async(inst, symbol, df, precision)
        except Exception:
            errors += 1
            continue

        if not values:
            skipped += 1
            continue

        computed += 1

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ ind_live:{symbol}:{m5}:{param}
        ok, err = await _publish_values(redis, symbol, TF, values)
        written += ok
        errors += err

    return {"symbol": symbol, "computed": computed, "written": written, "errors": errors, "skipped": skipped}


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∫–∞–∂–¥—ã–µ ~SLEEP_BETWEEN_CYCLES_SEC c—á–∏—Ç–∞–µ—Ç RAW –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã m5 –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏ –ø–∏—à–µ—Ç –≤ ind_live:*
async def run_live_indicators_m5(pg,
                                 redis,
                                 get_instances_by_tf,
                                 get_precision,
                                 get_active_symbols):
    log.debug("LIVE_M5: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (Stage-1: —Ç–æ–ª—å–∫–æ m5, —Ç–æ–ª—å–∫–æ RAW ‚Üí Redis ind_live:*)")

    # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤—Ä–æ–≤–µ–Ω—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    await asyncio.sleep(INITIAL_DELAY_SEC)

    # –ø—Ä–µ–¥—Å–æ–∑–¥–∞—ë–º —Å–µ–º–∞—Ñ–æ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    sem = asyncio.Semaphore(MAX_CONCURRENCY)

    while True:
        t0 = time.monotonic()

        # —Å–Ω–∏–º–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ m5
        symbols = list(get_active_symbols()) or []
        instances_m5 = [i for i in get_instances_by_tf(TF)]
        total_instances = len(instances_m5)

        # –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—Ç—ã
        if not symbols or not instances_m5:
            # –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ö–æ–¥ ‚Äî –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–±–ª—é–¥–∞–µ–º —Ü–∏–∫–ª –∏ –ª–æ–≥–∏—Ä—É–µ–º
            elapsed_ms = int((time.monotonic() - t0) * 1000)
            log.info(
                f"LIVE_M5 PASS done: symbols={len(symbols)} instances={total_instances} "
                f"computed=0 written=0 errors=0 skipped=0 elapsed_ms={elapsed_ms}"
            )
            await asyncio.sleep(SLEEP_BETWEEN_CYCLES_SEC)
            continue

        # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (ms) –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∞
        now_ms = int(datetime.utcnow().timestamp() * 1000)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        async def _wrap(symbol: str):
            async with sem:
                try:
                    precision = int(get_precision(symbol) or 8)
                except Exception:
                    precision = 8
                return await _process_symbol(redis, symbol, precision, instances_m5, now_ms)

        tasks = [asyncio.create_task(_wrap(sym)) for sym in symbols]
        results = await asyncio.gather(*tasks, return_exceptions=False)

        # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        agg_computed = sum(r["computed"] for r in results)
        agg_written  = sum(r["written"] for r in results)
        agg_errors   = sum(r["errors"] for r in results)
        agg_skipped  = sum(r["skipped"] for r in results)

        elapsed_ms = int((time.monotonic() - t0) * 1000)
        log.info(
            f"LIVE_M5 PASS done: symbols={len(symbols)} instances={total_instances} "
            f"computed={agg_computed} written={agg_written} errors={agg_errors} skipped={agg_skipped} "
            f"elapsed_ms={elapsed_ms}"
        )

        # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        await asyncio.sleep(SLEEP_BETWEEN_CYCLES_SEC)