# m5_sequencer.py ‚Äî —Å–µ–∫–≤–µ–Ω—Å–æ—Ä m5: LIVE ‚Üí –ø–∞—É–∑–∞ ‚Üí MW ‚Üí –ø–∞—É–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç L1 –º–µ–∂–¥—É —à–∞–≥–∞–º–∏)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging

from live_indicators_m5 import live_m5_pass, INITIAL_DELAY_SEC, SLEEP_BETWEEN_CYCLES_SEC
from live_mw_m5 import mw_m5_pass


# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("SEQ_M5")


# üî∏ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–µ–∫–≤–µ–Ω—Å–æ—Ä
async def run_m5_sequencer(pg,
                           redis,
                           get_instances_by_tf,
                           get_precision,
                           get_active_symbols,
                           live_cache):
    log.debug("SEQ_M5: –∑–∞–ø—É—Å–∫ —Å–µ–∫–≤–µ–Ω—Å–æ—Ä–∞ (LIVE ‚Üí –ø–∞—É–∑–∞ ‚Üí MW ‚Üí –ø–∞—É–∑–∞)")
    await asyncio.sleep(INITIAL_DELAY_SEC)

    while True:
        # LIVE m5
        await live_m5_pass(
            redis,
            get_instances_by_tf,
            get_precision,
            get_active_symbols,
            live_cache=live_cache,
        )
        await asyncio.sleep(SLEEP_BETWEEN_CYCLES_SEC)

        # MW m5
        await mw_m5_pass(
            redis,
            get_active_symbols,
            get_precision,
            live_cache,
        )
        await asyncio.sleep(SLEEP_BETWEEN_CYCLES_SEC)