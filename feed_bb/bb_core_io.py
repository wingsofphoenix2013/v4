# bb_core_io.py ‚Äî —á—Ç–µ–Ω–∏–µ bb:ohlcv_stream (idle): –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ PG

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import asyncio
import logging

log = logging.getLogger("BB_CORE_IO")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (idle)
async def run_core_io_bb(pg_pool, redis):
    stream_key = "bb:ohlcv_stream"
    last_id = "$"  # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏

    log.info("BB_CORE_IO –∑–∞–ø—É—â–µ–Ω (idle): —Å–ª—É—à–∞—é bb:ohlcv_stream")

    while True:
        try:
            resp = await redis.xread({stream_key: last_id}, count=10, block=5000)
            if not resp:
                log.debug("BB_CORE_IO: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (idle)")
                continue

            for _stream, messages in resp:
                last_id = messages[-1][0]
                log.info(f"BB_CORE_IO: –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (idle)")
                # idle-—Ä–µ–∂–∏–º: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ PG, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–∏–∫–ª–æ–º

        except Exception as e:
            log.error(f"BB_CORE_IO –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await asyncio.sleep(2)