# bb_core_io.py ‚Äî —á—Ç–µ–Ω–∏–µ bb:ohlcv_stream –∏ –∑–∞–ø–∏—Å—å –≤ ohlcv_bb_* (PG), –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∞

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import asyncio
import logging
from decimal import Decimal

log = logging.getLogger("BB_CORE_IO")

# üî∏ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
TABLE_MAP = {
    "m5": "ohlcv_bb_m5",
    "m15": "ohlcv_bb_m15",
    "h1": "ohlcv_bb_h1",
}

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_core_io_bb(pg_pool, redis):
    stream_key = "bb:ohlcv_stream"
    last_id = "$"  # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    semaphore = asyncio.Semaphore(20)  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é

    log.debug("BB_CORE_IO –∑–∞–ø—É—â–µ–Ω: —Å–ª—É—à–∞—é bb:ohlcv_stream –∏ –ø–∏—à—É –≤ PG")

    async def process_message(data):
        async with semaphore:
            interval = data.get("interval")
            table = TABLE_MAP.get(interval)
            if not table:
                return

            symbol = data["symbol"]

            try:
                ts_int = int(data["timestamp"]) // 1000
                open_time = ts_int
            except Exception as e:
                log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è timestamp: {data.get('timestamp')} ‚Üí {e}")
                return

            try:
                o = Decimal(data["o"])
                h = Decimal(data["h"])
                l = Decimal(data["l"])
                c = Decimal(data["c"])
                v = Decimal(data["v"])

                async with pg_pool.connection() as conn:
                    async with conn.cursor() as cur:
                        await cur.execute(
                            f"""
                            INSERT INTO {table} (symbol, open_time, open, high, low, close, volume, source)
                            VALUES (%s, to_timestamp(%s), %s, %s, %s, %s, %s, 'stream')
                            ON CONFLICT (symbol, open_time) DO NOTHING
                            """,
                            (symbol, open_time, o, h, l, c, v)
                        )
                        status = cur.statusmessage

                log.debug(f"–í—Å—Ç–∞–≤–∫–∞ {symbol} {interval} @ {open_time}: {status}")

                # –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∞
                if status == "INSERT 0 1":
                    try:
                        await redis.xadd("bb:pg_candle_inserted", {
                            "symbol": symbol,
                            "interval": interval,
                            "timestamp": data["timestamp"]
                        })
                    except Exception as e:
                        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å xadd –≤ bb:pg_candle_inserted: {e}")

            except Exception as e:
                log.exception(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ PG –¥–ª—è {symbol}: {e}")

    while True:
        try:
            response = await redis.xread({stream_key: last_id}, count=10, block=5000)
            if not response:
                continue

            for _stream, messages in response:
                last_id = messages[-1][0]
                tasks = [process_message(data) for _, data in messages]
                await asyncio.gather(*tasks)

        except Exception as e:
            log.error(f"BB_CORE_IO –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await asyncio.sleep(2)