# bb_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ feed_bb (Bybit): –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, PG/Redis –∫–ª–∏–µ–Ω—Ç—ã, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import os
import logging
import asyncio
import psycopg  # psycopg3
from psycopg_pool import AsyncConnectionPool
import redis.asyncio as aioredis

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç v4)
BB_DATABASE_URL = os.getenv("BB_DATABASE_URL")
BB_REDIS_URL = os.getenv("BB_REDIS_URL")
BB_DEBUG = os.getenv("BB_DEBUG", "false").lower() == "true"

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ø—É–ª 10..30, async psycopg)
async def init_pg_pool() -> AsyncConnectionPool:
    # –ø—Ä–∏–º–µ—Ä BB_DATABASE_URL: postgres://user:pass@host:5432/dbname
    pool = AsyncConnectionPool(
        conninfo=BB_DATABASE_URL,
        min_size=10,
        max_size=30,
        kwargs={"autocommit": False}  # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
    )
    # –ø—Ä–æ–≥—Ä–µ—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async with pool.connection() as _:
        pass
    return pool

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
def init_redis_client() -> aioredis.Redis:
    return aioredis.from_url(
        BB_REDIS_URL,
        decode_responses=True,
        encoding="utf-8"
    )

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    log = logging.getLogger(name)
    while True:
        try:
            log.info("–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞")
            await coro_fn()
        except asyncio.CancelledError:
            log.info("–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            log.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(retry_delay)

# üî∏ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    level = logging.DEBUG if BB_DEBUG else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )