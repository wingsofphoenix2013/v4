# bb_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ feed_bb (Bybit): –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, PG/Redis –∫–ª–∏–µ–Ω—Ç—ã, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import os
import logging
import asyncio
import psycopg
from psycopg_pool import AsyncConnectionPool
import redis.asyncio as aioredis

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_URL = os.getenv("REDIS_URL")
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ø—É–ª 10..30, —è–≤–Ω–æ–µ open)
async def init_pg_pool() -> AsyncConnectionPool:
    if not DATABASE_URL:
        raise RuntimeError("DATABASE_URL not set")
    pool = AsyncConnectionPool(
        conninfo=DATABASE_URL,
        min_size=10,
        max_size=30,
        open=False,
        kwargs={"autocommit": False}
    )
    await pool.open()
    async with pool.connection() as _:
        pass
    return pool

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
def init_redis_client() -> aioredis.Redis:
    if not REDIS_URL:
        raise RuntimeError("REDIS_URL not set")
    return aioredis.from_url(
        REDIS_URL,
        decode_responses=True,
        encoding="utf-8"
    )

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    log = logging.getLogger(name)
    while True:
        try:
            log.debug("–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞")
            await coro_fn()
        except asyncio.CancelledError:
            log.debug("–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            log.debug(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(retry_delay)

# üî∏ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )