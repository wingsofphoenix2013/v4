# bb_feed_auditor.py ‚Äî –∞—É–¥–∏—Ç bb:pg_candle_inserted (idle): —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import asyncio
import logging

log = logging.getLogger("BB_FEED_AUDITOR")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (idle)
async def run_feed_auditor_bb(pg_pool, redis):
    group = "bb_auditor_group"
    stream = "bb:pg_candle_inserted"

    try:
        await redis.xgroup_create(stream, group, id='0', mkstream=True)
    except Exception:
        pass

    consumer = "bb_auditor"
    log.info("BB_FEED_AUDITOR –∑–∞–ø—É—â–µ–Ω (idle): —Å–ª—É—à–∞—é bb:pg_candle_inserted")

    while True:
        try:
            resp = await redis.xreadgroup(group, consumer, streams={stream: ">"}, count=10, block=5000)
            if not resp:
                log.debug("BB_FEED_AUDITOR: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (idle)")
                continue

            for _stream, messages in resp:
                log.info(f"BB_FEED_AUDITOR: –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (idle)")
                # idle-—Ä–µ–∂–∏–º: –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ ack
                ids = [msg_id for msg_id, _ in messages]
                if ids:
                    await redis.xack(stream, group, *ids)

        except Exception as e:
            log.error(f"BB_FEED_AUDITOR –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await asyncio.sleep(2)