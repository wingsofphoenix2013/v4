# feed_bb_main.py ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –º–æ–¥—É–ª—å feed_bb: –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤, 90—Å –ø–∞—É–∑–∞ –¥–ª—è –∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –∏ markprice

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import os
import asyncio
import logging

from bb_infra import setup_logging, init_pg_pool, init_redis_client, run_safe_loop
from bb_stream_maintenance import run_stream_maintenance_bb
from bb_core_io import run_core_io_bb
from bb_feed_auditor import run_feed_auditor_bb
from bb_feed_ts_filler import run_feed_ts_filler_bb
from bb_feed_healer import run_feed_healer_bb
from bb_tickers_precision_updater import run_tickers_precision_updater_bb
from bb_feed_and_aggregate import (
    run_feed_and_aggregator_m5_bb,
    run_feed_and_aggregator_m15_bb,
    run_feed_and_aggregator_h1_bb,
)
from bb_markprice_watcher import run_markprice_watcher_bb
from feed_cleaner import run_feed_cleaner_bb

log = logging.getLogger("FEED_BB_MAIN")

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    setup_logging()

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    pg_pool = await init_pg_pool()
    redis = init_redis_client()
    log.info("PG/Redis –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (feed_bb)")

    # üî∏ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º WS-–≤–æ—Ä–∫–µ—Ä–æ–≤ (–∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã + markprice)
    aggr_delay_sec = int(os.getenv("BB_AGGR_START_DELAY_SEC", "90"))

    async def delayed_ws_workers():
        if aggr_delay_sec > 0:
            log.info(f"‚è∏ –ü–∞—É–∑–∞ {aggr_delay_sec}s –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –∏ markprice (bb)")
            await asyncio.sleep(aggr_delay_sec)
        await asyncio.gather(
            run_safe_loop(lambda: run_feed_and_aggregator_m5_bb(pg_pool, redis),  "BB_FEED_AGGR:M5"),
            run_safe_loop(lambda: run_feed_and_aggregator_m15_bb(pg_pool, redis), "BB_FEED_AGGR:M15"),
            run_safe_loop(lambda: run_feed_and_aggregator_h1_bb(pg_pool, redis),  "BB_FEED_AGGR:H1"),
            run_safe_loop(lambda: run_markprice_watcher_bb(pg_pool, redis),       "BB_MARKPRICE"),
        )

    # üî∏ –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å—Ä–∞–∑—É (—Å–µ—Ä–≤–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–∂–∏–≤—ã–º¬ª)
    await asyncio.gather(
        run_safe_loop(lambda: run_stream_maintenance_bb(redis),            "BB_STREAM_MAINT"),
        run_safe_loop(lambda: run_core_io_bb(pg_pool, redis),              "BB_CORE_IO"),
        run_safe_loop(lambda: run_feed_auditor_bb(pg_pool, redis),         "BB_FEED_AUDITOR"),
        run_safe_loop(lambda: run_feed_ts_filler_bb(pg_pool, redis),       "BB_TS_FILLER"),
        run_safe_loop(lambda: run_feed_healer_bb(pg_pool, redis),          "BB_FEED_HEALER"),
        run_safe_loop(lambda: run_tickers_precision_updater_bb(pg_pool),   "BB_PRECISION_UPDATER"),
        run_safe_loop(lambda: run_feed_cleaner_bb(pg_pool, redis),         "BB_FEED_CLEANER"),
        delayed_ws_workers(),  # –∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏ markprice —Å—Ç–∞—Ä—Ç—É—é—Ç —Å–ø—É—Å—Ç—è –∑–∞–¥–µ—Ä–∂–∫—É
    )

if __name__ == "__main__":
    asyncio.run(main())