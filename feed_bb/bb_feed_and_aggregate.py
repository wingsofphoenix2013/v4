# bb_feed_and_aggregate.py ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ç–∏–∫–µ—Ä–æ–≤ (dry), –±–µ–∑ WebSocket

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import os
import asyncio
import logging
from itertools import islice

log = logging.getLogger("BB_FEED_AGGR")
GROUP_SIZE = int(os.getenv("BB_WS_GROUP_SIZE", "1"))

# üî∏ –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –≥—Ä—É–ø–ø—ã
def chunked(iterable, size):
    it = iter(iterable)
    while chunk := list(islice(it, size)):
        yield chunk

# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä (dry)
async def run_feed_and_aggregator_bb(pg_pool, redis):
    log.info(f"BB_FEED_AGGR (dry) –∑–∞–ø—É—â–µ–Ω, GROUP_SIZE={GROUP_SIZE}")

    while True:
        try:
            async with pg_pool.connection() as conn:
                rows = await conn.execute(
                    "SELECT symbol FROM tickers_bb WHERE status = 'enabled' AND is_active = true ORDER BY symbol"
                )
                # psycopg3 execute() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Cursor; –∑–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏:
                syms = [r[0] for r in await rows.fetchall()] if hasattr(rows, "fetchall") else []
        except Exception as e:
            log.error(f"BB_FEED_AGGR: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}", exc_info=True)
            syms = []

        if not syms:
            log.info("BB_FEED_AGGR: –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ—Ç")
        else:
            groups = list(chunked(syms, GROUP_SIZE))
            log.info(f"BB_FEED_AGGR: –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(syms)}, –≥—Ä—É–ø–ø={len(groups)} ‚Üí {groups}")

        await asyncio.sleep(10)