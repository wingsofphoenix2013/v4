import os
import logging
import asyncio
import asyncpg
import redis.asyncio as aioredis
from decimal import Decimal

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("CRON_TREASURY")

pg_pool = None
redis_client = None


# üî∏ PostgreSQL
async def setup_pg():
    global pg_pool
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")
    pg_pool = await asyncpg.create_pool(db_url)
    await pg_pool.execute("SELECT 1")
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ Redis
async def setup_redis_client():
    global redis_client
    host = os.getenv("REDIS_HOST", "localhost")
    port = int(os.getenv("REDIS_PORT", 6379))
    password = os.getenv("REDIS_PASSWORD")
    use_tls = os.getenv("REDIS_USE_TLS", "false").lower() == "true"
    protocol = "rediss" if use_tls else "redis"
    redis_url = f"{protocol}://{host}:{port}"

    client = aioredis.from_url(redis_url, password=password, decode_responses=True)
    await client.ping()
    redis_client = client
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∑–Ω–∞—á–µ–π—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
async def run():
    async with pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT s.id, s.deposit, s.max_risk, s.position_limit,
                   t.strategy_deposit, t.pnl_operational, t.pnl_insurance
            FROM strategies_v4 s
            JOIN strategies_treasury_v4 t ON s.id = t.strategy_id
            WHERE s.enabled = true AND s.auditor_enabled = true
        """)

        total = len(rows)
        if total == 0:
            log.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
            return

        log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {total} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        for r in rows:
            sid = r["id"]
            deposit = Decimal(r["deposit"])
            max_risk = Decimal(r["max_risk"])
            strategy_deposit = Decimal(r["strategy_deposit"])
            op = Decimal(r["pnl_operational"])
            ins = Decimal(r["pnl_insurance"])

            log.info(f"üßæ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {sid}")
            log.info(f"  ‚û§ deposit: {deposit}, strategy_deposit: {strategy_deposit}")
            log.info(f"  ‚û§ pnl_operational: {op}, pnl_insurance: {ins}")
            log.info(f"  ‚û§ max_risk: {max_risk}%")

            threshold = (strategy_deposit * Decimal("0.01")).quantize(Decimal("0.01"))
            log.info(f"  ‚û§ 1% –æ—Ç strategy_deposit: {threshold}")

            if op >= threshold:
                amount = (threshold // Decimal("10")) * Decimal("10")
                new_deposit = deposit + amount
                new_limit = int(new_deposit // Decimal("10"))
                log.info(f"  ‚Üí —Å—Ü–µ–Ω–∞—Ä–∏–π 1: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount} –∏–∑ –∫–∞—Å—Å—ã –≤ –¥–µ–ø–æ–∑–∏—Ç ‚Üí –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç: {new_deposit}, –ª–∏–º–∏—Ç: {new_limit}")
                continue

            if op > 0:
                log.info(f"  ‚Üí —Å—Ü–µ–Ω–∞—Ä–∏–π 2: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ {op:.2f}, –Ω—É–∂–Ω–æ ‚â• {threshold:.2f})")
                continue

            if op == 0 and ins < 0:
                loss = abs(ins)
                risk_limit = strategy_deposit * (max_risk / Decimal("100"))
                log.info(f"  ‚û§ —É–±—ã—Ç–æ–∫ –≤ —Ñ–æ–Ω–¥–µ: {loss:.2f}, –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç: {risk_limit:.2f}")
                if loss <= risk_limit:
                    rounded_loss = ((loss + Decimal("9")) // Decimal("10")) * Decimal("10")
                    new_deposit = deposit - rounded_loss
                    new_limit = int(new_deposit // Decimal("10"))
                    log.info(f"  ‚Üí —Å—Ü–µ–Ω–∞—Ä–∏–π 3: —Å–ø–∏—Å–∞–Ω–∏–µ {rounded_loss} –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞, –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç: {new_deposit}, –ª–∏–º–∏—Ç: {new_limit}")
                else:
                    log.info(f"  ‚Üí —Å—Ü–µ–Ω–∞—Ä–∏–π 4: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—É–±—ã—Ç–æ–∫ {loss:.2f} > –ª–∏–º–∏—Ç {risk_limit:.2f})")
            else:
                log.info(f"  ‚Üí –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")


# üî∏ –ó–∞–ø—É—Å–∫
async def main():
    await setup_pg()
    await setup_redis_client()
    await run()


if __name__ == "__main__":
    asyncio.run(main())