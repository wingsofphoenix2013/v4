# signals_v4_main.py ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ v4 + live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ applied

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
import infra
from time import perf_counter

from infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    ENABLED_TICKERS,
    ENABLED_SIGNALS,
    ENABLED_STRATEGIES,
)

from processor import process_signal
from core_io import run_core_io

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–æ–≤/CG
STRATEGY_STATE_STREAM = "strategy_state_stream"   # —Å—é–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç action="applied" –ø–æ—Å–ª–µ reload_strategy()
STATE_CG = "signal_strategy_state_cg"
STATE_CONSUMER = "state-worker-1"

SIGNAL_STREAM = "signals_stream"
SIGNAL_CG = "signal_processor"
SIGNAL_CONSUMER = "worker-1"

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("SIGNALS_COORDINATOR")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
async def run_safe_loop(coro_factory, name: str):
    logger = logging.getLogger(name)
    while True:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {name}")
            await coro_factory()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {name}: {e}")
        await asyncio.sleep(1)


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
async def load_enabled_tickers():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_TICKERS.clear()
    async with infra.PG_POOL.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT symbol
            FROM tickers_bb
            WHERE status = 'enabled' AND tradepermission = 'enabled'
            """
        )
        for row in rows:
            ENABLED_TICKERS[row["symbol"]] = True
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_TICKERS)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î
async def load_enabled_signals():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_SIGNALS.clear()
    async with infra.PG_POOL.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT id, long_phrase, short_phrase
            FROM signals_v4
            WHERE enabled = true
            """
        )
        for row in rows:
            ENABLED_SIGNALS[row["id"]] = {
                "long": row["long_phrase"],
                "short": row["short_phrase"],
            }
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_SIGNALS)} —Å–∏–≥–Ω–∞–ª–æ–≤")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –ë–î
async def load_enabled_strategies():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_STRATEGIES.clear()
    async with infra.PG_POOL.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT id, signal_id, allow_open, reverse
            FROM strategies_v4
            WHERE enabled = true AND archived = false
            """
        )
        for row in rows:
            ENABLED_STRATEGIES[row["id"]] = {
                "signal_id": row["signal_id"],
                "allow_open": row["allow_open"],
                "reverse": row["reverse"],
            }
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_STRATEGIES)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
async def load_initial_state():
    log = logging.getLogger("STATE_LOADER")
    log.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    await load_enabled_tickers()
    await load_enabled_signals()
    await load_enabled_strategies()


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ sid)
async def reload_strategy_into_cache(strategy_id: int):
    log = logging.getLogger("STATE_LOADER")
    async with infra.PG_POOL.acquire() as conn:
        row = await conn.fetchrow(
            """
            SELECT id, signal_id, allow_open, reverse
            FROM strategies_v4
            WHERE id = $1 AND enabled = true AND archived = false
            """,
            strategy_id,
        )

    # –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å; –∏–Ω–∞—á–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–µ—à–∞
    if row:
        ENABLED_STRATEGIES[row["id"]] = {
            "signal_id": row["signal_id"],
            "allow_open": row["allow_open"],
            "reverse": row["reverse"],
        }
        log.info("–ö–µ—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω: id=%s (signal_id=%s, allow_open=%s, reverse=%s)",
                 row["id"], row["signal_id"], row["allow_open"], row["reverse"])
    else:
        if strategy_id in ENABLED_STRATEGIES:
            ENABLED_STRATEGIES.pop(strategy_id, None)
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–µ—à–∞: id=%s", strategy_id)
        else:
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ / –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: id=%s (–∫–µ—à –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)", strategy_id)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ä–∞ (Pub/Sub)
async def handle_ticker_event(data: dict):
    log = logging.getLogger("PUBSUB_WATCHER")
    symbol = data.get("symbol")
    action = data.get("action")

    if not symbol or action not in {"enabled", "disabled"}:
        log.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–∫–µ—Ä–∞: {data}")
        return

    if action == "enabled":
        async with infra.PG_POOL.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT symbol
                FROM tickers_bb
                WHERE symbol = $1 AND status = 'enabled' AND tradepermission = 'enabled'
                """,
                symbol,
            )
            if row:
                ENABLED_TICKERS[symbol] = True
                log.info("–¢–∏–∫–µ—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ ENABLED_TICKERS", symbol)
            else:
                log.warning("–¢–∏–∫–µ—Ä %s –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä enabled/tradepermission", symbol)
    else:
        if symbol in ENABLED_TICKERS:
            ENABLED_TICKERS.pop(symbol, None)
            log.info("–¢–∏–∫–µ—Ä %s —É–¥–∞–ª—ë–Ω –∏–∑ ENABLED_TICKERS", symbol)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ (Pub/Sub)
async def handle_signal_event(data: dict):
    log = logging.getLogger("PUBSUB_WATCHER")
    signal_id = data.get("id")
    action = data.get("action")

    if not signal_id or action not in {"true", "false"}:
        log.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {data}")
        return

    if action == "true":
        async with infra.PG_POOL.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT id, long_phrase, short_phrase
                FROM signals_v4
                WHERE id = $1 AND enabled = true
                """,
                signal_id,
            )
            if row:
                ENABLED_SIGNALS[row["id"]] = {
                    "long": row["long_phrase"],
                    "short": row["short_phrase"],
                }
                log.info("–°–∏–≥–Ω–∞–ª %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ ENABLED_SIGNALS", row["id"])
            else:
                log.warning("–°–∏–≥–Ω–∞–ª %s –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä enabled", signal_id)
    else:
        if signal_id in ENABLED_SIGNALS:
            ENABLED_SIGNALS.pop(signal_id, None)
            log.info("–°–∏–≥–Ω–∞–ª %s —É–¥–∞–ª—ë–Ω –∏–∑ ENABLED_SIGNALS", signal_id)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Pub/Sub)
async def handle_strategy_event(data: dict):
    log = logging.getLogger("PUBSUB_WATCHER")
    strategy_id = data.get("id")
    action = data.get("action")

    if not strategy_id or action not in {"true", "false"}:
        log.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {data}")
        return

    if action == "true":
        await reload_strategy_into_cache(int(strategy_id))
    else:
        if strategy_id in ENABLED_STRATEGIES:
            ENABLED_STRATEGIES.pop(strategy_id, None)
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è %s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ ENABLED_STRATEGIES", strategy_id)


# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Pub/Sub –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def subscribe_and_watch_pubsub():
    log = logging.getLogger("PUBSUB_WATCHER")
    pubsub = infra.REDIS.pubsub()
    await pubsub.subscribe("tickers_bb_events", "signals_v4_events", "strategies_v4_events")
    log.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Pub/Sub –∞–∫—Ç–∏–≤–Ω–∞")

    async for message in pubsub.listen():
        if message["type"] != "message":
            continue
        try:
            data = json.loads(message["data"])
            channel = message["channel"]

            if channel == "tickers_bb_events":
                await handle_ticker_event(data)
            elif channel == "signals_v4_events":
                await handle_signal_event(data)
            elif channel == "strategies_v4_events":
                await handle_strategy_event(data)
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Pub/Sub —Å–æ–±—ã—Ç–∏—è: {e}")


# üî∏ –ß—Ç–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π applied –∏–∑ strategy_state_stream (–¥–≤—É—Ö—Ñ–∞–∑–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª)
async def read_strategy_state_stream():
    log = logging.getLogger("STRATEGY_STATE_READER")
    redis = infra.REDIS

    try:
        await redis.xgroup_create(STRATEGY_STATE_STREAM, STATE_CG, id="$", mkstream=True)
        log.info("–ì—Ä—É–ø–ø–∞ %s —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è %s", STATE_CG, STRATEGY_STATE_STREAM)
    except Exception:
        # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=STATE_CG,
                consumername=STATE_CONSUMER,
                streams={STRATEGY_STATE_STREAM: ">"},
                count=200,
                block=1000,  # –º—Å
            )
            if not entries:
                continue

            for _, records in entries:
                for entry_id, data in records:
                    try:
                        # data: {'type': 'strategy', 'action': 'applied', 'id': '<sid>'}
                        if data.get("type") == "strategy" and data.get("action") == "applied":
                            sid_raw = data.get("id")
                            sid = int(sid_raw) if sid_raw is not None else None
                            if sid is not None:
                                await reload_strategy_into_cache(sid)
                        await redis.xack(STRATEGY_STATE_STREAM, STATE_CG, entry_id)
                    except Exception:
                        log.exception("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ state/applied (id=%s)", entry_id)
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ state-stream: %s", e)
            await asyncio.sleep(1)


# üî∏ –ß—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis Stream –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
async def read_and_process_signals():
    log = logging.getLogger("SIGNAL_STREAM_READER")
    redis = infra.REDIS

    try:
        await redis.xgroup_create(SIGNAL_STREAM, SIGNAL_CG, id="$", mkstream=True)
        log.info("–ì—Ä—É–ø–ø–∞ %s —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è %s", SIGNAL_CG, SIGNAL_STREAM)
    except Exception:
        # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

    while True:
        try:
            messages = await redis.xreadgroup(
                groupname=SIGNAL_CG,
                consumername=SIGNAL_CONSUMER,
                streams={SIGNAL_STREAM: ">"},
                count=100,
                block=500,  # –º—Å
            )
            if messages:
                for _, entries in messages:
                    for entry in entries:
                        log.debug("–í—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª: %s", dict(entry[1]))
                    await asyncio.gather(*[process_signal(dict(entry[1])) for entry in entries])
                    for entry_id, _ in entries:
                        await redis.xack(SIGNAL_STREAM, SIGNAL_CG, entry_id)
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Stream: %s", e)
            await asyncio.sleep(1)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    setup_logging()
    print("signals_v4: —Å—Ç–∞—Ä—Ç main()")
    import sys
    sys.stdout.flush()

    log = logging.getLogger("SIGNALS_COORDINATOR")

    try:
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ Redis
        t0 = perf_counter()
        await init_pg_pool()
        await init_redis_client()
        t1 = perf_counter()
        log.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis –∏ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ %.2f —Å–µ–∫", t1 - t0)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        try:
            pong = await infra.REDIS.ping()
            log.info("Redis –æ—Ç–≤–µ—Ç–∏–ª: %s", pong)
        except Exception as e:
            log.warning("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", e)

        try:
            async with infra.PG_POOL.acquire() as conn:
                await conn.execute("SELECT 1")
            log.info("PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        except Exception as e:
            log.warning("PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", e)

        # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        t2 = perf_counter()
        await load_initial_state()
        t3 = perf_counter()
        log.info("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ %.2f —Å–µ–∫", t3 - t2)

        # –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await asyncio.gather(
            run_safe_loop(subscribe_and_watch_pubsub, "PUBSUB_WATCHER"),
            run_safe_loop(read_strategy_state_stream, "STRATEGY_STATE_READER"),
            run_safe_loop(read_and_process_signals, "SIGNAL_STREAM_READER"),
            run_safe_loop(run_core_io, "CORE_IO"),
        )

    except Exception as fatal:
        log.exception("FATAL: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ main(): %s", fatal)
        await asyncio.sleep(5)


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())