import asyncio
import logging

from infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    PG_POOL,
    ENABLED_TICKERS,
    ENABLED_SIGNALS,
    ENABLED_STRATEGIES
)

log = logging.getLogger("SIGNALS_COORDINATOR")

# üî∏ –û–±—ë—Ä—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
async def run_safe_loop(coro_factory, name: str):
    logger = logging.getLogger(name)
    while True:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {name}")
            await coro_factory()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {name}: {e}")
        await asyncio.sleep(1)
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
async def load_enabled_tickers():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_TICKERS.clear()
    async with PG_POOL.acquire() as conn:
        rows = await conn.fetch("""
            SELECT symbol
            FROM tickers_v4
            WHERE status = 'enabled' AND tradepermission = 'enabled'
        """)
        ENABLED_TICKERS.update(row["symbol"] for row in rows)
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_TICKERS)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î
async def load_enabled_signals():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_SIGNALS.clear()
    async with PG_POOL.acquire() as conn:
        rows = await conn.fetch("""
            SELECT id, long_phrase, short_phrase
            FROM signals_v4
            WHERE enabled = true
        """)
        for row in rows:
            ENABLED_SIGNALS[row["id"]] = {
                "long": row["long_phrase"],
                "short": row["short_phrase"]
            }
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_SIGNALS)} —Å–∏–≥–Ω–∞–ª–æ–≤")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –ë–î
async def load_enabled_strategies():
    log = logging.getLogger("STATE_LOADER")
    ENABLED_STRATEGIES.clear()
    async with PG_POOL.acquire() as conn:
        rows = await conn.fetch("""
            SELECT id, signal_id, allow_open, reverse
            FROM strategies_v4
            WHERE enabled = true AND archived = false
        """)
        for row in rows:
            ENABLED_STRATEGIES[row["id"]] = {
                "signal_id": row["signal_id"],
                "allow_open": row["allow_open"],
                "reverse": row["reverse"]
            }
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ENABLED_STRATEGIES)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
async def load_initial_state():
    log = logging.getLogger("STATE_LOADER")
    log.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")

    await load_enabled_tickers()
    await load_enabled_signals()
    await load_enabled_strategies()

    # –ó–∞–≥–ª—É—à–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
    await asyncio.sleep(999999)

# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Pub/Sub –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def subscribe_and_watch_pubsub():
    log = logging.getLogger("PUBSUB_WATCHER")
    log.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Pub/Sub...")
    await asyncio.sleep(999999)

# üî∏ –ß—Ç–µ–Ω–∏–µ –∏–∑ Redis Stream
async def read_and_process_signals():
    log = logging.getLogger("SIGNAL_STREAM_READER")
    log.info("–ß—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis Stream...")
    await asyncio.sleep(999999)
     
# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    setup_logging()
    log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signals_v4")

    await init_pg_pool()
    await init_redis_client()
    log.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis –∏ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    await load_initial_state()

    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await asyncio.gather(
        run_safe_loop(subscribe_and_watch_pubsub, "PUBSUB_WATCHER"),
        run_safe_loop(read_and_process_signals, "SIGNAL_STREAM_READER")
    )

if __name__ == "__main__":
    asyncio.run(main())