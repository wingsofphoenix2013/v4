import asyncio
import logging

from infra import setup_logging, init_pg_pool, init_redis_client

log = logging.getLogger("SIGNALS_COORDINATOR")

# üî∏ –û–±—ë—Ä—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
async def run_safe_loop(coro_factory, name: str):
    logger = logging.getLogger(name)
    while True:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {name}")
            await coro_factory()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {name}: {e}")
        await asyncio.sleep(1)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    setup_logging()
    log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signals_v4")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    await init_pg_pool()
    await init_redis_client()
    log.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis –∏ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    await asyncio.gather(
        run_safe_loop(load_initial_state, "STATE_LOADER"),
        run_safe_loop(subscribe_and_watch_pubsub, "PUBSUB_WATCHER"),
        run_safe_loop(read_and_process_signals, "SIGNAL_STREAM_READER")
    )

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
async def load_initial_state():
    log = logging.getLogger("STATE_LOADER")
    log.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    await asyncio.sleep(999999)  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞

# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Pub/Sub –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def subscribe_and_watch_pubsub():
    log = logging.getLogger("PUBSUB_WATCHER")
    log.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Pub/Sub...")
    await asyncio.sleep(999999)

# üî∏ –ß—Ç–µ–Ω–∏–µ –∏–∑ Redis Stream
async def read_and_process_signals():
    log = logging.getLogger("SIGNAL_STREAM_READER")
    log.info("–ß—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis Stream...")
    await asyncio.sleep(999999)

if __name__ == "__main__":
    asyncio.run(main())