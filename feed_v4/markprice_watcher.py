# markprice_watcher.py ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ mark price
import asyncio
import json
import logging
import time
from decimal import Decimal, ROUND_DOWN, InvalidOperation
import websockets

log = logging.getLogger("MARKPRICE")

# üî∏ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ mark price –ø–æ –æ–¥–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É
async def watch_mark_price(symbol, redis, state):
    url = f"wss://fstream.binance.com/ws/{symbol.lower()}@markPrice@1s"
    last_update = 0

    while True:
        try:
            async with websockets.connect(
                url,
                ping_interval=None,  # –æ—Ç–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ ping/pong
                close_timeout=5
            ) as ws:
                log.info(f"[{symbol}] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–æ—Ç–æ–∫—É markPrice")

                # üîÅ –Ø–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ pong
                async def keep_alive():
                    try:
                        while True:
                            await ws.pong()
                            log.debug(f"[{symbol}] ‚Üí pong (keepalive)")
                            await asyncio.sleep(180)
                    except asyncio.CancelledError:
                        log.debug(f"[{symbol}] keep_alive –∑–∞–≤–µ—Ä—à—ë–Ω")
                    except Exception as e:
                        log.warning(f"[{symbol}] –û—à–∏–±–∫–∞ keep_alive: {e}")

                pong_task = asyncio.create_task(keep_alive())

                try:
                    async for msg in ws:
                        if symbol not in state["active"]:
                            log.info(f"[{symbol}] –ü–æ—Ç–æ–∫ markPrice –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Ç–∏–∫–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            return

                        try:
                            data = json.loads(msg)
                            price = data.get("p")
                            if not price:
                                continue

                            now = time.time()
                            if now - last_update < 1:
                                continue
                            last_update = now

                            precision = state["tickers"][symbol]["precision_price"]
                            rounded = str(Decimal(price).quantize(Decimal(f"1e-{precision}"), rounding=ROUND_DOWN))

                            await redis.set(f"price:{symbol}", rounded)
                            log.debug(f"[{symbol}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ markPrice: {rounded}")

                        except (InvalidOperation, ValueError, TypeError) as e:
                            log.warning(f"[{symbol}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markPrice: {type(e)}")
                finally:
                    pong_task.cancel()

        except Exception as e:
            log.error(f"[{symbol}] –û—à–∏–±–∫–∞ WebSocket markPrice: {e}", exc_info=True)
            log.info(f"[{symbol}] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# üî∏ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö mark price –ø–æ—Ç–æ–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ä–∞–º
async def run_markprice_watcher(state, redis):
    log.info("–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è mark price –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    async def spawn_for(symbol):
        task = asyncio.create_task(watch_mark_price(symbol, redis, state))
        state["markprice_tasks"][symbol] = task

    while True:
        active_symbols = set(state["active"])
        known_symbols = set(state["markprice_tasks"].keys())

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ
        for symbol in active_symbols - known_symbols:
            await spawn_for(symbol)

        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
        for symbol in known_symbols - active_symbols:
            task = state["markprice_tasks"].pop(symbol, None)
            if task:
                task.cancel()
                log.info(f"[{symbol}] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫ markPrice ‚Äî —Ç–∏–∫–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        await asyncio.sleep(3)
