# core_io.py ‚Äî –∑–∞–ø–∏—Å—å OHLCV-—Å–≤–µ—á–µ–π –∏–∑ Redis Stream –≤ PostgreSQL —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 14 –¥–Ω–µ–π

import asyncio
import json
import logging
from infra import info_log
from datetime import datetime, timedelta

STREAM_NAME = "ohlcv_stream"
GROUP_NAME = "core_writer"
CONSUMER_NAME = "writer_1"

# üîÅ –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è M5-—Å–≤–µ—á–µ–π
async def m5_integrity_loop(pg):
    while True:
        now = datetime.utcnow().replace(second=0, microsecond=0)
        latest_check_time = now - timedelta(minutes=5)
        earliest_check_time = now - timedelta(minutes=15)

        info_log("CORE_IO", f"üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö M5: {earliest_check_time} ‚Üí {latest_check_time}")

        async with pg.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å M5
            rows = await conn.fetch("SELECT DISTINCT symbol FROM ohlcv4_m5")
            symbols = [r["symbol"] for r in rows]

        for symbol in symbols:
            ts = earliest_check_time
            while ts <= latest_check_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è M5
                async with pg.acquire() as conn:
                    exists = await conn.fetchval(
                        "SELECT 1 FROM ohlcv4_m5 WHERE symbol = $1 AND open_time = $2",
                        symbol, ts
                    )
                    if exists:
                        ts += timedelta(minutes=5)
                        continue

                    # –°–æ–±–∏—Ä–∞–µ–º 5 M1-—Å–≤–µ—á–µ–π
                    m1_rows = await conn.fetch("""
                        SELECT open, high, low, close, volume FROM ohlcv4_m1
                        WHERE symbol = $1 AND open_time >= $2 AND open_time < $3
                        ORDER BY open_time ASC
                    """, symbol, ts, ts + timedelta(minutes=5))

                    if len(m1_rows) < 5:
                        info_log("CORE_IO", f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ M1 –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è M5: {symbol} @ {ts}")
                        ts += timedelta(minutes=5)
                        continue

                    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º
                    o = m1_rows[0]["open"]
                    h = max(r["high"] for r in m1_rows)
                    l = min(r["low"] for r in m1_rows)
                    c = m1_rows[-1]["close"]
                    v = sum(r["volume"] for r in m1_rows)

                    await conn.execute("""
                        INSERT INTO ohlcv4_m5 (symbol, open_time, open, high, low, close, volume, source, inserted_at)
                        VALUES ($1, $2, $3, $4, $5, $6, $7, 'recovery', NOW())
                        ON CONFLICT DO NOTHING
                    """, symbol, ts, o, h, l, c, v)

                    info_log("CORE_IO", f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ M5: {symbol} @ {ts}")

                ts += timedelta(minutes=5)

        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
# ‚ñ∂ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—á–µ–π
async def run_core_writer(pg, redis):
    info_log("CORE_IO", "‚ñ∂ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ core_writer")

    try:
        await redis.xgroup_create(STREAM_NAME, GROUP_NAME, id="0", mkstream=True)
    except Exception:
        pass  # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # ‚ñ∂ –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è M5
    asyncio.create_task(m5_integrity_loop(pg))

    while True:
        try:
            messages = await redis.xreadgroup(
                GROUP_NAME,
                CONSUMER_NAME,
                streams={STREAM_NAME: ">"},
                count=50,
                block=1000,
            )

            for _, entries in messages:
                for msg_id, data in entries:
                    try:
                        symbol = data.get("symbol")
                        interval = data.get("interval")
                        timestamp = int(data.get("timestamp"))

                        if not all([symbol, interval, timestamp]):
                            info_log("CORE_IO", f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                            await redis.xack(STREAM_NAME, GROUP_NAME, msg_id)
                            continue

                        key = f"ohlcv:{symbol.lower()}:{interval}:{timestamp}"
                        raw = await redis.execute_command("JSON.GET", key, "$")
                        if not raw:
                            info_log("CORE_IO", f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ Redis: {key}")
                            await redis.xack(STREAM_NAME, GROUP_NAME, msg_id)
                            continue

                        candle = json.loads(raw)[0]
                        await insert_candle(pg, symbol, interval, timestamp, candle)

                        info_log("CORE_IO", f"‚úÖ [{symbol}] {interval.upper()} –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ PG: {timestamp}")
                        await redis.xack(STREAM_NAME, GROUP_NAME, msg_id)

                    except Exception as e:
                        info_log("CORE_IO", f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")

        except Exception as e:
            info_log("CORE_IO", f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞: {e}")
            await asyncio.sleep(3)
# –í—Å—Ç–∞–≤–∫–∞ —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É + —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö (> 14 –¥–Ω–µ–π)
async def insert_candle(pg, symbol, interval, ts, candle):
    open_time = datetime.utcfromtimestamp(ts / 1000)
    table = f"ohlcv4_{interval}"

    async with pg.acquire() as conn:
        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
        await conn.execute(f"""
            INSERT INTO {table} (symbol, open_time, open, high, low, close, volume, source, inserted_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())
            ON CONFLICT DO NOTHING
        """, symbol, open_time, candle["o"], candle["h"], candle["l"], candle["c"],
             candle["v"], candle.get("fixed") and "api" or "stream")

        # –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
        await conn.execute(f"""
            DELETE FROM {table}
            WHERE symbol = $1 AND open_time < NOW() - INTERVAL '14 days'
        """, symbol)