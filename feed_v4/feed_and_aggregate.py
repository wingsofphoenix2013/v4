# feed_and_aggregate.py ‚Äî –ø—Ä–∏—ë–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ M1 –∏ M5 —Å–≤–µ—á–µ–π —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
import asyncio
import logging
import time
import json
from asyncpg import Pool
from redis.asyncio import Redis
from datetime import datetime
from websockets import connect
from itertools import islice

log = logging.getLogger("FEED+AGGREGATOR")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
async def load_all_tickers(pg: Pool):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT symbol, precision_price, precision_qty, status FROM tickers_v4")

    now = time.time()
    tickers = {}
    active = set()
    activated_at = {}

    for row in rows:
        symbol = row["symbol"]
        tickers[symbol] = {
            "precision_price": row["precision_price"],
            "precision_qty": row["precision_qty"]
        }

        if row["status"] == "enabled":
            active.add(symbol)
            activated_at[symbol] = now
            log.info(f"[{symbol}] –ê–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî activated_at={datetime.utcfromtimestamp(now).isoformat()}Z")
        else:
            log.info(f"[{symbol}] –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    return tickers, active, activated_at

# üî∏ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Redis Stream
async def handle_ticker_events(redis: Redis, state: dict, pg: Pool, refresh_queue: asyncio.Queue):
    group = "aggregator_group"
    stream = "tickers_status_stream"

    try:
        await redis.xgroup_create(stream, group, id='0', mkstream=True)
    except Exception:
        pass

    while True:
        resp = await redis.xreadgroup(group, "aggregator", streams={stream: '>'}, count=50, block=1000)
        for _, messages in resp:
            for msg_id, data in messages:
                symbol = data.get("symbol")
                action = data.get("action")

                if not symbol or not action:
                    continue

                if symbol not in state["tickers"]:
                    async with pg.acquire() as conn:
                        row = await conn.fetchrow(
                            "SELECT precision_price, precision_qty FROM tickers_v4 WHERE symbol = $1",
                            symbol
                        )
                        if row:
                            state["tickers"][symbol] = {
                                "precision_price": row["precision_price"],
                                "precision_qty": row["precision_qty"]
                            }
                            log.info(f"[{symbol}] –î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–∫–µ—Ä –∏–∑ –ë–î")

                if action == "enabled" and symbol in state["tickers"]:
                    state["active"].add(symbol)
                    ts = time.time()
                    state["activated_at"][symbol] = ts
                    log.info(f"[{symbol}] –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∏–∫–µ—Ä ‚Äî activated_at={datetime.utcfromtimestamp(ts).isoformat()}Z")
                    await refresh_queue.put("refresh")

                elif action == "disabled" and symbol in state["active"]:
                    state["active"].remove(symbol)
                    log.info(f"[{symbol}] –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∏–∫–µ—Ä")
                    await refresh_queue.put("refresh")

# üî∏ –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
def chunked(iterable, size):
    it = iter(iterable)
    while chunk := list(islice(it, size)):
        yield chunk

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance –ø–æ –≥—Ä—É–ø–ø–µ —Ç–∏–∫–µ—Ä–æ–≤
async def listen_kline_stream(group_key, symbols, queue, interval="1m"):
    stream_names = [f"{s.lower()}@kline_{interval}" for s in symbols]
    stream_url = f"wss://fstream.binance.com/stream?streams={'/'.join(stream_names)}"

    try:
        async with connect(stream_url) as ws:
            log.info(f"[KLINE:{group_key}] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket: {stream_url}")
            async for msg in ws:
                data = json.loads(msg)
                kline = data.get("data", {}).get("k")
                if not kline or not kline.get("x"):
                    continue
                await queue.put(kline)
    except Exception as e:
        log.error(f"[KLINE:{group_key}] –û—à–∏–±–∫–∞ WebSocket: {e}", exc_info=True)

# üî∏ –í–æ—Ä–∫–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π
async def kline_worker(queue, interval="M1"):
    while True:
        kline = await queue.get()
        try:
            symbol = kline["s"]
            open_time = datetime.utcfromtimestamp(kline["t"] / 1000)
            received_time = datetime.utcnow()
            log.info(f"[{interval}] {symbol} @ {open_time.isoformat()} –ø–æ–ª—É—á–µ–Ω–∞ –≤ {received_time.isoformat()}Z")
        except Exception as e:
            log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ kline: {e}", exc_info=True)

# üî∏ M1: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket-–≥—Ä—É–ø–ø–∞–º–∏
async def run_feed_and_aggregator(state, redis: Redis, pg: Pool, refresh_queue: asyncio.Queue):
    log.info("üî∏ –ó–∞–ø—É—Å–∫ –ø—Ä–∏—ë–º–∞ M1 —Å–≤–µ—á–µ–π —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
    queue = asyncio.Queue()
    state["kline_tasks"] = {}

    for _ in range(5):
        asyncio.create_task(kline_worker(queue, interval="M1"))

    await refresh_queue.put("initial")

    while True:
        await refresh_queue.get()
        log.info("üîÅ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≥—Ä—É–ø–ø WebSocket –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")

        active_symbols = sorted(state["active"])
        log.info(f"[M1] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(active_symbols)} ‚Üí {active_symbols}")
        new_groups = {
            ",".join(group): group
            for group in chunked(active_symbols, 3)
        }
        current_groups = set(state["kline_tasks"].keys())
        desired_groups = set(new_groups.keys())

        for group_key in desired_groups - current_groups:
            group_symbols = new_groups[group_key]
            task = asyncio.create_task(listen_kline_stream(group_key, group_symbols, queue, interval="1m"))
            state["kline_tasks"][group_key] = task

        for group_key in current_groups - desired_groups:
            task = state["kline_tasks"].pop(group_key)
            task.cancel()
            log.info(f"[KLINE:{group_key}] –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Ç–∏–∫–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")

# üî∏ M5: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ M5 —Å–≤–µ—á–µ–π
async def run_feed_and_aggregator_m5(state, redis: Redis, pg: Pool, refresh_queue: asyncio.Queue):
    log.info("üî∏ –ó–∞–ø—É—Å–∫ –ø—Ä–∏—ë–º–∞ M5 —Å–≤–µ—á–µ–π")
    queue = asyncio.Queue()
    state["m5_tasks"] = {}

    for _ in range(2):
        asyncio.create_task(kline_worker(queue, interval="M5"))

    await refresh_queue.put("initial-m5")

    while True:
        await refresh_queue.get()
        log.info("üîÅ [M5] –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≥—Ä—É–ø–ø WebSocket")

        active_symbols = sorted(state["active"])
        log.info(f"[M5] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(active_symbols)} ‚Üí {active_symbols}")
        new_groups = {
            ",".join(group): group
            for group in chunked(active_symbols, 3)
        }
        current_groups = set(state["m5_tasks"].keys())
        desired_groups = set(new_groups.keys())

        for group_key in desired_groups - current_groups:
            group_symbols = new_groups[group_key]
            task = asyncio.create_task(listen_kline_stream(group_key, group_symbols, queue, interval="5m"))
            state["m5_tasks"][group_key] = task

        for group_key in current_groups - desired_groups:
            task = state["m5_tasks"].pop(group_key)
            task.cancel()
            log.info(f"[KLINE:M5:{group_key}] –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Ç–∏–∫–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")