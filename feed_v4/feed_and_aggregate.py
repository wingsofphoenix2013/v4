# feed_and_aggregate.py ‚Äî –ø—Ä–∏—ë–º –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

import logging
import asyncio

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏–∑ PostgreSQL
async def load_active_tickers(pg_pool):
    async with pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT symbol, precision_price
            FROM tickers_v4
            WHERE status = 'enabled'
        """)
        return {row['symbol']: row['precision_price'] for row in rows}

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Redis Stream
async def handle_ticker_events(redis, state):
    group = "aggregator_group"
    stream = "tickers_v4_events"
    logger = logging.getLogger("TICKER_STREAM")

    try:
        await redis.xgroup_create(stream, group, id="$", mkstream=True)
    except Exception:
        pass  # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    while True:
        resp = await redis.xreadgroup(group, "aggregator", streams={stream: ">"}, count=10, block=5000)
        for _, messages in resp:
            for msg_id, data in messages:
                symbol = data.get("symbol")
                action = data.get("action")
                if not symbol or not action:
                    continue

                if action == "enabled" and symbol in state["tickers"]:
                    logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∏–∫–µ—Ä: {symbol}")
                    state["active"].add(symbol.lower())

                elif action == "disabled" and symbol in state["tickers"]:
                    logger.info(f"–û—Ç–∫–ª—é—á—ë–Ω —Ç–∏–∫–µ—Ä: {symbol}")
                    state["active"].discard(symbol.lower())

                await redis.xack(stream, group, msg_id)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
async def run_feed_and_aggregator(pg, redis):
    log = logging.getLogger("FEED+AGGREGATOR")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    tickers = await load_active_tickers(pg)
    active = set([s.lower() for s in tickers])
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)} ‚Üí {list(tickers.keys())}")

    for s in tickers:
        log.info(f"–ê–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {s}")

    # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = {
        "tickers": tickers,   # symbol -> precision_price
        "active": active      # set of lowercase symbols
    }

    # –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis Stream
    asyncio.create_task(handle_ticker_events(redis, state))

    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
    while True:
        await asyncio.sleep(5)