# feed_v4_main.py ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã v4
import asyncio
import logging

from infra import init_pg_pool, init_redis_client, run_safe_loop, setup_logging
from feed_and_aggregate import run_feed_and_aggregator, load_all_tickers, handle_ticker_events
from core_io import run_core_io
from markprice_watcher import run_markprice_watcher

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    tickers, active = await load_all_tickers(pg)
    state = {
        "tickers": tickers,
        "active": active,
        "activated_at": {},
        "markprice_tasks": {},
    }
    refresh_queue = asyncio.Queue()

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π
    await asyncio.gather(
        run_safe_loop(lambda: handle_ticker_events(redis, state, pg, refresh_queue), "TICKER_EVENTS"),
        run_safe_loop(lambda: run_feed_and_aggregator(state, redis, pg, refresh_queue), "FEED+AGGREGATOR"),
        run_safe_loop(lambda: run_core_io(pg, redis), "CORE_IO"),
        run_safe_loop(lambda: run_markprice_watcher(state, redis), "MARKPRICE")
    )

# üî∏ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
