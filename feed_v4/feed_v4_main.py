# feed_v4_main.py ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã v4
import uuid
import uuid
import asyncio
import logging
from infra import init_pg_pool, init_redis_client, run_safe_loop, setup_logging
from feed_and_aggregate import run_feed_and_aggregator
from core_io import run_core_writer
from feed_v4_auditor import run_auditor
# from indicators_v4 import run_indicators_v4


# üî∏ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Redis Lock
async def try_acquire_team_lock(redis, lock_key="team_leader_lock", ttl=60):
    
    instance_id = str(uuid.uuid4())
    log = logging.getLogger("TEAM_LOCK")

    got = await redis.set(lock_key, instance_id, nx=True, ex=ttl)
    if not got:
        log.info("–õ–∏–¥–µ—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
        return False

    log.info(f"–ò–Ω—Å—Ç–∞–Ω—Å –ø–æ–ª—É—á–∏–ª lock (instance_id={instance_id})")

    # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TTL lock-–∞ –≤ —Ñ–æ–Ω–µ
    async def refresh():
        try:
            while True:
                await asyncio.sleep(ttl / 2)
                current = await redis.get(lock_key)
                if current == instance_id:
                    await redis.expire(lock_key, ttl)
                    log.debug("Lock –æ–±–Ω–æ–≤–ª—ë–Ω")
                else:
                    log.warning("Lock —É—Ç–µ—Ä—è–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    break
        except asyncio.CancelledError:
            log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lock –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    asyncio.create_task(refresh())
    return True
# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –≤–µ–¥—É—â–∏–º –∏–Ω—Å—Ç–∞–Ω—Å–æ–º
    if not await try_acquire_team_lock(redis):
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏–¥–µ—Ä    

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π
    await asyncio.gather(
        run_safe_loop(lambda: run_feed_and_aggregator(pg, redis), "FEED+AGGREGATOR"),
        run_safe_loop(lambda: run_core_writer(pg, redis), "CORE_IO"),
        run_safe_loop(lambda: run_auditor(pg, redis), "AUDITOR"),
#         run_safe_loop(lambda: run_indicators_v4(pg, redis), "INDICATORS_V4")
    )
# üî∏ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
