import asyncio
import logging
import json
from infra import setup_logging

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
log = logging.getLogger("indicators_v4")

# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ä–æ–≤
async def subscribe_ticker_events(redis, active_tickers):
    pubsub = redis.pubsub()
    await pubsub.subscribe("tickers_v4_events")
    log.info("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: tickers_v4_events")

    async for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                event = json.loads(message['data'])
                symbol = event.get("symbol", "").upper()
                action_type = event.get("type")
                action = event.get("action")

                if action_type == "status":
                    if action == "enabled":
                        active_tickers.add(symbol)
                        log.info(f"–¢–∏–∫–µ—Ä –≤–∫–ª—é—á—ë–Ω: {symbol}")
                    elif action == "disabled":
                        active_tickers.discard(symbol)
                        log.info(f"–¢–∏–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω: {symbol}")
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tickers_v4_events: {e}")
                
# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ohlcv_channel (—Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–æ–≤—ã–º —Å–≤–µ—á–∞–º)
async def subscribe_ohlcv_channel(redis, active_tickers, indicator_pool, param_pool):
    pubsub = redis.pubsub()
    await pubsub.subscribe("ohlcv_channel")
    log.info("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: ohlcv_channel")

    async for message in pubsub.listen():
        if message['type'] != 'message':
            continue
        try:
            event = json.loads(message['data'])
            symbol = event.get("symbol")
            interval = event.get("interval")

            if not symbol or not interval:
                continue
            if symbol.upper() not in active_tickers:
                log.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞: {symbol}")
                continue

            # –ù–∞–π—Ç–∏ —Ä–∞—Å—á—ë—Ç—ã –ø–æ symbol/interval (–¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ symbol –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            relevant_indicators = [
                ind for ind in indicator_pool.values()
                if ind.get("enabled", True)
                and ind["timeframe"] == interval
                # –ï—Å–ª–∏ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ symbol ‚Äî –¥–æ–±–∞–≤–∏—Ç—å:
                # and ind.get("symbol", "").upper() == symbol.upper()
            ]
            if not relevant_indicators:
                log.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –¥–ª—è {symbol} / {interval}")
                continue

            log.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ {symbol} ({interval}) ‚Äî –Ω–∞–π–¥–µ–Ω–æ {len(relevant_indicators)} —Ä–∞—Å—á—ë—Ç–æ–≤, –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            # –ó–¥–µ—Å—å –¥–∞–ª–µ–µ ‚Äî –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ohlcv_channel: {e}")
# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def subscribe_indicator_events(pg, redis, indicator_pool, param_pool):
    pubsub = redis.pubsub()
    await pubsub.subscribe("indicators_v4_events")
    log.info("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: indicators_v4_events")

    async for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                event = json.loads(message['data'])
                log.debug(f"–°–æ–±—ã—Ç–∏–µ indicators_v4_events: {event}")
                indicator_id = event.get("id")
                action = event.get("action")
                field = event.get("type")

                if field == "enabled":
                    if action == "true":
                        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ë–î
                        async with pg.acquire() as conn:
                            row = await conn.fetchrow("SELECT * FROM indicator_instances_v4 WHERE id = $1", indicator_id)
                            if row:
                                indicator = dict(row)
                                param_rows = await conn.fetch(
                                    "SELECT * FROM indicator_parameters_v4 WHERE instance_id = $1", indicator_id)
                                params = [dict(p) for p in param_rows]
                                indicator_pool[indicator_id] = indicator
                                param_pool[indicator_id] = params
                                log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: id={indicator_id}")
                            else:
                                log.error(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä id={indicator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    elif action == "false":
                        if indicator_id in indicator_pool:
                            indicator_pool.pop(indicator_id)
                            param_pool.pop(indicator_id, None)
                            log.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä id={indicator_id} –æ—Ç–∫–ª—é—á—ë–Ω")
                elif field == "stream_publish":
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ stream_publish –±–µ–∑ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    if indicator_id in indicator_pool:
                        indicator_pool[indicator_id]["stream_publish"] = (action == "true")
                        log.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä id={indicator_id} stream_publish = {action}")

            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ indicators_v4_events: {e}")
# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ indicators_v4
async def run_indicators_v4(pg, redis):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
    """
    log.info("üî∏ indicators_v4 —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    enabled_tickers = await load_enabled_tickers(pg)
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º enabled: {len(enabled_tickers)}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicator_instances = await load_enabled_indicator_instances(pg)
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicator_instances)}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicator_params = await load_indicator_parameters(pg)
    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicator_params)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º in-memory –ø—É–ª—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    active_tickers = set([t["symbol"].upper() for t in enabled_tickers])
    indicator_pool = {str(ind["id"]): ind for ind in indicator_instances}
    param_pool = {str(ind["id"]): [p for p in indicator_params if str(p["instance_id"]) == str(ind["id"])] for ind in indicator_instances}

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ —Ç–∏–∫–µ—Ä–∞—Ö
    asyncio.create_task(subscribe_ticker_events(redis, active_tickers))

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ohlcv_channel
    asyncio.create_task(subscribe_ohlcv_channel(redis, active_tickers, indicator_pool, param_pool))

    # –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    asyncio.create_task(subscribe_indicator_events(pg, redis, indicator_pool, param_pool))

    log.info("üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª indicators_v4 –∑–∞–ø—É—â–µ–Ω")

    while True:
        await asyncio.sleep(60)  # –ü—É–ª—å—Å –≤–æ—Ä–∫–µ—Ä–∞

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å status = 'enabled'
async def load_enabled_tickers(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM tickers_v4 WHERE status = 'enabled'")
        return [dict(row) for row in rows]

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_enabled_indicator_instances(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM indicator_instances_v4 WHERE enabled = true")
        return [dict(row) for row in rows]

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_indicator_parameters(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM indicator_parameters_v4")
        return [dict(row) for row in rows]

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞)
async def main():
    log.info("üî∏ indicators_v4 main() —Å—Ç–∞—Ä—Ç—É–µ—Ç (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    from infra import init_pg_pool, init_redis_client
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    await run_indicators_v4(pg, redis)

if __name__ == "__main__":
    asyncio.run(main())