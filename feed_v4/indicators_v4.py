import asyncio
import logging
import json
from infra import info_log

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger("indicators_v4")

# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ä–æ–≤
async def subscribe_ticker_events(redis):
    pubsub = redis.pubsub()
    await pubsub.subscribe("tickers_v4_events")
    logger = logging.getLogger("indicators_v4")
    logger.info("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: tickers_v4_events")

    async for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                event = json.loads(message['data'])
                logger.info(f"–°–æ–±—ã—Ç–∏–µ tickers_v4_events: {event}")
                # –ó–¥–µ—Å—å –¥–∞–ª–µ–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ä–∞ (–≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tickers_v4_events: {e}")

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ indicators_v4
async def run_indicators_v4(pg, redis):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
    """
    info_log("indicators_v4", "üî∏ indicators_v4 —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    enabled_tickers = await load_enabled_tickers(pg)
    info_log("indicators_v4", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º enabled: {len(enabled_tickers)}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicator_instances = await load_enabled_indicator_instances(pg)
    info_log("indicators_v4", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicator_instances)}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicator_params = await load_indicator_parameters(pg)
    info_log("indicators_v4", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicator_params)}")

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ —Ç–∏–∫–µ—Ä–∞—Ö
    asyncio.create_task(subscribe_ticker_events(redis))
    
    # TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è tickers_v4_events –∏ ohlcv_channel, —Ü–∏–∫–ª —Ä–∞—Å—á—ë—Ç–∞
    info_log("indicators_v4", "üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª indicators_v4 –∑–∞–ø—É—â–µ–Ω (–ª–æ–≥-–∑–∞–≥–ª—É—à–∫–∞)")

    while True:
        await asyncio.sleep(60)  # –ü—É–ª—å—Å –≤–æ—Ä–∫–µ—Ä–∞

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å status = 'enabled'
async def load_enabled_tickers(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM tickers_v4 WHERE status = 'enabled'")
        return [dict(row) for row in rows]

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_enabled_indicator_instances(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM indicator_instances_v4 WHERE enabled = true")
        return [dict(row) for row in rows]

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_indicator_parameters(pg):
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM indicator_parameters_v4")
        return [dict(row) for row in rows]

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞)
async def main():
    info_log("indicators_v4", "üî∏ indicators_v4 main() —Å—Ç–∞—Ä—Ç—É–µ—Ç (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    from infra import init_pg_pool, init_redis_client
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    await run_indicators_v4(pg, redis)

if __name__ == "__main__":
    asyncio.run(main())