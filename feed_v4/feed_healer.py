# feed_healer.py ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ª–µ—á–µ–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–æ–≤: –≤—ã–±–æ—Ä –∏–∑ –ë–î –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã

import asyncio
import logging
from datetime import datetime, timedelta

log = logging.getLogger("FEED_HEALER")

# üî∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç–∞–±–ª–∏—Ü–∞–º –∏ —à–∞–≥–∞–º
TABLE_MAP = {
    "m5": "ohlcv4_m5",
    "m15": "ohlcv4_m15",
    "h1": "ohlcv4_h1",
}
STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}

def align_start(ts, step_min):
    ts = ts.replace(second=0, microsecond=0)
    rem = ts.minute % step_min
    if rem:
        ts = ts - timedelta(minutes=rem)
    return ts

# üî∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ open_time (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å —à–∞–≥–æ–º step_min
def group_missing_into_ranges(times, step_min):
    if not times:
        return []
    step = timedelta(minutes=step_min)
    ranges = []
    start = prev = times[0]
    for t in times[1:]:
        if t - prev == step:
            prev = t
            continue
        ranges.append((start, prev))
        start = prev = t
    ranges.append((start, prev))
    return ranges

# üî∏ –≤–∑—è—Ç—å ¬´–¥—ã—Ä–∫–∏¬ª –∏–∑ ohlcv4_gap –ø–æ —Å—Ç–∞—Ç—É—Å—É found, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ (symbol, interval)
async def fetch_found_gaps_grouped(pg, limit_per_pair=500):
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT symbol, interval, open_time
            FROM ohlcv4_gap
            WHERE status = 'found'
            ORDER BY symbol, interval, open_time
            """
        )

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
    by_pair = {}
    for r in rows:
        key = (r["symbol"], r["interval"])
        by_pair.setdefault(key, []).append(r["open_time"])

    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –≥–ª—É–±–∏–Ω—É –Ω–∞ –ø–∞—Ä—É (—á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å —Ç—ã—Å—è—á–∏ –∑–∞ —Ä–∞–∑)
    for key, lst in by_pair.items():
        by_pair[key] = lst[:limit_per_pair]

    # –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    result = []
    for (symbol, interval), times in by_pair.items():
        step_min = STEP_MIN.get(interval)
        if step_min is None:
            continue
        ranges = group_missing_into_ranges(times, step_min)
        result.append((symbol, interval, ranges))
    return result

# üî∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/–≤—Å—Ç–∞–≤–æ–∫)
async def run_feed_healer(pg, redis):
    log.info("HEALER –∑–∞–ø—É—â–µ–Ω (—ç—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤)")
    while True:
        try:
            groups = await fetch_found_gaps_grouped(pg)
            if not groups:
                await asyncio.sleep(2)
                continue

            for symbol, interval, ranges in groups:
                total_missing = sum(int((b - a).total_seconds() // (STEP_MIN[interval]*60) + 1) for a, b in ranges)
                log.info(f"[{symbol}] [{interval}] –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total_missing}, –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {len(ranges)}")
                for a, b in ranges:
                    log.debug(f"[{symbol}] [{interval}] –¥–∏–∞–ø–∞–∑–æ–Ω: {a} .. {b}")

            # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            await asyncio.sleep(2)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ FEED_HEALER: {e}", exc_info=True)
            await asyncio.sleep(2)