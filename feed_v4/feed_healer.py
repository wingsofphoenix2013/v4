# feed_healer.py ‚Äî –ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤: –≤—ã–±–æ—Ä –∏–∑ –ë–î, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –¥–æ–≥—Ä—É–∑–∫–∞ —Å Binance –∏ –≤—Å—Ç–∞–≤–∫–∞ –≤ PG

import asyncio
import logging
from datetime import datetime, timedelta
from decimal import Decimal

import aiohttp

log = logging.getLogger("FEED_HEALER")

# üî∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç–∞–±–ª–∏—Ü–∞–º –∏ —à–∞–≥–∞–º
TABLE_MAP = {
    "m5": "ohlcv4_m5",
    "m15": "ohlcv4_m15",
    "h1": "ohlcv4_h1",
}
STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}
BINANCE_INTERVAL = {"m5": "5m", "m15": "15m", "h1": "1h"}
STEP_MS = {"m5": 5 * 60 * 1000, "m15": 15 * 60 * 1000, "h1": 60 * 60 * 1000}

BINANCE_BASE = "https://fapi.binance.com"  # USDT-M Futures

def align_start(ts, step_min):
    ts = ts.replace(second=0, microsecond=0)
    rem = ts.minute % step_min
    if rem:
        ts = ts - timedelta(minutes=rem)
    return ts

# üî∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ open_time (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å —à–∞–≥–æ–º step_min
def group_missing_into_ranges(times, step_min):
    if not times:
        return []
    step = timedelta(minutes=step_min)
    ranges = []
    start = prev = times[0]
    for t in times[1:]:
        if t - prev == step:
            prev = t
            continue
        ranges.append((start, prev))
        start = prev = t
    ranges.append((start, prev))
    return ranges

# üî∏ –≤–∑—è—Ç—å ¬´–¥—ã—Ä–∫–∏¬ª –∏–∑ ohlcv4_gap –ø–æ —Å—Ç–∞—Ç—É—Å—É found, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ (symbol, interval)
async def fetch_found_gaps_grouped(pg, limit_per_pair=500):
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT symbol, interval, open_time
            FROM ohlcv4_gap
            WHERE status = 'found'
            ORDER BY symbol, interval, open_time
            """
        )

    by_pair = {}
    for r in rows:
        key = (r["symbol"], r["interval"])
        by_pair.setdefault(key, []).append(r["open_time"])

    for key, lst in by_pair.items():
        by_pair[key] = lst[:limit_per_pair]

    result = []
    for (symbol, interval), times in by_pair.items():
        step_min = STEP_MIN.get(interval)
        if step_min is None:
            continue
        ranges = group_missing_into_ranges(times, step_min)
        result.append((symbol, interval, ranges))
    return result

# üî∏ REST-–∑–∞–ø—Ä–æ—Å –∫ Binance –∑–∞ —Å–≤–µ—á–∞–º–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
async def fetch_klines(session, symbol, interval, start_ms, end_ms):
    url = f"{BINANCE_BASE}/fapi/v1/klines"
    params = {
        "symbol": symbol,
        "interval": BINANCE_INTERVAL[interval],
        "startTime": start_ms,
        "endTime": end_ms,
        "limit": 1500,
    }
    async with session.get(url, params=params, timeout=15) as resp:
        resp.raise_for_status()
        data = await resp.json()
        return data  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤

# üî∏ –≤—Å—Ç–∞–≤–∫–∞ –±–∞—Ç—á–∞ —Å–≤–µ—á–µ–π –≤ PG
async def insert_klines_pg(pg, table, symbol, rows):
    if not rows:
        return 0
    records = []
    for r in rows:
        # r = [openTime, open, high, low, close, volume, ...]
        open_time = datetime.utcfromtimestamp(int(r[0]) // 1000)
        o = Decimal(r[1])
        h = Decimal(r[2])
        l = Decimal(r[3])
        c = Decimal(r[4])
        v = Decimal(r[5])
        records.append((symbol, open_time, o, h, l, c, v))

    inserted = 0
    async with pg.acquire() as conn:
        async with conn.transaction():
            # —á–∞–Ω–∫—É–µ–º –ø–æ 500, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            CHUNK = 500
            for i in range(0, len(records), CHUNK):
                chunk = records[i : i + CHUNK]
                # executemany –ø–æ–¥—Ö–æ–¥–∏—Ç (—É –≤–∞—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
                await conn.executemany(
                    f"""
                    INSERT INTO {table} (symbol, open_time, open, high, low, close, volume, source)
                    VALUES ($1, $2, $3, $4, $5, $6, $7, 'healer')
                    ON CONFLICT (symbol, open_time) DO NOTHING
                    """,
                    chunk,
                )
                inserted += len(chunk)
    return inserted

# üî∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ open_time —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –ë–î (–ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏)
async def select_present_opentimes(pg, table, symbol, times):
    if not times:
        return []
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            f"""
            SELECT open_time
            FROM {table}
            WHERE symbol = $1 AND open_time = ANY($2::timestamp[])
            """,
            symbol,
            times,
        )
    return [r["open_time"] for r in rows]

# üî∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã ¬´–≤—ã–ª–µ—á–µ–Ω–Ω—ã—Ö¬ª –¥—ã—Ä–æ–∫
async def mark_gaps_healed_db(pg, symbol, interval, healed_times):
    if not healed_times:
        return 0
    async with pg.acquire() as conn:
        await conn.execute(
            """
            UPDATE ohlcv4_gap
            SET status = 'healed_db', healed_db_at = NOW(), error = NULL
            WHERE symbol = $1 AND interval = $2 AND open_time = ANY($3::timestamp[])
            """,
            symbol,
            interval,
            healed_times,
        )
    return len(healed_times)

# üî∏ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É/–æ—à–∏–±–∫—É –ª–µ—á–µ–Ω–∏—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ open_time
async def mark_gaps_error(pg, symbol, interval, times, error_msg):
    if not times:
        return
    async with pg.acquire() as conn:
        await conn.execute(
            """
            UPDATE ohlcv4_gap
            SET attempts = attempts + 1, error = $4
            WHERE symbol = $1 AND interval = $2 AND open_time = ANY($3::timestamp[])
            """,
            symbol,
            interval,
            times,
            error_msg[:4000],
        )

# üî∏ Redis-–ª–æ–∫ –Ω–∞ (symbol, interval), —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã
async def acquire_lock(redis, symbol, interval, ttl=60):
    key = f"healer:lock:{symbol}:{interval}"
    token = f"{datetime.utcnow().timestamp()}"
    ok = await redis.set(key, token, ex=ttl, nx=True)
    return (key, token) if ok else (None, None)

async def release_lock(redis, key, token):
    if not key:
        return
    try:
        val = await redis.get(key)
        if val == token:
            await redis.delete(key)
    except Exception:
        pass

# üî∏ –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: —Ç—è–Ω–µ–º —É Binance –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î, –ø–æ–º–µ—á–∞–µ–º healed_db
async def heal_range(pg, session, symbol, interval, a, b):
    table = TABLE_MAP[interval]
    step_ms = STEP_MS[interval]
    start_ms = int(a.timestamp() * 1000)
    end_ms = int(b.timestamp() * 1000) + step_ms - 1  # –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

    # —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö open_time, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä—ã—Ç—å –¥—ã—Ä—É
    expected_times = []
    t = a
    step = timedelta(minutes=STEP_MIN[interval])
    while t <= b:
        expected_times.append(t)
        t += step

    expected_set_ms = {int(ts.timestamp() * 1000) for ts in expected_times}

    try:
        kl = await fetch_klines(session, symbol, interval, start_ms, end_ms)
    except Exception as e:
        log.warning(f"[{symbol}] [{interval}] –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Binance: {e}")
        await mark_gaps_error(pg, symbol, interval, expected_times, f"fetch error: {e}")
        return

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ openTime
    kl_needed = [r for r in kl if int(r[0]) in expected_set_ms]
    if not kl_needed:
        log.warning(f"[{symbol}] [{interval}] Binance –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É {a}..{b}")
        await mark_gaps_error(pg, symbol, interval, expected_times, "empty response for range")
        return

    inserted_try = await insert_klines_pg(pg, table, symbol, kl_needed)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö expected_times
    present = await select_present_opentimes(pg, table, symbol, expected_times)
    missing_still = sorted(set(expected_times) - set(present))
    healed = sorted(set(expected_times) & set(present))

    if healed:
        n = await mark_gaps_healed_db(pg, symbol, interval, healed)
        log.debug(f"[{symbol}] [{interval}] –¥–∏–∞–ø–∞–∑–æ–Ω {a}..{b} ‚Äî –≤—ã–ª–µ—á–µ–Ω–æ {n}/{len(expected_times)} (–≤—Å—Ç–∞–≤–ª—è–ª–∏ {inserted_try})")

    if missing_still:
        await mark_gaps_error(pg, symbol, interval, missing_still, "partial heal: missing after insert")
        log.warning(f"[{symbol}] [{interval}] –¥–∏–∞–ø–∞–∑–æ–Ω {a}..{b} ‚Äî –Ω–µ –≤—ã–ª–µ—á–µ–Ω—ã {len(missing_still)} —à—Ç")

# üî∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–ø—É—Å–∫–∏, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏ –ª–µ—á–∏—Ç –ë–î
async def run_feed_healer(pg, redis):
    log.debug("HEALER –∑–∞–ø—É—â–µ–Ω (–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ë–î)")
    http_timeout = aiohttp.ClientTimeout(total=20)
    async with aiohttp.ClientSession(timeout=http_timeout) as session:
        while True:
            try:
                groups = await fetch_found_gaps_grouped(pg)
                if not groups:
                    await asyncio.sleep(2)
                    continue

                for symbol, interval, ranges in groups:
                    lock_key, token = await acquire_lock(redis, symbol, interval, ttl=60)
                    if not lock_key:
                        continue
                    try:
                        total_missing = sum(
                            int((b - a).total_seconds() // (STEP_MIN[interval] * 60) + 1) for a, b in ranges
                        )
                        log.debug(f"[{symbol}] [{interval}] –∫ –ª–µ—á–µ–Ω–∏—é: –ø—Ä–æ–ø—É—Å–∫–æ–≤ {total_missing}, –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ {len(ranges)}")

                        for a, b in ranges:
                            await heal_range(pg, session, symbol, interval, a, b)

                    finally:
                        await release_lock(redis, lock_key, token)

                await asyncio.sleep(1)

            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ FEED_HEALER: {e}", exc_info=True)
                await asyncio.sleep(2)