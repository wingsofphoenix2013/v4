# feed_ts_filler.py ‚Äî –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Redis TS –ø–æ –∑–∞–ø–∏—Å—è–º healed_db –∏–∑ ohlcv4_gap

import asyncio
import logging
from datetime import datetime
from decimal import Decimal, ROUND_DOWN

log = logging.getLogger("FEED_TS_FILLER")

TABLE_MAP = {
    "m5": "ohlcv4_m5",
    "m15": "ohlcv4_m15",
    "h1": "ohlcv4_h1",
}

# üî∏ –∫–µ—à —Ç–æ—á–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ (precision_qty)
class PrecisionCache:
    def __init__(self):
        self.prec_qty = {}

    async def get_precision_qty(self, pg, symbol):
        if symbol in self.prec_qty:
            return self.prec_qty[symbol]
        async with pg.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT precision_qty FROM tickers_v4 WHERE symbol = $1",
                symbol
            )
            pq = row["precision_qty"] if row else 0
            self.prec_qty[symbol] = pq
            return pq

prec_cache = PrecisionCache()

# üî∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –≤ TS (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)
async def ts_safe_add(redis, key, ts_ms, value, labels):
    try:
        try:
            await redis.execute_command("TS.INFO", key)
        except Exception:
            await redis.execute_command(
                "TS.CREATE", key,
                "RETENTION", 5184000000,  # ~60 –¥–Ω–µ–π
                "DUPLICATE_POLICY", "last",
                "LABELS", *sum(([k, v] for k, v in labels.items()), [])
            )
        await redis.execute_command("TS.ADD", key, ts_ms, value)
    except Exception as e:
        log.warning(f"TS.ADD –æ—à–∏–±–∫–∞ {key}: {e}")

# üî∏ –≤—ã–±—Ä–∞—Ç—å –ø–∞—á–∫—É –≤—ã–ª–µ—á–µ–Ω–Ω—ã—Ö –≤ –ë–î –¥—ã—Ä–æ–∫ (–∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ TS)
async def fetch_healed_db_gaps(pg, limit=500):
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT symbol, interval, open_time
            FROM ohlcv4_gap
            WHERE status = 'healed_db'
            ORDER BY detected_at
            LIMIT $1
            """,
            limit
        )
    return rows

# üî∏ –ø–æ–ª—É—á–∏—Ç—å OHLCV –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ open_time
async def fetch_ohlcv_rows(pg, table, symbol, open_times):
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            f"""
            SELECT symbol, open_time, open, high, low, close, volume
            FROM {table}
            WHERE symbol = $1 AND open_time = ANY($2::timestamp[])
            """,
            symbol, open_times
        )
    return rows

# üî∏ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ TS –∑–∞–ø–æ–ª–Ω–µ–Ω
async def mark_gaps_healed_ts(pg, symbol, interval, open_times):
    if not open_times:
        return 0
    async with pg.acquire() as conn:
        await conn.execute(
            """
            UPDATE ohlcv4_gap
            SET status = 'healed_ts', healed_ts_at = NOW()
            WHERE symbol = $1 AND interval = $2 AND open_time = ANY($3::timestamp[])
            """,
            symbol, interval, open_times
        )
    return len(open_times)

# üî∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞—á–∫–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ (symbol, interval)
async def process_symbol_interval(pg, redis, symbol, interval, times):
    table = TABLE_MAP.get(interval)
    if not table or not times:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ –ë–î
    rows = await fetch_ohlcv_rows(pg, table, symbol, times)
    if not rows:
        # –¢–∞–∫–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ healed_db –ø—Ä–æ—Å—Ç–∞–≤–∏–ª–∏, –Ω–æ —Å—Ç—Ä–æ–∫–∏ –∏—Å—á–µ–∑–ª–∏ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
        log.warning(f"[{symbol}] [{interval}] –ù–µ—Ç —Å—Ç—Ä–æ–∫ OHLCV –≤ –ë–î –¥–ª—è {len(times)} open_time")
        return

    # precision –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –æ–±—ä—ë–º–∞
    precision_qty = await prec_cache.get_precision_qty(pg, symbol)

    # –ü–∏—à–µ–º –≤ TS: –ø—è—Ç—å —Ä—è–¥–æ–≤ (o,h,l,c,v)
    for r in rows:
        ts_ms = int(r["open_time"].timestamp() * 1000)
        o = float(r["open"])
        h = float(r["high"])
        l = float(r["low"])
        c = float(r["close"])
        v = float(Decimal(r["volume"]).quantize(Decimal(f"1e-{precision_qty}"), rounding=ROUND_DOWN))

        labels = {"symbol": symbol, "interval": interval}

        await asyncio.gather(
            ts_safe_add(redis, f"ts:{symbol}:{interval}:o", ts_ms, o, {**labels, "field": "o"}),
            ts_safe_add(redis, f"ts:{symbol}:{interval}:h", ts_ms, h, {**labels, "field": "h"}),
            ts_safe_add(redis, f"ts:{symbol}:{interval}:l", ts_ms, l, {**labels, "field": "l"}),
            ts_safe_add(redis, f"ts:{symbol}:{interval}:c", ts_ms, c, {**labels, "field": "c"}),
            ts_safe_add(redis, f"ts:{symbol}:{interval}:v", ts_ms, v, {**labels, "field": "v"}),
        )

    # –ü–æ–º–µ—á–∞–µ–º healed_ts
    await mark_gaps_healed_ts(pg, symbol, interval, times)
    log.debug(f"[{symbol}] [{interval}] TS –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–ª—è {len(times)} —Ç–æ—á–µ–∫")

# üî∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –±–µ—Ä—ë–º healed_db –∏–∑ ohlcv4_gap –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º TS
async def run_feed_ts_filler(pg, redis):
    log.debug("TS_FILLER –∑–∞–ø—É—â–µ–Ω (–¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Redis TS)")
    while True:
        try:
            rows = await fetch_healed_db_gaps(pg, limit=500)
            if not rows:
                await asyncio.sleep(2)
                continue

            # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ (symbol, interval) –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–ø–∏—Å–∏
            by_pair = {}
            for r in rows:
                key = (r["symbol"], r["interval"])
                by_pair.setdefault(key, []).append(r["open_time"])

            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—ã (–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
            for (symbol, interval), times in by_pair.items():
                await process_symbol_interval(pg, redis, symbol, interval, times)

            await asyncio.sleep(1)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ FEED_TS_FILLER: {e}", exc_info=True)
            await asyncio.sleep(2)