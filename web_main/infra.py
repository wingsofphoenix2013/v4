# infra.py ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

import os
import logging
from datetime import datetime, time, timedelta
from zoneinfo import ZoneInfo

import asyncpg
import redis.asyncio as aioredis
from fastapi.templating import Jinja2Templates

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
REDIS_USE_TLS = os.getenv("REDIS_USE_TLS", "false").lower() == "true"
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    DEBUG_MODE=True ‚Üí debug/info/warning/error
    DEBUG_MODE=False ‚Üí info/warning/error
    """
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É–ª)
pg_pool: asyncpg.Pool = None

async def init_pg_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
def init_redis_client():
    protocol = "rediss" if REDIS_USE_TLS else "redis"
    return aioredis.from_url(
        f"{protocol}://{REDIS_HOST}:{REDIS_PORT}",
        password=REDIS_PASSWORD,
        decode_responses=True
    )

# üî∏ FastAPI —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory="templates")

# üî∏ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏–µ–≤)
KYIV_TZ = ZoneInfo("Europe/Kyiv")

def get_kyiv_day_bounds(days_ago: int = 0) -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ –ø–æ –ö–∏–µ–≤—É –≤ naive-UTC —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è SQL —á–µ—Ä–µ–∑ asyncpg).
    days_ago = 0 ‚Üí —Å–µ–≥–æ–¥–Ω—è, 1 ‚Üí –≤—á–µ—Ä–∞ –∏ —Ç.–¥.
    """
    now_kyiv = datetime.now(KYIV_TZ)
    target_day = now_kyiv.date() - timedelta(days=days_ago)

    start_kyiv = datetime.combine(target_day, time.min, tzinfo=KYIV_TZ)
    end_kyiv = datetime.combine(target_day, time.max, tzinfo=KYIV_TZ)

    return (
        start_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None),
        end_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None)
    )

def get_kyiv_range_backwards(days: int) -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å—É—Ç–æ–∫ –ø–æ –ö–∏–µ–≤—É ‚Äî –≤ naive-UTC —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è SQL).
    """
    now_kyiv = datetime.now(KYIV_TZ)
    start_kyiv = now_kyiv - timedelta(days=days)

    return (
        start_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None),
        now_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None)
    )