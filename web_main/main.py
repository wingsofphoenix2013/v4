import os
import json
import logging
from decimal import Decimal
from datetime import datetime, time, timedelta, timezone
from zoneinfo import ZoneInfo
from collections import defaultdict
import re
from markupsafe import Markup, escape

import asyncpg
import redis.asyncio as aioredis

from fastapi import FastAPI, Request, Form, HTTPException, status, Depends
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse, Response
from fastapi.templating import Jinja2Templates
from starlette.status import HTTP_303_SEE_OTHER

from prometheus_client import (
    Counter,
    Gauge,
    generate_latest,
    CONTENT_TYPE_LATEST
)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
REDIS_USE_TLS = os.getenv("REDIS_USE_TLS", "false").lower() == "true"
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    DEBUG_MODE=True ‚Üí debug/info/warning/error
    DEBUG_MODE=False ‚Üí info/warning/error
    """
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É–ª)
pg_pool: asyncpg.Pool = None

async def init_pg_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client: aioredis.Redis = None

def init_redis_client():
    protocol = "rediss" if REDIS_USE_TLS else "redis"
    return aioredis.from_url(
        f"{protocol}://{REDIS_HOST}:{REDIS_PORT}",
        password=REDIS_PASSWORD,
        decode_responses=True
    )

# üî∏ FastAPI –∏ —à–∞–±–ª–æ–Ω—ã
app = FastAPI()
templates = Jinja2Templates(directory="templates")

# üî∏ –§–∏–ª—å—Ç—Ä Jinja: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ-—Ä—É—Å—Å–∫–∏
MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

def format_date_ru(dt):
    if not dt:
        return ""
    return f"{dt.day:02d} {MONTHS_RU.get(dt.month, '')} {dt.year} –≥–æ–¥–∞"

templates.env.filters["format_date_ru"] = format_date_ru

# üî∏ –§–∏–ª—å—Ç—Ä Jinja: –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –∂–∏—Ä–Ω—ã–º
def highlight_amounts(text):
    if not text:
        return ""
    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    pattern = r"(\b[><=]?\s?[+-]?\d+(?:[.,]\d{2})?\b)"
    highlighted = re.sub(pattern, r"<strong>\1</strong>", text)
    return Markup(highlighted)

templates.env.filters["highlight_amounts"] = highlight_amounts

# üî∏ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ö–∏–µ–≤)
KYIV_TZ = ZoneInfo("Europe/Kyiv")

def get_kyiv_day_bounds(days_ago: int = 0) -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ –ø–æ –ö–∏–µ–≤—É –≤ naive-UTC —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è SQL —á–µ—Ä–µ–∑ asyncpg).
    days_ago = 0 ‚Üí —Å–µ–≥–æ–¥–Ω—è, 1 ‚Üí –≤—á–µ—Ä–∞ –∏ —Ç.–¥.
    """
    # –ü–æ–ª—É—á–∞–µ–º "—Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç" –ø–æ UTC –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ö–∏–µ–≤
    now_kyiv = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC")).astimezone(KYIV_TZ)
    target_day = now_kyiv.date() - timedelta(days=days_ago)

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –≤ –ö–∏–µ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    start_kyiv = datetime.combine(target_day, time.min).replace(tzinfo=KYIV_TZ)
    end_kyiv = datetime.combine(target_day, time.max).replace(tzinfo=KYIV_TZ)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC –∏ —É–±–∏—Ä–∞–µ–º tzinfo (–¥–ª—è SQL)
    return (
        start_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None),
        end_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None)
    )

def get_kyiv_range_backwards(days: int) -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å—É—Ç–æ–∫ –ø–æ –ö–∏–µ–≤—É –≤ naive-UTC —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è SQL).
    """
    # –ü–æ–ª—É—á–∞–µ–º "—Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç" –ø–æ UTC –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ö–∏–µ–≤
    now_kyiv = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC")).astimezone(KYIV_TZ)
    end_kyiv = now_kyiv

    # –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: (N –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –≤ 00:00:00 –ø–æ –ö–∏–µ–≤—É)
    start_day = (now_kyiv - timedelta(days=days)).date()
    start_kyiv = datetime.combine(start_day, time.min).replace(tzinfo=KYIV_TZ)

    return (
        start_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None),
        end_kyiv.astimezone(ZoneInfo("UTC")).replace(tzinfo=None)
    )

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup():
    setup_logging()
    global pg_pool, redis_client
    pg_pool = await init_pg_pool()
    redis_client = init_redis_client()

    # üî∏ –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ä–æ—É—Ç–µ—Ä—ã
    from routers import init_dependencies
    init_dependencies(pg_pool, redis_client, templates)

# üî∏ –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
from routers import routers
for router in routers:
    app.include_router(router)

# üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
async def get_all_tickers():
    async with pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT id, symbol, status, tradepermission,
                   precision_price, precision_qty, min_qty
            FROM tickers_v4
            ORDER BY id
        """)
        return [dict(row) for row in rows]

# üî∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –≤ –±–∞–∑—É
async def add_new_ticker(data: dict):
    async with pg_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO tickers_v4 (symbol, status, tradepermission,
              precision_price, precision_qty, min_qty, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, NOW())
        """, data['symbol'], data['status'], data['tradepermission'],
              data['precision_price'], data['precision_qty'], data['min_qty'])

# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
async def ticker_exists(symbol: str) -> bool:
    async with pg_pool.acquire() as conn:
        result = await conn.fetchval("""
            SELECT EXISTS(SELECT 1 FROM tickers_v4 WHERE symbol = $1)
        """, symbol)
        return result

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∏–∫–µ—Ä–æ–≤
@app.get("/tickers", response_class=HTMLResponse)
async def tickers_page(request: Request):
    tickers = await get_all_tickers()
    return templates.TemplateResponse("tickers.html", {"request": request, "tickers": tickers})

# üî∏ POST: –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
@app.post("/tickers/{ticker_id}/enable_status")
async def enable_status(ticker_id: int):
    await update_ticker_and_notify(ticker_id, field="status", new_value="enabled")
    return RedirectResponse(url="/tickers", status_code=HTTP_303_SEE_OTHER)

@app.post("/tickers/{ticker_id}/disable_status")
async def disable_status(ticker_id: int):
    await update_ticker_and_notify(ticker_id, field="status", new_value="disabled")
    return RedirectResponse(url="/tickers", status_code=HTTP_303_SEE_OTHER)

@app.post("/tickers/{ticker_id}/enable_trade")
async def enable_trade(ticker_id: int):
    await update_ticker_and_notify(ticker_id, field="tradepermission", new_value="enabled")
    return RedirectResponse(url="/tickers", status_code=HTTP_303_SEE_OTHER)

@app.post("/tickers/{ticker_id}/disable_trade")
async def disable_trade(ticker_id: int):
    await update_ticker_and_notify(ticker_id, field="tradepermission", new_value="disabled")
    return RedirectResponse(url="/tickers", status_code=HTTP_303_SEE_OTHER)

# üî∏ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
@app.get("/tickers/create", response_class=HTMLResponse)
async def create_ticker_form(request: Request):
    return templates.TemplateResponse("tickers_create.html", {"request": request, "error": None})

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
@app.post("/tickers/create", response_class=HTMLResponse)
async def create_ticker(
    request: Request,
    symbol: str = Form(...),
    status: str = Form(...),
    tradepermission: str = Form(...),
    precision_price: int = Form(...),
    precision_qty: int = Form(...),
    min_qty: Decimal = Form(...)
):
    symbol_upper = symbol.upper()
    if await ticker_exists(symbol_upper):
        return templates.TemplateResponse("tickers_create.html", {
            "request": request,
            "error": f"–¢–∏–∫–µ—Ä '{symbol_upper}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        })

    await add_new_ticker({
        "symbol": symbol_upper,
        "status": status,
        "tradepermission": tradepermission,
        "precision_price": precision_price,
        "precision_qty": precision_qty,
        "min_qty": min_qty
    })
    return RedirectResponse(url="/tickers", status_code=HTTP_303_SEE_OTHER)
# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Ç–∏–∫–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Redis
log = logging.getLogger("TICKERS")

async def update_ticker_and_notify(ticker_id: int, field: str, new_value: str):
    async with pg_pool.acquire() as conn:
        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è
        await conn.execute(
            f"UPDATE tickers_v4 SET {field} = $1 WHERE id = $2",
            new_value, ticker_id
        )

        # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ activated_at
        if field == "status":
            if new_value == "enabled":
                await conn.execute(
                    "UPDATE tickers_v4 SET activated_at = NOW() WHERE id = $1",
                    ticker_id
                )
            elif new_value == "disabled":
                await conn.execute(
                    "UPDATE tickers_v4 SET activated_at = NULL WHERE id = $1",
                    ticker_id
                )

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–∏–∫–µ—Ä–∞
        symbol = await conn.fetchval("SELECT symbol FROM tickers_v4 WHERE id = $1", ticker_id)

    # üîπ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
    event = {
        "type": field,
        "action": new_value,
        "symbol": symbol,
        "source": "web_ui"
    }

    await redis_client.publish("tickers_v4_events", json.dumps(event))
    log.info(f"[PubSub] {event}")
# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@app.get("/indicators", response_class=HTMLResponse)
async def indicators_page(request: Request):
    async with pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT i.id, i.indicator, i.timeframe, i.enabled, i.stream_publish,
                   COALESCE(json_object_agg(p.param, p.value), '{}') AS parameters
            FROM indicator_instances_v4 i
            LEFT JOIN indicator_parameters_v4 p ON p.instance_id = i.id
            GROUP BY i.id
            ORDER BY i.id
        """)
        indicators = []
        for row in rows:
            indicators.append({
                "id": row["id"],
                "indicator": row["indicator"],
                "timeframe": row["timeframe"],
                "enabled": row["enabled"],
                "stream_publish": row["stream_publish"],
                "params": json.loads(row["parameters"]) if isinstance(row["parameters"], str) else row["parameters"]
            })
        return templates.TemplateResponse("indicators.html", {
            "request": request,
            "indicators": indicators
        })
# üî∏ POST: –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@app.post("/indicators/{indicator_id}/enable_status")
async def enable_indicator_status(indicator_id: int):
    await update_indicator_and_notify(indicator_id, field="enabled", new_value="true")
    return RedirectResponse(url="/indicators", status_code=HTTP_303_SEE_OTHER)

@app.post("/indicators/{indicator_id}/disable_status")
async def disable_indicator_status(indicator_id: int):
    await update_indicator_and_notify(indicator_id, field="enabled", new_value="false")
    return RedirectResponse(url="/indicators", status_code=HTTP_303_SEE_OTHER)

@app.post("/indicators/{indicator_id}/enable_stream")
async def enable_indicator_stream(indicator_id: int):
    await update_indicator_and_notify(indicator_id, field="stream_publish", new_value="true")
    return RedirectResponse(url="/indicators", status_code=HTTP_303_SEE_OTHER)

@app.post("/indicators/{indicator_id}/disable_stream")
async def disable_indicator_stream(indicator_id: int):
    await update_indicator_and_notify(indicator_id, field="stream_publish", new_value="false")
    return RedirectResponse(url="/indicators", status_code=HTTP_303_SEE_OTHER)
# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Redis
log = logging.getLogger("INDICATORS")

async def update_indicator_and_notify(indicator_id: int, field: str, new_value: str):
    async with pg_pool.acquire() as conn:
        await conn.execute(
            f"UPDATE indicator_instances_v4 SET {field} = $1 WHERE id = $2",
            new_value == "true",  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bool
            indicator_id
        )

    event = {
        "id": indicator_id,
        "type": field,
        "action": new_value,
        "source": "web_ui"
    }

    await redis_client.publish("indicators_v4_events", json.dumps(event))
    log.info(f"[PubSub] {event}")
# üî∏ GET: –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
@app.get("/indicators/create", response_class=HTMLResponse)
async def indicators_create_form(request: Request):
    return templates.TemplateResponse("indicators_create.html", {"request": request})
# üî∏ POST: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@app.post("/indicators/create")
async def create_indicator(
    request: Request,
    indicator: str = Form(...),
    status: str = Form(...),
    stream_publish: str = Form(...),
    timeframe: str = Form(...),
    param_count: int = Form(...),
):
    async with pg_pool.acquire() as conn:
        # –í—Å—Ç–∞–≤–∫–∞ –≤ indicator_instances_v4 (–±–µ–∑ –ø–æ–ª—è symbol)
        result = await conn.fetchrow(
            """
            INSERT INTO indicator_instances_v4 (indicator, timeframe, enabled, stream_publish, created_at)
            VALUES ($1, $2, $3, $4, NOW())
            RETURNING id
            """,
            indicator.lower(),
            timeframe,
            status == "enabled",
            stream_publish == "enabled"
        )
        instance_id = result["id"]

        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        form = await request.form()
        for i in range(1, param_count + 1):
            param = form.get(f"param_{i}_name")
            value = form.get(f"param_{i}_value")
            await conn.execute(
                """
                INSERT INTO indicator_parameters_v4 (instance_id, param, value)
                VALUES ($1, $2, $3)
                """,
                instance_id, param, value
            )

    return RedirectResponse(url="/indicators", status_code=HTTP_303_SEE_OTHER)
# üî∏ –ü—Ä–∏—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView (—Ñ–æ—Ä–º–∞—Ç JSON, v4)
log = logging.getLogger("WEBHOOK")

# üîπ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ISO-8601 —Å 'Z' –∏ –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
def normalize_iso_utc_z(value: str) -> str:
    try:
        match = re.search(r"\d{10}", value)
        if match:
            ts = int(match.group(0))
            dt = datetime.utcfromtimestamp(ts).replace(microsecond=0)
        else:
            # –£–¥–∞–ª—è–µ–º 'Z', –µ—Å–ª–∏ –µ—Å—Ç—å, –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∫–∞–∫ ISO
            dt = datetime.fromisoformat(value.replace("Z", "")).replace(microsecond=0)
        return dt.isoformat() + "Z"
    except Exception:
        return value  # fallback: –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å

@app.post("/webhook_v4")
async def webhook_v4(request: Request):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    message   = payload.get("message")
    symbol    = payload.get("symbol")
    bar_time  = payload.get("time")
    sent_at   = payload.get("sent_at")

    if not message or not symbol:
        raise HTTPException(status_code=422, detail="Missing 'message' or 'symbol'")

    # üîπ –û—á–∏—Å—Ç–∫–∞ —Ç–∏–∫–µ—Ä–∞ –æ—Ç –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞ .P
    if symbol.endswith(".P"):
        symbol = symbol[:-2]

    # üîπ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ bar_time –∏ sent_at –∫ ISO —Å 'Z'
    bar_time = normalize_iso_utc_z(bar_time) if bar_time else ""
    sent_at  = normalize_iso_utc_z(sent_at)  if sent_at else ""

    # üîπ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è ‚Äî UTC —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏, –±–µ–∑ 'Z'
    received_at = datetime.now(timezone.utc).isoformat()

    # üîπ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–∞
    log.info(f"{message} | {symbol} | bar_time={bar_time} | sent_at={sent_at}")

    # üîπ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Redis Stream —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
    await redis_client.xadd("signals_stream", {
        "message": message,
        "symbol": symbol,
        "bar_time": bar_time,
        "sent_at": sent_at,
        "received_at": received_at,
        "source": "external_signal"
    })

    return JSONResponse({"status": "ok", "received_at": received_at})
@app.get("/testsignals", response_class=HTMLResponse)
async def testsignals_page(request: Request):
    async with pg_pool.acquire() as conn:
        # –í—Å–µ —Ç–∏–∫–µ—Ä—ã —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        tickers_all = await conn.fetch("""
            SELECT symbol FROM tickers_v4
            WHERE status = 'enabled'
        """)

        # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã (status=enabled –∏ tradepermission=enabled)
        tickers_active = await conn.fetch("""
            SELECT symbol FROM tickers_v4
            WHERE status = 'enabled' AND tradepermission = 'enabled'
        """)

        # –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã
        signals_all = await conn.fetch("""
            SELECT id, name, long_phrase, short_phrase FROM signals_v4
        """)

        # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals_active = await conn.fetch("""
            SELECT id, name, long_phrase, short_phrase FROM signals_v4
            WHERE enabled = true
        """)

    return templates.TemplateResponse("testsignals.html", {
        "request": request,
        "tickers_all": [r["symbol"] for r in tickers_all],
        "tickers_active": [r["symbol"] for r in tickers_active],
        "signals_all": [
            {
                "id": r["id"],
                "name": r["name"],
                "long_phrase": r["long_phrase"],
                "short_phrase": r["short_phrase"]
            } for r in signals_all
        ],
        "signals_active": [
            {
                "id": r["id"],
                "name": r["name"],
                "long_phrase": r["long_phrase"],
                "short_phrase": r["short_phrase"]
            } for r in signals_active
        ]
    })
from datetime import datetime  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ

# üî∏ POST: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∂—É—Ä–Ω–∞–ª
log = logging.getLogger("TESTSIGNALS")

def to_naive_utc(dt_str):
    return datetime.fromisoformat(dt_str.replace("Z", "+00:00")).replace(tzinfo=None)

@app.post("/testsignals/save")
async def save_testsignal(request: Request):
    data = await request.json()

    symbol = data.get("symbol")
    message = data.get("message")
    time_raw = data.get("time")
    sent_raw = data.get("sent_at")
    mode = data.get("mode")

    if not all([symbol, message, time_raw, sent_raw, mode]):
        raise HTTPException(status_code=400, detail="Missing required fields")

    time = to_naive_utc(time_raw)
    sent_at = to_naive_utc(sent_raw)

    async with pg_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO testsignals_v4 (symbol, message, time, sent_at, mode)
            VALUES ($1, $2, $3, $4, $5)
        """, symbol, message, time, sent_at, mode)

    log.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω: {symbol} | {message} | {mode}")
    return JSONResponse({"status": "ok"})

# üî∏ –ü—Ä–æ–º–µ—Ç–µ–π-–º–µ—Ç—Ä–∏–∫–∏
signals_processed_total = Counter(
    "signals_processed_total", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤—Å–µ–≥–æ)"
)
signals_dispatched_total = Counter(
    "signals_dispatched_total", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
)
signals_ignored_total = Counter(
    "signals_ignored_total", "–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ"
)
processing_latency = Gauge(
    "processing_latency_ms", "–ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ (–º—Å)"
)

# üî∏ –≠–Ω–¥–ø–æ–∏–Ω—Ç Prometheus –º–µ—Ç—Ä–∏–∫
@app.get("/metrics")
async def metrics():
    stats = await redis_client.hgetall("metrics:signals")

    try:
        signals_processed_total._value.set(
            int(stats.get("signals_processed_total", 0))
        )
        signals_dispatched_total._value.set(
            int(stats.get("signals_dispatched_total", 0))
        )
        signals_ignored_total._value.set(
            int(stats.get("signals_ignored_total", 0))
        )
        processing_latency.set(
            float(stats.get("processing_latency_ms", 0))
        )
    except Exception:
        logging.getLogger("METRICS").warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫")

    return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST)
# üî∏ –≠–Ω–¥–ø–æ–∏–Ω—Ç: —Å—Ç–∞—Ç—É—Å signals_v4
@app.get("/status", response_class=HTMLResponse)
async def status_page(request: Request):
    stats = await redis_client.hgetall("metrics:signals")

    # üîπ –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for key in [
        "signals_processed_total",
        "signals_dispatched_total",
        "signals_ignored_total",
        "processing_latency_ms"
    ]:
        stats.setdefault(key, "0")

    # üîπ –û—Ç–¥–∞—ë–º —à–∞–±–ª–æ–Ω status.html
    return templates.TemplateResponse(
        "status.html",
        {
            "request": request,
            "stats": stats
        }
    )
