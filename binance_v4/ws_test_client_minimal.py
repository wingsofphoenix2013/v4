# ws_test_client_minimal.py

import asyncio
import aiohttp
import logging
import os

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("WS_MIN")

API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")  # –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è listenKey

async def get_listen_key():
    url = "https://testnet.binancefuture.com/fapi/v1/listenKey"
    headers = {"X-MBX-APIKEY": API_KEY}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers) as resp:
            data = await resp.json()
            return data["listenKey"]

async def run_ws_listener():
    listen_key = await get_listen_key()
    log.info(f"üßæ –ü–æ–ª—É—á–µ–Ω listenKey: {listen_key}")

    # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: /ws/<listenKey>
    ws_url = f"wss://fstream.binance.com/ws/{listen_key}"
    log.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")

    async with aiohttp.ClientSession() as session:
        async with session.ws_connect(ws_url) as ws:
            log.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω. –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

            while True:
                msg = await ws.receive()

                if msg.type == aiohttp.WSMsgType.TEXT:
                    log.info(f"üì® TEXT: {msg.data}")
                elif msg.type == aiohttp.WSMsgType.PING:
                    await ws.pong(msg.data)
                    log.info("üì° PING –ø–æ–ª—É—á–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG")
                elif msg.type == aiohttp.WSMsgType.CLOSED:
                    log.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    log.error("‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket")
                    break

if __name__ == "__main__":
    asyncio.run(run_ws_listener())