# redis_consumer.py

import json
import logging
from infra import infra
from binance_worker import handle_open_position  # üî∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ

log = logging.getLogger("REDIS_CONSUMER")

REDIS_STREAM_KEY = "binance_open_stream"
CONSUMER_GROUP = "binance_open_group"
CONSUMER_NAME = "binance_open_worker"


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—é–º–µ—Ä-–≥—Ä—É–ø–ø—ã Redis
async def init_redis_stream_group():
    try:
        await infra.redis_client.xgroup_create(REDIS_STREAM_KEY, CONSUMER_GROUP, id="$", mkstream=True)
        log.info(f"‚úÖ Redis stream group {CONSUMER_GROUP} —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info(f"‚ÑπÔ∏è Redis group {CONSUMER_GROUP} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
async def run_redis_consumer():
    await init_redis_stream_group()

    while True:
        try:
            entries = await infra.redis_client.xread_group(
                group_name=CONSUMER_GROUP,
                consumer_name=CONSUMER_NAME,
                streams={REDIS_STREAM_KEY: '>'},
                count=10,
                block=5000
            )

            for stream_key, messages in entries:
                for message_id, fields in messages:
                    try:
                        payload = json.loads(fields["data"])
                        event_type = payload.get("event_type")

                        if event_type == "opened":
                            await handle_open_position(payload)

                        await infra.redis_client.xack(REDIS_STREAM_KEY, CONSUMER_GROUP, message_id)

                    except Exception:
                        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Stream")