# redis_consumer.py

import asyncio
import logging
import json

from infra import infra
from strategy_registry import is_strategy_binance_enabled

log = logging.getLogger("REDIS_CONSUMER")

STREAMS = {
    "binance_open_stream": "binance_open_group",
    "binance_update_stream": "binance_update_group"
}

CONSUMER_NAME = "binance_worker_1"


# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
async def ensure_consumer_groups():
    for stream, group in STREAMS.items():
        try:
            await infra.redis_client.xgroup_create(
                name=stream,
                groupname=group,
                id="$",
                mkstream=True
            )
            log.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ {group} –Ω–∞ –ø–æ—Ç–æ–∫–µ {stream}")
        except Exception as e:
            if "BUSYGROUP" in str(e):
                log.info(f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ {group} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è {stream}")


# üîπ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def run_redis_consumer():
    await ensure_consumer_groups()

    while True:
        try:
            entries = []

            # —á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –µ–≥–æ –≥—Ä—É–ø–ø–æ–π
            for stream_name, group_name in STREAMS.items():
                batch = await infra.redis_client.xreadgroup(
                    groupname=group_name,
                    consumername=CONSUMER_NAME,
                    streams={stream_name: ">"},
                    count=10,
                    block=1000
                )
                entries.extend(batch)

            for stream_name, records in entries:
                group = STREAMS[stream_name]
                for record_id, data in records:
                    payload = data.get("data")

                    if not payload:
                        log.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'data' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ {stream_name}")
                        await infra.redis_client.xack(stream_name, group, record_id)
                        continue
                    try:
                        event = json.loads(payload)
                        raw_id = event.get("strategy_id")
                        strategy_id = int(raw_id) if raw_id is not None else None
                    except Exception:
                        log.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–ª–∏ strategy_id –∏–∑ {stream_name}: {payload}")
                        await infra.redis_client.xack(stream_name, group, record_id)
                        continue

                    if strategy_id is None:
                        log.warning(f"‚ö†Ô∏è –ù–µ—Ç strategy_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {event}")
                    elif not is_strategy_binance_enabled(strategy_id):
                        log.info(f"‚è≠Ô∏è [{stream_name}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è Binance")
                    else:
                        log.info(f"‚úÖ [{stream_name}] –ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}: {event}")

                    await infra.redis_client.xack(stream_name, group, record_id)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ run_redis_consumer")
            await asyncio.sleep(2)