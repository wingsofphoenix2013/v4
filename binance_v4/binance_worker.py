# binance_worker.py

import logging

log = logging.getLogger("BINANCE_WORKER")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ binance_—Å—Ç—Ä–∏–º–æ–≤
async def process_binance_event(event: dict):
    event_type = event.get("event_type")
    strategy_id = event.get("strategy_id")
    symbol = event.get("symbol")

    log.info(f"üõ†Ô∏è BINANCE WORKER: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}, —Å–∏–º–≤–æ–ª {symbol}")

    if event_type == "opened":
        await handle_opened(event)
    elif event_type == "tp_hit":
        await handle_tp_hit(event)
    elif event_type == "closed":
        await handle_closed(event)
    else:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π event_type: {event_type}")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_opened(event: dict):
    log.info(f"üì• [opened] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | {event.get('symbol')} | –û–±—ä—ë–º: {event.get('quantity')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É MARKET-–æ—Ä–¥–µ—Ä–∞, SL –∏ TP


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP
async def handle_tp_hit(event: dict):
    log.info(f"üéØ [tp_hit] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | TP —É—Ä–æ–≤–µ–Ω—å: {event.get('tp_level')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_closed(event: dict):
    log.info(f"üîí [closed] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | –ü—Ä–∏—á–∏–Ω–∞: {event.get('close_reason')}")
    # TODO: –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Binance