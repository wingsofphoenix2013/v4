# binance_worker.py

import logging
from infra import infra
from strategy_registry import (
    get_precision_for_symbol,
    is_strategy_binance_enabled,
)
from binance_ws_v4 import filled_order_map  # üî∏ –∫–∞—Ä—Ç–∞: orderId ‚Üí {strategy_id, direction, quantity}

log = logging.getLogger("BINANCE_WORKER")


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "opened": –æ—Ç–∫—Ä—ã—Ç–∏–µ MARKET-–æ—Ä–¥–µ—Ä–∞ –Ω–∞ Binance
async def handle_open_position(payload: dict):
    strategy_id = int(payload["strategy_id"])
    symbol = payload["symbol"]
    direction = payload["direction"]
    quantity = float(payload["quantity"])

    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è Binance
    if not is_strategy_binance_enabled(strategy_id):
        log.warning(f"üö´ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è Binance ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª")
        return

    side = "BUY" if direction == "long" else "SELL"
    qty_precision = get_precision_for_symbol(symbol)
    qty = round(quantity, qty_precision)
    qty_str = f"{qty:.{qty_precision}f}"

    log.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ MARKET-–æ—Ä–¥–µ—Ä–∞: {symbol} {side} qty={qty_str} (strategy_id={strategy_id})")

    try:
        resp = infra.binance_client.new_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=qty_str
        )
        order_id = resp["orderId"]

        # üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º orderId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        filled_order_map[order_id] = {
            "strategy_id": strategy_id,
            "direction": direction,
            "quantity": quantity
        }

        log.info(f"‚úÖ Binance order sent: orderId={order_id}")

    except Exception as e:
        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")