# binance_worker.py

import logging
import json
from infra import infra
from strategy_registry import get_leverage

log = logging.getLogger("BINANCE_WORKER")


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ binance_—Å—Ç—Ä–∏–º–æ–≤
async def process_binance_event(event: dict):
    event_type = event.get("event_type")
    strategy_id = event.get("strategy_id")
    symbol = event.get("symbol")

    log.info(f"üõ†Ô∏è BINANCE WORKER: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}, —Å–∏–º–≤–æ–ª {symbol}")

    if event_type == "opened":
        await handle_opened(event)
    elif event_type == "tp_hit":
        await handle_tp_hit(event)
    elif event_type == "closed":
        await handle_closed(event)
    else:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π event_type: {event_type}")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_opened(event: dict):
    client = infra.binance_client
    if client is None:
        log.warning("‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ handle_opened")
        return

    try:
        strategy_id = int(event["strategy_id"])
        symbol = event["symbol"]
        direction = event["direction"]
        side = "BUY" if direction == "long" else "SELL"
        quantity = float(event["quantity"])
        leverage = get_leverage(strategy_id)

        log.info(f"üì• [opened] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} | {symbol} | side={side} | qty={quantity} | lev={leverage}")

        # üî∏ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–º–µ–Ω–∞ –º–∞—Ä–∂–∏: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É–∂–µ ISOLATED
        log.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ change_margin_type ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è ISOLATED —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # üî∏ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
        client.futures_change_leverage(symbol=symbol, leverage=leverage)
        log.info(f"üìå –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")

        # üî∏ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ MARKET
        entry_order = client.futures_create_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=quantity
        )

        log.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ (orderId={entry_order['orderId']})")

        # üî∏ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL
        sl_targets = json.loads(event.get("sl_targets", "[]"))
        active_sl = next((sl for sl in sl_targets if not sl["hit"] and not sl["canceled"] and sl["price"]), None)

        if active_sl:
            stop_price = float(active_sl["price"])
            opposite_side = "SELL" if side == "BUY" else "BUY"

            sl_order = client.futures_create_order(
                symbol=symbol,
                side=opposite_side,
                type="STOP_MARKET",
                stopPrice=stop_price,
                closePosition=True,
                timeInForce="GTC",
                workingType="MARK_PRICE"
            )

            log.info(f"üõ°Ô∏è SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_price} (orderId={sl_order['orderId']})")
        else:
            log.info("‚ÑπÔ∏è SL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω")

        # üî∏ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP —Ü–µ–ª–µ–π
        tp_targets = json.loads(event.get("tp_targets", "[]"))
        for tp in tp_targets:
            if tp.get("price") and not tp.get("canceled") and not tp.get("hit"):
                tp_price = float(tp["price"])
                tp_qty = float(tp["quantity"])

                tp_order = client.futures_create_order(
                    symbol=symbol,
                    side=opposite_side,
                    type="LIMIT",
                    price=tp_price,
                    quantity=tp_qty,
                    reduceOnly=True,
                    timeInForce="GTC"
                )

                log.info(f"üéØ TP-{tp['level']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tp_price}, qty={tp_qty}, orderId={tp_order['orderId']}")

    except Exception as e:
        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è 'opened': {e}")
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP
async def handle_tp_hit(event: dict):
    log.info(f"üéØ [tp_hit] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | TP —É—Ä–æ–≤–µ–Ω—å: {event.get('tp_level')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_closed(event: dict):
    log.info(f"üîí [closed] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | –ü—Ä–∏—á–∏–Ω–∞: {event.get('close_reason')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É SL/TP –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏