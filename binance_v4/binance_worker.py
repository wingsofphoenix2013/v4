# binance_worker.py

import logging
import json

from infra import infra
from strategy_registry import (
    get_precision_for_symbol,
)

log = logging.getLogger("BINANCE_WORKER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "opened": –æ—Ç–∫—Ä—ã—Ç–∏–µ MARKET-–æ—Ä–¥–µ—Ä–∞ –Ω–∞ Binance
async def handle_open_position(payload: dict):
    strategy_id = int(payload["strategy_id"])
    symbol = payload["symbol"]
    direction = payload["direction"]
    quantity = float(payload["quantity"])

    side = "BUY" if direction == "long" else "SELL"
    qty_precision = get_precision_for_symbol(symbol)
    qty = round(quantity, qty_precision)
    qty_str = f"{qty:.{qty_precision}f}"

    log.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ MARKET-–æ—Ä–¥–µ—Ä–∞: {symbol} {side} qty={qty_str}")

    try:
        resp = await infra.binance_client.new_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=qty_str
        )
        log.info(f"‚úÖ Binance order sent: orderId={resp['orderId']}")

        # üî∏ TODO: –∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ FILLED —á–µ—Ä–µ–∑ WS
        # üî∏ TODO: –Ω–∞ –æ—Å–Ω–æ–≤–µ avgPrice —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å TP/SL

    except Exception as e:
        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")