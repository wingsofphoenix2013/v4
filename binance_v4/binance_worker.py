# binance_worker.py

import logging
import json
from decimal import Decimal, ROUND_DOWN
from datetime import datetime

from infra import infra
from strategy_registry import get_leverage, get_precision_for_symbol, get_price_precision_for_symbol

log = logging.getLogger("BINANCE_WORKER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ binance_—Å—Ç—Ä–∏–º–æ–≤
async def process_binance_event(event: dict):
    event_type = event.get("event_type")
    strategy_id = event.get("strategy_id")
    symbol = event.get("symbol")

    log.info(f"üõ†Ô∏è BINANCE WORKER: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}, —Å–∏–º–≤–æ–ª {symbol}")

    if event_type == "opened":
        await handle_opened(event)
    elif event_type == "tp_hit":
        await handle_tp_hit(event)
    elif event_type == "closed":
        await handle_closed(event)
    else:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π event_type: {event_type}")
        
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Binance (–±–µ–∑ TP/SL)
async def handle_opened(event: dict):
    client = infra.binance_client
    if client is None:
        log.warning("‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ handle_opened")
        return

    try:
        log.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {event}")

        strategy_id = int(event["strategy_id"])
        position_uid = event["position_uid"]
        symbol = event["symbol"]
        direction = event["direction"]
        side = "BUY" if direction == "long" else "SELL"
        raw_quantity = float(event["quantity"])

        leverage = get_leverage(strategy_id)

        # üî∏ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ quantity
        precision_qty = get_precision_for_symbol(symbol)
        quantize_mask = Decimal("1").scaleb(-precision_qty)
        rounded_qty = Decimal(str(raw_quantity)).quantize(quantize_mask, rounding=ROUND_DOWN)
        quantity = float(rounded_qty)

        log.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {side} {symbol} x {quantity} | –ø–ª–µ—á–æ: {leverage}")

        # üî∏ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∂–∏: ISOLATED
        try:
            client.change_margin_type(symbol=symbol, marginType="ISOLATED")
            log.info(f"üß≤ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ISOLATED –¥–ª—è {symbol}")
        except Exception as e:
            if "No need to change margin type" in str(e):
                log.debug(f"‚ÑπÔ∏è –ú–∞—Ä–∂–∞ —É–∂–µ ISOLATED –¥–ª—è {symbol}")
            else:
                log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É ISOLATED: {e}")

        # üî∏ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
        try:
            result = client.change_leverage(symbol=symbol, leverage=leverage)
            log.info(f"üìå –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result['leverage']}x –¥–ª—è {symbol}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e}")

        # üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ MARKET –æ—Ä–¥–µ—Ä–∞
        result = client.new_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=quantity
        )

        order_id = result["orderId"]
        log.info(f"‚úÖ MARKET –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: orderId={order_id}, —Å—Ç–∞—Ç—É—Å={result['status']}")

        # üî∏ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ infra
        infra.inflight_positions[position_uid] = {
            "strategy_id": strategy_id,
            "symbol": symbol,
            "side": side,
            "quantity": quantity,
            "order_id": order_id,
            "created_at": datetime.utcnow()
        }

        log.info(f"üíæ –ü–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ infra.inflight_positions: {position_uid}")

        # üî∏ –ó–∞–ø–∏—Å—å MARKET –æ—Ä–¥–µ—Ä–∞ –≤ binance_orders_v4
        await infra.pg_pool.execute(
            """
            INSERT INTO binance_orders_v4 (
                position_uid, strategy_id, symbol, binance_order_id,
                side, type, status, purpose, quantity, created_at
            ) VALUES (
                $1, $2, $3, $4, $5, 'MARKET', 'NEW', 'entry', $6, NOW()
            )
            """,
            position_uid, strategy_id, symbol, order_id, side, Decimal(quantity)
        )

        log.info(f"üìù –û—Ä–¥–µ—Ä –∑–∞–ø–∏—Å–∞–Ω –≤ binance_orders_v4: {order_id} ‚Üí {position_uid}")

    except Exception as e:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Binance")
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP
async def handle_tp_hit(event: dict):
    log.info(f"üéØ [tp_hit] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | TP —É—Ä–æ–≤–µ–Ω—å: {event.get('tp_level')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_closed(event: dict):
    log.info(f"üîí [closed] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | –ü—Ä–∏—á–∏–Ω–∞: {event.get('close_reason')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É SL/TP –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏