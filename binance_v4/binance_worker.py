# binance_worker.py

import logging
import json
from decimal import Decimal, ROUND_DOWN

from infra import infra
from strategy_registry import get_leverage, get_precision_for_symbol

log = logging.getLogger("BINANCE_WORKER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ binance_—Å—Ç—Ä–∏–º–æ–≤
async def process_binance_event(event: dict):
    event_type = event.get("event_type")
    strategy_id = event.get("strategy_id")
    symbol = event.get("symbol")

    log.info(f"üõ†Ô∏è BINANCE WORKER: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}, —Å–∏–º–≤–æ–ª {symbol}")

    if event_type == "opened":
        await handle_opened(event)
    elif event_type == "tp_hit":
        await handle_tp_hit(event)
    elif event_type == "closed":
        await handle_closed(event)
    else:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π event_type: {event_type}")
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å SL –∏ TP
async def handle_opened(event: dict):
    client = infra.binance_client
    if client is None:
        log.warning("‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ handle_opened")
        return

    try:
        strategy_id = int(event["strategy_id"])
        symbol = event["symbol"]
        direction = event["direction"]
        side = "BUY" if direction == "long" else "SELL"
        opposite_side = "SELL" if side == "BUY" else "BUY"
        raw_quantity = float(event["quantity"])
        leverage = get_leverage(strategy_id)

        # üî∏ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ quantity
        precision_qty = get_precision_for_symbol(symbol)
        quantize_mask = Decimal("1").scaleb(-precision_qty)
        rounded_qty = Decimal(str(raw_quantity)).quantize(quantize_mask, rounding=ROUND_DOWN)
        quantity = float(rounded_qty)

        log.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {side} {symbol} x {quantity} | –ø–ª–µ—á–æ: {leverage}")

        # üî∏ –ú–∞—Ä–∂–∞: ISOLATED
        try:
            client.change_margin_type(symbol=symbol, marginType="ISOLATED")
            log.info(f"üß≤ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ISOLATED –¥–ª—è {symbol}")
        except Exception as e:
            if "No need to change margin type" in str(e):
                log.debug(f"‚ÑπÔ∏è –ú–∞—Ä–∂–∞ —É–∂–µ ISOLATED –¥–ª—è {symbol}")
            else:
                log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∂—É ISOLATED –¥–ª—è {symbol}: {e}")

        # üî∏ –ü–ª–µ—á–æ
        try:
            result = client.change_leverage(symbol=symbol, leverage=leverage)
            log.info(f"üìå –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result['leverage']}x –¥–ª—è {symbol}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

        # üî∏ MARKET-–æ—Ä–¥–µ—Ä
        result = client.new_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=quantity
        )

        log.info(f"‚úÖ MARKET –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: orderId={result['orderId']}, —Å—Ç–∞—Ç—É—Å={result['status']}")

        # üî∏ SL
        sl_targets = json.loads(event.get("sl_targets", "[]"))
        active_sl = next((sl for sl in sl_targets if not sl.get("hit") and not sl.get("canceled") and sl.get("price")), None)

        if active_sl:
            stop_price = float(active_sl["price"])

            sl_order = client.new_order(
                symbol=symbol,
                side=opposite_side,
                type="STOP_MARKET",
                stopPrice=stop_price,
                closePosition=True,
                workingType="MARK_PRICE",
                timeInForce="GTC"
            )

            log.info(f"üõ°Ô∏è SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_price} (orderId={sl_order['orderId']})")
        else:
            log.info("‚ÑπÔ∏è SL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω")

        # üî∏ TP
        tp_targets = json.loads(event.get("tp_targets", "[]"))
        for tp in tp_targets:
            if tp.get("price") and not tp.get("canceled") and not tp.get("hit"):
                tp_price = float(tp["price"])
                tp_qty = float(Decimal(str(tp["quantity"])).quantize(quantize_mask, rounding=ROUND_DOWN))

                tp_order = client.new_order(
                    symbol=symbol,
                    side=opposite_side,
                    type="LIMIT",
                    price=tp_price,
                    quantity=tp_qty,
                    reduceOnly=True,
                    timeInForce="GTC"
                )

                log.info(f"üéØ TP-{tp['level']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tp_price}, qty={tp_qty}, orderId={tp_order['orderId']}")

    except Exception as e:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è 'opened'")        
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP
async def handle_tp_hit(event: dict):
    log.info(f"üéØ [tp_hit] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | TP —É—Ä–æ–≤–µ–Ω—å: {event.get('tp_level')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def handle_closed(event: dict):
    log.info(f"üîí [closed] –°—Ç—Ä–∞—Ç–µ–≥–∏—è {event.get('strategy_id')} | –ü—Ä–∏—á–∏–Ω–∞: {event.get('close_reason')}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É SL/TP –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏