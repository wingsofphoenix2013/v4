# ws_test_client.py

import asyncio
import aiohttp
import logging
from binance.um_futures import UMFutures
import os

log = logging.getLogger("WS_TEST")
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

api_key = os.getenv("BINANCE_API_KEY")
api_secret = os.getenv("BINANCE_API_SECRET")

client = UMFutures(key=api_key, secret=api_secret, base_url="https://testnet.binancefuture.com")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ WebSocket –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async def run_ws_test_listener():
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ listenKey
        listen_key_resp = client.new_listen_key()
        listen_key = listen_key_resp["listenKey"]
        log.info(f"üßæ –ü–æ–ª—É—á–µ–Ω listenKey: {listen_key}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (stream —Ä–µ–∂–∏–º)
        url = f"wss://fstream.binance.com/stream?streams={listen_key}"
        log.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {url}")

        session = aiohttp.ClientSession()
        ws = await session.ws_connect(url)
        log.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

        while True:
            msg = await ws.receive()

            if msg.type == aiohttp.WSMsgType.PING:
                await ws.pong(msg.data)
                log.info("üì° –ü–æ–ª—É—á–µ–Ω PING –æ—Ç Binance ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG")
                continue

            if msg.type == aiohttp.WSMsgType.TEXT:
                data = msg.json()
                log.info(f"üì® WS TEXT —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
            elif msg.type == aiohttp.WSMsgType.CLOSED:
                log.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                break
            elif msg.type == aiohttp.WSMsgType.ERROR:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {msg}")
                break

    except Exception as e:
        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WS-—Ç–µ—Å—Ç–∞: {e}")