# binance_v4_main.py

import asyncio
import logging

from infra import setup_logging, setup_pg, setup_redis_client
from redis_consumer import run_redis_consumer


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
async def run_safe_loop(coro_factory, label: str):
    log = logging.getLogger(label)
    while True:
        try:
            log.info(f"üîÑ –°—Ç–∞—Ä—Ç—É–µ—Ç —Ü–∏–∫–ª: {label}")
            await coro_factory()
        except Exception as e:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {label}: {e}")
        await asyncio.sleep(5)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    await setup_pg()
    await setup_redis_client()

    await asyncio.gather(
        run_safe_loop(run_redis_consumer, label="REDIS_CONSUMER"),
    )


if __name__ == "__main__":
    asyncio.run(main())