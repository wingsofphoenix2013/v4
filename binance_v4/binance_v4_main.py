# binance_v4_main.py

import asyncio
import logging

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from infra import (
    setup_logging,
    setup_pg,
    setup_redis_client,
    setup_binance_client,
    log_public_ip
)

# üî∏ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
from redis_consumer import run_redis_consumer                    # Redis Stream: binance_open_stream
from strategy_registry import (
    load_binance_enabled_strategies,                             # –ö—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    load_symbol_precisions,                                      # –¢–æ—á–Ω–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–æ–≤
    run_binance_strategy_watcher                                 # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Pub/Sub
)
from binance_ws_v4 import run_binance_ws_listener                # WebSocket Binance: User Data Stream


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
async def run_safe_loop(coro_factory, label: str):
    log = logging.getLogger(label)
    while True:
        try:
            log.info(f"üîÑ –°—Ç–∞—Ä—Ç—É–µ—Ç —Ü–∏–∫–ª: {label}")
            await coro_factory()
        except Exception as e:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {label}: {e}")
        await asyncio.sleep(5)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    await setup_pg()
    await setup_redis_client()
    await setup_binance_client()
    await log_public_ip()

    await load_binance_enabled_strategies()
    await load_symbol_precisions()

    await asyncio.gather(
        run_safe_loop(run_redis_consumer, label="REDIS_CONSUMER"),           # –≤—Ö–æ–¥—è—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        run_safe_loop(run_binance_strategy_watcher, label="STRATEGY_WATCHER"), # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        run_safe_loop(run_binance_ws_listener, label="BINANCE_WS")            # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    )


# üî∏ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())