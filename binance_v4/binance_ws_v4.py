# binance_ws_v4.py

import asyncio
import aiohttp
import logging
from infra import get_binance_listen_key, keep_alive_binance_listen_key

log = logging.getLogger("BINANCE_WS")


async def run_binance_ws_listener():
    while True:
        try:
            log.info("üîå –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance User Data Stream")

            # –ü–æ–ª—É—á–∞–µ–º listenKey
            listen_key = await get_binance_listen_key()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
            asyncio.create_task(keep_alive_binance_listen_key())

            # –ê–¥—Ä–µ—Å WebSocket Binance Futures (Testnet)
            ws_url = f"wss://stream.binancefuture.com/ws/{listen_key}"
            log.info(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")

            async with aiohttp.ClientSession() as session:
                async with session.ws_connect(ws_url) as ws:
                    log.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

                    async for msg in ws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            log.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {msg.data}")
                        elif msg.type == aiohttp.WSMsgType.ERROR:
                            log.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞")
                            break

        except Exception as e:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ Binance WebSocket —Å–ª—É—à–∞—Ç–µ–ª–µ: {e}")

        log.info("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)