# binance_ws_v4.py

import asyncio
import logging
from datetime import datetime

from infra import infra
from strategy_registry import get_leverage

log = logging.getLogger("BINANCE_WS")

# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
async def run_binance_ws_listener():
    ws = infra.binance_ws_client
    if ws is None:
        log.error("‚ùå WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    log.info("üîÑ –ó–∞–ø—É—Å–∫ Binance WebSocket listener")
    log.info(f"üßæ –ê–∫—Ç–∏–≤–Ω—ã–π listenKey: {infra.binance_ws_listen_key}")

    # ‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–º–µ–Ω—ã –ø–ª–µ—á–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    asyncio.create_task(delayed_test_change_leverage(120))

    while True:
        try:
            log.info("üß™ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ WebSocket")
            msg = await ws.receive_json()
            log.info(f"üõ∞ RAW —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Binance WS: {msg}")
            await handle_execution_report(msg)
        except Exception as e:
            log.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(1)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ executionReport (–≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ FILLED)
async def handle_execution_report(msg: dict):
    if msg.get("e") != "executionReport":
        return

    order_id = msg.get("i")
    status = msg.get("X")
    exec_type = msg.get("x")

    log.info(f"üì¨ executionReport: orderId={order_id}, status={status}, exec_type={exec_type}")

    if status != "FILLED" or exec_type != "TRADE":
        log.debug("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ FINISHED –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ TRADE")
        return

    # –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ order_id
    position_uid = None
    for puid, data in infra.inflight_positions.items():
        if data.get("order_id") == order_id:
            position_uid = puid
            break

    if not position_uid:
        log.warning(f"‚ö†Ô∏è FILLED –æ—Ä–¥–µ—Ä {order_id}, –Ω–æ position_uid –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
        return

    info = infra.inflight_positions[position_uid]
    strategy_id = info["strategy_id"]
    symbol = info["symbol"]
    side = info["side"]
    qty = float(msg["z"])
    price = float(msg["Z"]) / qty if qty else 0.0
    entry_time = datetime.utcfromtimestamp(msg["T"] / 1000)

    log.info(f"‚úÖ FILLED: orderId={order_id}, position_uid={position_uid}, qty={qty}, price={price:.6f}")

    # üìù –ó–∞–ø–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏
    await infra.pg_pool.execute(
        """
        INSERT INTO binance_positions_v4 (
            position_uid, strategy_id, symbol, direction,
            entry_price, entry_time, leverage, position_side,
            executed_qty, notional_value, status, binance_update_ts
        ) VALUES (
            $1, $2, $3, $4,
            $5, $6, $7, $8,
            $9, $10, 'open', NOW()
        )
        """,
        position_uid,
        strategy_id,
        symbol,
        "long" if side == "BUY" else "short",
        price,
        entry_time,
        get_leverage(strategy_id),
        side,
        qty,
        price * qty
    )

    log.info(f"üìÑ –ü–æ–∑–∏—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ binance_positions_v4: {position_uid}")

    # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞
    await infra.pg_pool.execute(
        """
        UPDATE binance_orders_v4
        SET status = 'FILLED', updated_at = NOW()
        WHERE binance_order_id = $1
        """,
        order_id
    )

    log.info(f"üìä –û—Ä–¥–µ—Ä {order_id} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ binance_orders_v4 -> FILLED")

    # üßπ –£–¥–∞–ª–∏—Ç—å –∏–∑ inflight-–∫—ç—à–∞
    infra.inflight_positions.pop(position_uid, None)


# üî∏ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–ª–µ—á–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è)
async def delayed_test_change_leverage(delay_sec: int):
    await asyncio.sleep(delay_sec)
    log.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–ª–µ—á–∞ –¥–ª—è BTCUSDT (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WS)")
    try:
        result = infra.binance_client.change_leverage(symbol="BTCUSDT", leverage=9)
        log.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Binance: {result}")
    except Exception as e:
        log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–ª–µ—á–∞: {e}")