# core_io.py

import asyncio
import logging
from datetime import datetime

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è PostgreSQL –æ–ø–µ—Ä–∞—Ü–∏–π
log = logging.getLogger("CORE_IO")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MAX_PARALLEL_TASKS = 20

TF_SECONDS = {
    "m1": 60,
    "m5": 300,
    "m15": 900,
}


# üî∏ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ open_time –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
def get_last_closed_open_time(created_at: datetime, tf: str) -> datetime:
    tf_sec = TF_SECONDS[tf]
    ts = int(created_at.timestamp())
    return datetime.fromtimestamp(ts - (ts % tf_sec) - tf_sec)


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∞—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def load_unprocessed_positions(limit: int = 100) -> list[dict]:
    log.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∞—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã...")
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT *
            FROM positions_v4
            WHERE status = 'closed' AND audited = false
            ORDER BY created_at
            LIMIT $1
        """, limit)
    log.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∞—É–¥–∏—Ç")
    return [dict(r) for r in rows]
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def process_position(position: dict):
    uid = position["position_uid"]
    symbol = position["symbol"]
    strategy_id = position["strategy_id"]
    created_at = position["created_at"]

    strategy = infra.enabled_strategies.get(strategy_id)
    if not strategy:
        log.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø–æ–∑–∏—Ü–∏—è {uid} –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    strategy_name = strategy.get("name")
    base_tf = strategy.get("timeframe", "").lower()

    tf_order = ["m1", "m5", "m15"]
    if base_tf not in tf_order:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º '{base_tf}' ‚Äî –ø–æ–∑–∏—Ü–∏—è {uid} –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    base_idx = tf_order.index(base_tf)
    allowed_tfs = tf_order[:base_idx + 1]

    # üî∏ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    indicators = [
        i for i in infra.enabled_indicators.values()
        if i.get("timeframe") in allowed_tfs
    ]

    if not indicators:
        log.info(f"‚ÑπÔ∏è –ù–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {uid}")
        return

    snapshot_rows = []

    async with infra.pg_pool.acquire() as conn:
        for ind in indicators:
            tf = ind["timeframe"]
            ot = get_last_closed_open_time(created_at, tf)

            rows = await conn.fetch("""
                SELECT param_name, value, open_time
                FROM indicator_values_v4
                WHERE instance_id = $1 AND symbol = $2 AND open_time = $3
            """, ind["id"], symbol, ot)

            if not rows:
                log.debug(f"üî∏ –ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ {ind['id']} –Ω–∞ {ot} ({tf})")
                continue

            for row in rows:
                snapshot_rows.append({
                    "position_uid": uid,
                    "strategy_id": strategy_id,
                    "strategy_name": strategy_name,
                    "indicator_id": ind["id"],
                    "param_name": row["param_name"],
                    "value": row["value"],
                    "timeframe": tf,
                    "source_time": row["open_time"]
                })

    if snapshot_rows:
        await insert_ind_snapshot(snapshot_rows)
        await mark_position_audited(uid)
        log.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {uid} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({len(snapshot_rows)} –∑–Ω–∞—á–µ–Ω–∏–π)")
    else:
        log.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {uid} ‚Äî –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
# üî∏ –í—Å—Ç–∞–≤–∫–∞ —Å–ª–µ–ø–∫–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def insert_ind_snapshot(snapshot_rows: list[dict]):
    async with infra.pg_pool.acquire() as conn:
        await conn.executemany("""
            INSERT INTO position_ind_stat_v4 (
                position_uid, strategy_id, strategy_name,
                indicator_id, param_name, value,
                timeframe, source_time
            )
            VALUES (
                $1, $2, $3,
                $4, $5, $6,
                $7, $8
            )
            ON CONFLICT DO NOTHING
        """, [
            (
                row["position_uid"],
                row["strategy_id"],
                row["strategy_name"],
                row["indicator_id"],
                row["param_name"],
                row["value"],
                row["timeframe"],
                row["source_time"]
            ) for row in snapshot_rows
        ])


# üî∏ –û—Ç–º–µ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
async def mark_position_audited(position_uid: str):
    async with infra.pg_pool.acquire() as conn:
        await conn.execute("""
            UPDATE positions_v4
            SET audited = true
            WHERE position_uid = $1
        """, position_uid)


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º
async def process_with_semaphore(position: dict, semaphore: asyncio.Semaphore):
    async with semaphore:
        try:
            await process_position(position)
        except Exception:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ {position['position_uid']}")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä PostgreSQL
async def pg_task():
    log.info("üîÅ [pg_task] —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    try:
        while True:
            try:
                log.info("üîÅ –ù–∞—á–∞–ª–æ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞")
                positions = await load_unprocessed_positions()

                if not positions:
                    log.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞—É–¥–∏—Ç–∞ ‚Äî –ø–∞—É–∑–∞")
                    await asyncio.sleep(60)
                    continue

                semaphore = asyncio.Semaphore(MAX_PARALLEL_TASKS)
                tasks = [
                    process_with_semaphore(pos, semaphore)
                    for pos in positions
                ]
                await asyncio.gather(*tasks, return_exceptions=True)

                log.info("‚è∏ –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                await asyncio.sleep(60)

            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ pg_task ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                await asyncio.sleep(5)

    except Exception:
        log.exception("üî• –û—à–∏–±–∫–∞ –≤–Ω–µ —Ü–∏–∫–ª–∞ –≤ pg_task ‚Äî –≤—ã—è—Å–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É")
        await asyncio.sleep(5)