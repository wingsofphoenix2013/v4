# core_io.py

import asyncio
import logging
import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è PostgreSQL –æ–ø–µ—Ä–∞—Ü–∏–π
log = logging.getLogger("CORE_IO")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∞—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def load_unprocessed_positions(limit: int = 100) -> list[dict]:
    log.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∞—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã...")
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT *
            FROM positions_v4_test
            WHERE status = 'closed' AND audited = false
            ORDER BY created_at
            LIMIT $1
        """, limit)
    log.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∞—É–¥–∏—Ç")
    return [dict(r) for r in rows]


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä PostgreSQL
async def pg_task(stop_event: asyncio.Event):
    while not stop_event.is_set():
        try:
            log.info("üîÅ –ù–∞—á–∞–ª–æ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞")
            positions = await load_unprocessed_positions()

            if not positions:
                log.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞—É–¥–∏—Ç–∞ ‚Äî –ø–∞—É–∑–∞")
                await asyncio.sleep(60)
                continue

            # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π

            log.info("‚è∏ –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
            await asyncio.sleep(60)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ pg_task ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            await asyncio.sleep(5)