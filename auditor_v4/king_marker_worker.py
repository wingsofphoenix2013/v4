# king_marker_worker.py

import logging
from datetime import datetime

import asyncpg
import pandas as pd

import infra

log = logging.getLogger("KING_MARKER")


# üî∏ Dry-run –≤–æ—Ä–∫–µ—Ä: –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π-–∫–æ—Ä–æ–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –µ—ë –ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def run_king_marker_worker():
    log.info("[KING_MARKER] üîÅ Dry-run: –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π, –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π-–∫–æ—Ä–æ–ª–µ–º")

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–æ—Ä–æ–ª–µ–π
    query_kings = """
        SELECT
            strategy_id,
            ts_recorded,
            LEAD(ts_recorded) OVER (ORDER BY ts_recorded) AS next_ts
        FROM strategies_active_v4
        ORDER BY ts_recorded
    """

    async with infra.pg_pool.acquire() as conn:
        kings = await conn.fetch(query_kings)

    if not kings:
        log.warning("[KING_MARKER] ‚ùó –í —Ç–∞–±–ª–∏—Ü–µ strategies_active_v4 –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    df_kings = pd.DataFrame(kings, columns=["strategy_id", "ts_recorded", "next_ts"])
    df_kings["ts_recorded"] = pd.to_datetime(df_kings["ts_recorded"])
    df_kings["next_ts"] = pd.to_datetime(df_kings["next_ts"])

    # üîπ –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ö–æ—Ä–æ–ª—è
    min_ts = df_kings["ts_recorded"].min()

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ö–æ—Ä–æ–ª—è
    query_positions = """
        SELECT id, strategy_id, created_at
        FROM positions_v4
        WHERE king_checked = false
          AND created_at >= $1
        ORDER BY created_at
        LIMIT 1000
    """

    async with infra.pg_pool.acquire() as conn:
        positions = await conn.fetch(query_positions, min_ts)

    if not positions:
        log.info("[KING_MARKER] ‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    df_pos = pd.DataFrame(positions, columns=["id", "strategy_id", "created_at"])
    df_pos["created_at"] = pd.to_datetime(df_pos["created_at"])

    matched = 0
    unmatched = 0

    for pos in df_pos.itertuples():
        pos_time = pos.created_at
        strategy_id = pos.strategy_id

        matched_king = df_kings[
            (df_kings["strategy_id"] == strategy_id) &
            (df_kings["ts_recorded"] <= pos_time) &
            ((df_kings["next_ts"].isna()) | (pos_time < df_kings["next_ts"]))
        ]

        if not matched_king.empty:
            king_id = matched_king.iloc[0]["strategy_id"]
            log.info(f"[KING_MARKER] ‚úÖ –ü–æ–∑–∏—Ü–∏—è {pos.id} ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {king_id} –≤–æ –≤—Ä–µ–º—è –µ—ë –ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            matched += 1
        else:
            log.info(f"[KING_MARKER] ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {pos.id} ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –±—ã–ª–∞ –ö–æ—Ä–æ–ª—ë–º –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è")
            unmatched += 1

    log.info(f"[KING_MARKER] üßæ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(df_pos)} –ø–æ–∑–∏—Ü–∏–π, {matched} —Å–æ–≤–ø–∞–ª–∏, {unmatched} –±–µ–∑ –ö–æ—Ä–æ–ª—è")