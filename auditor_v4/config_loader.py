# config_loader.py

import json
import asyncio
import logging

import infra
from infra import (
    set_enabled_tickers,
    set_enabled_strategies,
    set_enabled_indicators,
)

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("CONFIG_LOADER")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
async def load_enabled_tickers():
    query = """
        SELECT symbol, precision_price, precision_qty
        FROM tickers_v4
        WHERE status = 'enabled' AND tradepermission = 'enabled'
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        tickers = {r["symbol"]: dict(r) for r in rows}
        set_enabled_tickers(tickers)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def load_enabled_strategies():
    query = "SELECT * FROM strategies_v4"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        strategies = {r["id"]: dict(r) for r in rows}
        set_enabled_strategies(strategies)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_enabled_indicators():
    query = """
        SELECT 
            id,
            indicator,
            timeframe,
            enabled,
            stream_publish,
            created_at
        FROM indicator_instances_v4
        WHERE enabled = true
    """

    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        indicators = {}

        for r in rows:
            key = str(r["id"])  # –∫–ª—é—á = —Ç–æ–ª—å–∫–æ ID
            indicators[key] = dict(r)

        infra.set_enabled_indicators(indicators)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")

        log.info("üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
        for key, item in indicators.items():
            indicator = item["indicator"]
            tf = item["timeframe"]
            log.info(f"‚Ä¢ {key} ‚Üí {indicator} ({tf})")
# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å PubSub —Å–æ–±—ã—Ç–∏–π
async def config_event_listener():
    log = logging.getLogger("CONFIG_LOADER")

    pubsub = infra.redis_client.pubsub()
    await pubsub.subscribe(
        "tickers_v4_events",
        "strategies_v4_events",
        "indicators_v4_events"
    )
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis –∫–∞–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async for message in pubsub.listen():
        if message["type"] != "message":
            continue

        try:
            data = json.loads(message["data"])
            channel = message["channel"]
            if isinstance(channel, bytes):
                channel = channel.decode()

            # üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_type = data.get("type")
            action = data.get("action")
            desc = f"{event_type} ‚Üí {action}"

            log.info(f"üîî –°–æ–±—ã—Ç–∏–µ: {desc} –≤ {channel}")

            # üî∏ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
            if channel == "tickers_v4_events":
                await load_enabled_tickers()
            elif channel == "strategies_v4_events":
                await load_enabled_strategies()
            elif channel == "indicators_v4_events":
                await load_enabled_indicators()

        except Exception as e:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è PubSub: {e}")