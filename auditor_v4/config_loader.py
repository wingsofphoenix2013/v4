# config_loader.py

import json
import asyncio
import logging

import infra
from infra import (
    set_enabled_tickers,
    set_enabled_strategies,
    set_enabled_indicators,
)

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("CONFIG_LOADER")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
async def load_enabled_tickers():
    query = """
        SELECT symbol, precision_price, precision_qty
        FROM tickers_v4
        WHERE status = 'enabled' AND tradepermission = 'enabled'
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        tickers = {r["symbol"]: dict(r) for r in rows}
        set_enabled_tickers(tickers)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def load_enabled_strategies():
    query = "SELECT * FROM strategies_v4"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        strategies = {r["id"]: dict(r) for r in rows}
        set_enabled_strategies(strategies)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def load_enabled_indicators():
    query = """
        SELECT *
        FROM indicator_instances_v4
        WHERE enabled = true
    """
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        indicators = {r["id"]: dict(r) for r in rows}
        set_enabled_indicators(indicators)
        log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")


# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å PubSub —Å–æ–±—ã—Ç–∏–π
async def config_event_listener():
    pubsub = infra.redis_client.pubsub()
    await pubsub.subscribe("tickers_v4_events", "strategies_v4_events", "indicator_v4_events")
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã Redis –Ω–∞—á–∞—Ç–∞")

    async for message in pubsub.listen():
        if message["type"] != "message":
            continue

        try:
            data = json.loads(message["data"])
        except Exception:
            log.warning("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ PubSub")
            continue

        event = data.get("event")
        if not event:
            continue

        channel = message["channel"]
        log.info(f"üîî –°–æ–±—ã—Ç–∏–µ: {event} –≤ {channel}")

        try:
            if channel == "tickers_v4_events":
                await load_enabled_tickers()
            elif channel == "strategies_v4_events":
                await load_enabled_strategies()
            elif channel == "indicator_v4_events":
                await load_enabled_indicators()
        except Exception:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {channel}")