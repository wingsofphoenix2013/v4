import asyncio
import logging
from datetime import datetime, timedelta

import infra

log = logging.getLogger("OHLCV_AUDITOR")

TF_SECONDS = {
    "m1": 60,
    "m5": 300,
    "m15": 900,
    "h1": 3600,
}

# üî∏ –ê—É–¥–∏—Ç –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
async def audit_symbol_interval(symbol: str, tf: str, semaphore: asyncio.Semaphore):
    async with semaphore:
        try:
            created_at = infra.enabled_tickers[symbol].get("created_at")
            if not created_at:
                log.warning(f"‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–∫–µ—Ä {symbol} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç created_at")
                return

            tf_sec = TF_SECONDS[tf]
            now = datetime.utcnow()

            # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ª–Ω–∞—è —Å–≤–µ—á–∞
            to_ts = int(now.timestamp()) // tf_sec * tf_sec - tf_sec
            to_time = datetime.fromtimestamp(to_ts)

            # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –ª–∏–±–æ created_at, –ª–∏–±–æ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            from_time = max(created_at, to_time - timedelta(days=30))
            from_ts = int(from_time.timestamp()) // tf_sec * tf_sec
            from_time_aligned = datetime.fromtimestamp(from_ts)

            table = f"ohlcv4_{tf}"

            # –ü–æ–ª—É—á–∞–µ–º open_time –∑–∞ –ø–µ—Ä–∏–æ–¥
            query_data = f"""
                SELECT open_time FROM {table}
                WHERE symbol = $1 AND open_time BETWEEN $2 AND $3
            """

            async with infra.pg_pool.acquire() as conn:
                rows = await conn.fetch(query_data, symbol, from_time_aligned, to_time)
                actual = set(row["open_time"] for row in rows)

            # –°—Ç—Ä–æ–∏–º –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–∞–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            expected = set(
                from_time_aligned + timedelta(seconds=tf_sec * i)
                for i in range(int((to_time - from_time_aligned).total_seconds() // tf_sec) + 1)
            )

            missing = sorted(expected - actual)

            if missing:
                log.warning(f"üìâ {symbol} [{tf}] ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ {len(missing)} —Å–≤–µ—á–µ–π "
                            f"(—Å {from_time_aligned} –ø–æ {to_time})")

                inserted_count = 0
                async with infra.pg_pool.acquire() as conn:
                    for ts in missing:
                        result = await conn.execute(
                            """
                            INSERT INTO ohlcv_gaps_v4 (symbol, interval, open_time)
                            VALUES ($1, $2, $3)
                            ON CONFLICT DO NOTHING
                            """,
                            symbol, tf, ts
                        )
                        if result.startswith("INSERT"):
                            inserted_count += 1

                log.info(f"üìù {symbol} [{tf}] ‚Äî –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤: {inserted_count}")
            else:
                log.info(f"‚úÖ {symbol} [{tf}] ‚Äî –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤")

        except Exception:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ {symbol} [{tf}]")
            
# üî∏ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
async def run_audit_all_symbols():
    log.info("üîç [AUDIT] –°—Ç–∞—Ä—Ç –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")

    semaphore = asyncio.Semaphore(20)  # —Ä–∞–∑—É–º–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
    tasks = []

    for symbol in infra.enabled_tickers:
        for tf in TF_SECONDS:
            tasks.append(audit_symbol_interval(symbol, tf, semaphore))

    await asyncio.gather(*tasks)

    log.info("‚úÖ [AUDIT] –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")