# auditor_v4_main.py

import asyncio
import signal
import logging

from infra import (
    setup_logging,
    setup_pg,
    setup_redis_client,
)
from core_io import pg_task
from redis_io import redis_task

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
log = logging.getLogger("AUDITOR_MAIN")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
async def run_safe_loop(coro_factory, label: str):
    while True:
        try:
            log.info(f"[{label}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro_factory()
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    log.info("üì¶ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ auditor_v4")

    try:
        await setup_pg()
        await setup_redis_client()
        log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è PG –∏ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return

    stop_event = asyncio.Event()
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, stop_event.set)

    log.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")

    await asyncio.gather(
        run_safe_loop(lambda: pg_task(stop_event), "CORE_IO"),
        run_safe_loop(lambda: redis_task(stop_event), "REDIS_IO"),
        stop_event.wait()
    )


if __name__ == "__main__":
    asyncio.run(main())