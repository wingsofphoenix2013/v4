import asyncio
import logging

from infra import (
    setup_logging,
    setup_redis_client,
)
from redis_io import redis_task

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
log = logging.getLogger("AUDITOR_MAIN")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
async def run_safe_loop(coro, label: str):
    while True:
        try:
            log.info(f"[{label}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro()
            break  # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—ã–π—Ç–∏
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    log.info("üì¶ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ Redis TS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    try:
        await setup_redis_client()
        log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")
        return

    await run_safe_loop(redis_task, "REDIS_RETENTION_UPDATER")


if __name__ == "__main__":
    asyncio.run(main())