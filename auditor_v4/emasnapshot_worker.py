# emasnapshot_worker.py

import asyncio
import logging
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime, timedelta
from collections import defaultdict

import infra

# üî∏ –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é EMA-—Ñ–ª–∞–≥–æ–≤
emasnapshot_dict_cache = {}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("EMASNAPSHOT_WORKER")

# üî∏ –£—Ç–∏–ª–∏—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è Decimal
def quantize_decimal(value: Decimal, precision: int) -> Decimal:
    return value.quantize(Decimal(f'1e-{precision}'), rounding=ROUND_HALF_UP)

# üî∏ –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
def get_previous_tf_open_time(timestamp, tf: str) -> datetime:
    if tf == "m5":
        interval = 5
    elif tf == "m15":
        interval = 15
    elif tf == "h1":
        interval = 60
    else:
        raise ValueError(f"Unsupported timeframe: {tf}")

    # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
    rounded = timestamp.replace(
        minute=(timestamp.minute // interval) * interval,
        second=0,
        microsecond=0
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
    return rounded - timedelta(minutes=interval)
    
# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_emasnapshot_worker():
    log.info("üöÄ –í–æ—Ä–∫–µ—Ä EMA Snapshot –∑–∞–ø—É—â–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º –∏–∑ –∫—ç—à–∞
    strategy_ids = [
        sid for sid, s in infra.enabled_strategies.items()
        if s.get("emasnapshot") is True
    ]

    log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å emasnapshot = true: {len(strategy_ids)}")

    if not strategy_ids:
        log.info("‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    async with infra.pg_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        positions = await conn.fetch("""
            SELECT id, symbol, created_at, strategy_id, direction, pnl
            FROM positions_v4
            WHERE strategy_id = ANY($1)
              AND status = 'closed'
              AND emasnapshot_checked = false
        """, strategy_ids)

    log.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(positions)}")

    positions = positions[:200]
    sem = asyncio.Semaphore(10)
    completed_tfs = defaultdict(set)  # {position_id: set of completed tfs}
    tasks = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    for tf in ("m5", "m15", "h1"):
        tasks.extend([
            process_position_for_tf(row, tf, sem, completed_tfs)
            for row in positions
        ])

    await asyncio.gather(*tasks)

    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –¢–§
    complete_ids = [
        pid for pid, tfs in completed_tfs.items()
        if {"m5", "m15", "h1"}.issubset(tfs)
    ]

    async with infra.pg_pool.acquire() as conn:
        await conn.executemany("""
            UPDATE positions_v4
            SET emasnapshot_checked = true
            WHERE id = $1
        """, [(pid,) for pid in complete_ids])

    log.info(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {len(complete_ids)} –ø–æ–∑–∏—Ü–∏–π")
            
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (m5, m15, h1)
async def process_position_for_tf(position, tf: str, sem, completed_tfs):
    async with sem:
        try:
            import infra  # –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            async with infra.pg_pool.acquire() as conn:
                position_id = position["id"]
                symbol = position["symbol"]
                created_at = position["created_at"]
                strategy_id = position["strategy_id"]
                direction = position["direction"]

                try:
                    pnl = Decimal(position["pnl"])
                except Exception:
                    log.warning(f"‚è≠ [{tf}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è id={position_id} ‚Äî PnL –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è: {position['pnl']}")
                    return

                log.debug(f"‚ñ∂Ô∏è [{tf}] –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ id={position_id}")

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                open_time = get_previous_tf_open_time(created_at, tf)

                # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                snapshot = await conn.fetchrow("""
                    SELECT ordering FROM oracle_ema_snapshot_v4
                    WHERE symbol = $1 AND interval = $2 AND open_time = $3
                """, symbol, tf, open_time)

                if not snapshot:
                    log.warning(f"‚è≠ [{tf}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è id={position_id} ‚Äî –Ω–µ—Ç —Å–Ω–∞–ø—à–æ—Ç–∞ @ {open_time}")
                    return

                ordering = snapshot["ordering"]

                # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Ñ–ª–∞–≥–æ–≤
                if ordering in emasnapshot_dict_cache:
                    emasnapshot_dict_id = emasnapshot_dict_cache[ordering]
                else:
                    flag_row = await conn.fetchrow("""
                        SELECT id FROM oracle_emasnapshot_dict
                        WHERE ordering = $1
                    """, ordering)

                    if not flag_row:
                        log.warning(f"‚è≠ [{tf}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è id={position_id} ‚Äî –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ dict –¥–ª—è ordering: {ordering}")
                        return

                    emasnapshot_dict_id = flag_row["id"]
                    emasnapshot_dict_cache[ordering] = emasnapshot_dict_id

                is_win = pnl > 0
                stat_table = f"positions_emasnapshot_{tf}_stat"

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stat = await conn.fetchrow(f"""
                    SELECT * FROM {stat_table}
                    WHERE strategy_id = $1 AND direction = $2 AND emasnapshot_dict_id = $3
                """, strategy_id, direction, emasnapshot_dict_id)

                if stat:
                    num_trades = stat["num_trades"] + 1
                    num_wins = stat["num_wins"] + (1 if is_win else 0)
                    num_losses = stat["num_losses"] + (0 if is_win else 1)
                    total_pnl = Decimal(stat["total_pnl"]) + pnl
                else:
                    num_trades = 1
                    num_wins = 1 if is_win else 0
                    num_losses = 0 if is_win else 1
                    total_pnl = pnl

                avg_pnl = total_pnl / num_trades
                winrate = Decimal(num_wins) / num_trades
                base_rating = Decimal(0)

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                total_pnl = quantize_decimal(total_pnl, 4)
                avg_pnl = quantize_decimal(avg_pnl, 4)
                winrate = quantize_decimal(winrate, 4)
                base_rating = quantize_decimal(base_rating, 6)

                log.debug(f"üü° [{tf}] –ì–æ—Ç–æ–≤ –∫ UPSERT –ø–æ–∑–∏—Ü–∏–∏ id={position_id}, flag_id={emasnapshot_dict_id}")

                # UPSERT –≤ –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                try:
                    await conn.execute(f"""
                        INSERT INTO {stat_table} (
                            strategy_id, direction, emasnapshot_dict_id,
                            num_trades, num_wins, num_losses,
                            total_pnl, avg_pnl, winrate, base_rating, last_updated
                        )
                        VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10, now())
                        ON CONFLICT (strategy_id, direction, emasnapshot_dict_id)
                        DO UPDATE SET
                            num_trades = EXCLUDED.num_trades,
                            num_wins = EXCLUDED.num_wins,
                            num_losses = EXCLUDED.num_losses,
                            total_pnl = EXCLUDED.total_pnl,
                            avg_pnl = EXCLUDED.avg_pnl,
                            winrate = EXCLUDED.winrate,
                            base_rating = EXCLUDED.base_rating,
                            last_updated = now()
                    """, strategy_id, direction, emasnapshot_dict_id,
                         num_trades, num_wins, num_losses,
                         total_pnl, avg_pnl, winrate, base_rating)

                except Exception as upsert_exc:
                    log.exception(f"‚ùå [{tf}] –û—à–∏–±–∫–∞ –ø—Ä–∏ UPSERT –ø–æ–∑–∏—Ü–∏–∏ id={position_id}: {upsert_exc}")
                    return
                    
                log.info(f"‚úÖ [{tf}] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ id={position_id} (flag_id={emasnapshot_dict_id})")
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ —ç—Ç–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
                completed_tfs[position_id].add(tf)

        except Exception:
            log.exception(f"‚ùå [{tf}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ id={position['id']}")