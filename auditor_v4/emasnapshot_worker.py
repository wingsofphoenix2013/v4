# emasnapshot_worker.py

import asyncio
import logging
from decimal import Decimal
from datetime import datetime


import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("EMASNAPSHOT_WORKER")

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_emasnapshot_worker():
    log.info("üöÄ –í–æ—Ä–∫–µ—Ä EMA Snapshot –∑–∞–ø—É—â–µ–Ω")

    async with infra.pg_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≥–¥–µ –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥ emasnapshot
        strategies = await conn.fetch("""
            SELECT id FROM strategies_v4
            WHERE emasnapshot = true
        """)

        strategy_ids = [row["id"] for row in strategies]
        log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å emasnapshot = true: {len(strategy_ids)}")

        if not strategy_ids:
            log.info("‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        positions = await conn.fetch("""
            SELECT id, symbol, created_at, strategy_id, direction, pnl
            FROM positions_v4
            WHERE strategy_id = ANY($1)
              AND status = 'closed'
              AND emasnapshot_checked = false
        """, strategy_ids)

        log.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(positions)}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        positions = positions[:200]

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º
        sem = asyncio.Semaphore(10)
        tasks = [process_position_debug(row, sem) for row in positions]
        await asyncio.gather(*tasks)
        
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
async def process_position_debug(position, sem):
    async with sem:
        try:
            import infra  # –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            async with infra.pg_pool.acquire() as conn:
                symbol = position["symbol"]
                created_at = position["created_at"]
                strategy_id = position["strategy_id"]
                direction = position["direction"]
                pnl = Decimal(position["pnl"] or 0)

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ –Ω–∞—á–∞–ª—É –ø—è—Ç–∏–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
                open_time = created_at.replace(
                    minute=(created_at.minute // 5) * 5,
                    second=0,
                    microsecond=0
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
                snapshot = await conn.fetchrow("""
                    SELECT ordering FROM oracle_ema_snapshot_v4
                    WHERE symbol = $1 AND interval = 'm5' AND open_time = $2
                """, symbol, open_time)

                if not snapshot:
                    log.warning(f"‚õî –ù–µ—Ç —Å–Ω–∞–ø—à–æ—Ç–∞ –¥–ª—è {symbol} @ {open_time}")
                    return

                ordering = snapshot["ordering"]

                # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                flag_row = await conn.fetchrow("""
                    SELECT id FROM oracle_emasnapshot_dict
                    WHERE ordering = $1
                """, ordering)

                if not flag_row:
                    log.warning(f"‚õî –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ dict –¥–ª—è ordering: {ordering}")
                    return

                emasnapshot_dict_id = flag_row["id"]
                is_win = pnl > 0

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                stat = await conn.fetchrow("""
                    SELECT * FROM positions_emasnapshot_m5_stat
                    WHERE strategy_id = $1 AND direction = $2 AND emasnapshot_dict_id = $3
                """, strategy_id, direction, emasnapshot_dict_id)

                if stat:
                    num_trades = stat["num_trades"] + 1
                    num_wins = stat["num_wins"] + (1 if is_win else 0)
                    num_losses = stat["num_losses"] + (0 if is_win else 1)
                    total_pnl = Decimal(stat["total_pnl"]) + pnl
                else:
                    num_trades = 1
                    num_wins = 1 if is_win else 0
                    num_losses = 0 if is_win else 1
                    total_pnl = pnl

                avg_pnl = total_pnl / num_trades
                winrate = Decimal(num_wins) / num_trades
                base_rating = Decimal(0)

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                from decimal_utils import quantize_decimal
                total_pnl = quantize_decimal(total_pnl, 4)
                avg_pnl = quantize_decimal(avg_pnl, 4)
                winrate = quantize_decimal(winrate, 4)
                base_rating = quantize_decimal(base_rating, 6)

                # –õ–æ–≥
                log.info(
                    f"[sim] –ü–æ–∑–∏—Ü–∏—è ID={position['id']} | strategy={strategy_id} | {direction.upper()} | "
                    f"ordering={ordering} | flag_id={emasnapshot_dict_id} | pnl={pnl} | "
                    f"{'WIN' if is_win else 'LOSS'}"
                )
                log.info(
                    f"[sim] ‚Üí num_trades={num_trades}, num_wins={num_wins}, num_losses={num_losses}, "
                    f"total_pnl={total_pnl}, avg_pnl={avg_pnl}, winrate={winrate}, base_rating={base_rating}"
                )

        except Exception:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ id={position['id']}")