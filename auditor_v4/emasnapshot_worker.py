# emasnapshot_worker.py

import asyncio
import logging

from infra import pg_pool

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("EMASNAPSHOT_WORKER")

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_emasnapshot_worker():
    log.info("üöÄ –í–æ—Ä–∫–µ—Ä EMA Snapshot –∑–∞–ø—É—â–µ–Ω")

    async with pg_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≥–¥–µ –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥ emasnapshot
        strategies = await conn.fetch("""
            SELECT id FROM strategies_v4
            WHERE emasnapshot = true
        """)

        strategy_ids = [row["id"] for row in strategies]
        log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å emasnapshot = true: {len(strategy_ids)}")

        if not strategy_ids:
            log.info("‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        positions = await conn.fetch("""
            SELECT id FROM positions_v4
            WHERE strategy_id = ANY($1)
              AND status = 'closed'
              AND emasnapshot_checked = false
        """, strategy_ids)

        log.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(positions)}")