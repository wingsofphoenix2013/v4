# emasnapshot_worker.py

import asyncio
import logging
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime, timedelta

import infra

# üî∏ –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é EMA-—Ñ–ª–∞–≥–æ–≤
emasnapshot_dict_cache = {}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("EMASNAPSHOT_WORKER")

# üî∏ –£—Ç–∏–ª–∏—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è Decimal
def quantize_decimal(value: Decimal, precision: int) -> Decimal:
    return value.quantize(Decimal(f'1e-{precision}'), rounding=ROUND_HALF_UP)

# üî∏ –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
def get_previous_tf_open_time(timestamp, tf: str) -> datetime:
    if tf == "m5":
        interval = 5
    elif tf == "m15":
        interval = 15
    elif tf == "h1":
        interval = 60
    else:
        raise ValueError(f"Unsupported timeframe: {tf}")

    # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
    rounded = timestamp.replace(
        minute=(timestamp.minute // interval) * interval,
        second=0,
        microsecond=0
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
    return rounded - timedelta(minutes=interval)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async def process_position_all_tfs(position, sem):
    async with sem:
        try:
            import infra
            async with infra.pg_pool.acquire() as conn:
                success = True

                for tf in ("m5", "m15", "h1"):
                    tf_success = await process_position_for_tf(position, tf, conn)
                    if not tf_success:
                        log.warning(f"‚è≠ [{tf}] –ü–æ–∑–∏—Ü–∏—è id={position['id']} –Ω–µ –ø—Ä–æ—à–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
                        success = False

                if success:
                    await conn.execute("""
                        UPDATE positions_v4
                        SET emasnapshot_checked = true
                        WHERE id = $1
                    """, position["id"])
                    log.debug(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è id={position['id']} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ –≤—Å–µ–º –¢–§")
                else:
                    count_logs = await conn.fetchval("""
                        SELECT COUNT(*) FROM emasnapshot_position_log
                        WHERE position_id = $1
                    """, position["id"])
                    log.info(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è id={position['id']} —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚Äî –ª–æ–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: {count_logs}/3")

        except Exception:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ id={position['id']}")
            
# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_emasnapshot_worker():
    log.info("üöÄ –í–æ—Ä–∫–µ—Ä EMA Snapshot –∑–∞–ø—É—â–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º –∏–∑ –∫—ç—à–∞
    strategy_ids = [
        sid for sid, s in infra.enabled_strategies.items()
        if s.get("emasnapshot") is True
    ]

    log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å emasnapshot = true: {len(strategy_ids)}")

    if not strategy_ids:
        log.info("‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    async with infra.pg_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        positions = await conn.fetch("""
            SELECT id, symbol, created_at, strategy_id, direction, pnl
            FROM positions_v4
            WHERE strategy_id = ANY($1)
              AND status = 'closed'
              AND emasnapshot_checked = false
            LIMIT 200
        """, strategy_ids)

    log.debug(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(positions)}")

    # –û–¥–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
    sem = asyncio.Semaphore(10)
    tasks = [process_position_all_tfs(pos, sem) for pos in positions]
    await asyncio.gather(*tasks)
            
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ raw-—Ç–∞–±–ª–∏—Ü—É
async def process_position_for_tf(position, tf: str, conn) -> bool:
    try:
        position_id = position["id"]
        strategy_id = position["strategy_id"]
        direction = position["direction"]
        created_at = position["created_at"]
        symbol = position["symbol"]

        try:
            pnl = Decimal(position["pnl"])
        except Exception:
            log.warning(f"[{tf}] position_id={position_id} ‚Äî pnl –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            return False

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–µ
        open_time = get_previous_tf_open_time(created_at, tf)

        # –ü–æ–∏—Å–∫ —Å–Ω–∞–ø—à–æ—Ç–∞
        snapshot = await conn.fetchrow("""
            SELECT ordering FROM oracle_ema_snapshot_v4
            WHERE symbol = $1 AND interval = $2 AND open_time = $3
        """, symbol, tf, open_time)

        if not snapshot:
            log.warning(f"[{tf}] position_id={position_id} ‚Äî —Å–Ω–∞–ø—à–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @ {open_time}")
            return False

        ordering = snapshot["ordering"]

        # –ü–æ–∏—Å–∫ –∏–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–ª–∞–≥–∞ + pattern_id
        if ordering in emasnapshot_dict_cache:
            emasnapshot_dict_id, pattern_id = emasnapshot_dict_cache[ordering]
        else:
            row = await conn.fetchrow("""
                SELECT id, pattern_id
                FROM oracle_emasnapshot_dict
                WHERE ordering = $1
            """, ordering)

            if not row:
                log.warning(f"[{tf}] position_id={position_id} ‚Äî ordering –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dict")
                return False

            emasnapshot_dict_id = row["id"]
            pattern_id = row["pattern_id"]
            emasnapshot_dict_cache[ordering] = (emasnapshot_dict_id, pattern_id)
            
        # –í—Å—Ç–∞–≤–∫–∞ –ª–æ–≥-–∑–∞–ø–∏—Å–∏
        await conn.execute("""
            INSERT INTO emasnapshot_position_log (
                position_id, strategy_id, direction, tf,
                emasnapshot_dict_id, pattern_id, pnl
            ) VALUES ($1, $2, $3, $4, $5, $6, $7)
            ON CONFLICT DO NOTHING
        """, position_id, strategy_id, direction, tf,
             emasnapshot_dict_id, pattern_id, pnl)

        log.debug(f"[{tf}] üì• –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: id={position_id}, flag={emasnapshot_dict_id}, pattern={pattern_id}, pnl={pnl}")

        # –°–∏–≥–Ω–∞–ª –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É –Ω–∞ –ø–µ—Ä–µ—Å—á—ë—Ç
        await infra.redis_client.set("emasnapshot:agg:pending", 1)

        return True

    except Exception:
        log.exception(f"[{tf}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ id={position['id']}")
        return False