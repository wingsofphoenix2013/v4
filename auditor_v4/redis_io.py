# import asyncio
# import logging
# 
# import infra
# 
# log = logging.getLogger("REDIS_IO")
# 
# 
# # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RETENTION –¥–ª—è –≤—Å–µ—Ö Redis TS –∫–ª—é—á–µ–π
# async def update_retention_for_all_ts_keys():
#     try:
#         log.info("üîß –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RETENTION –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π Redis TS...")
# 
#         keys = await infra.redis_client.keys("ts:*:*:*")
#         log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
# 
#         updated = 0
#         for key in keys:
#             try:
#                 await infra.redis_client.execute_command("TS.ALTER", key, "RETENTION", 2592000000)
#                 log.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: {key}")
#                 updated += 1
#             except Exception as e:
#                 log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {key}: {e}")
# 
#         log.info(f"üèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated} –∫–ª—é—á–µ–π –∏–∑ {len(keys)}")
# 
#     except Exception:
#         log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ RETENTION –∫–ª—é—á–µ–π Redis TS")
# 
# 
# # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ run_safe_loop)
# async def redis_task():
#     await update_retention_for_all_ts_keys()