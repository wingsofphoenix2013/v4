import asyncio
import logging
from datetime import datetime, timedelta

import infra

log = logging.getLogger("REDIS_IO")

TF_SECONDS = {
    "m1": 60,
    "m5": 300,
    "m15": 900,
    "h1": 3600,
}

FIELDS = ["o", "h", "l", "c", "v"]


# üî∏ –ê—É–¥–∏—Ç Redis TS –ø–æ –æ–¥–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
async def audit_ts_for_symbol_tf(symbol: str, tf: str, semaphore: asyncio.Semaphore):
    async with semaphore:
        try:
            created_at = infra.enabled_tickers[symbol].get("created_at")
            if not created_at:
                log.warning(f"‚è≥ [TS] –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–∫–µ—Ä {symbol} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç created_at")
                return

            tf_sec = TF_SECONDS[tf]
            tf_ms = tf_sec * 1000
            now = datetime.utcnow()

            # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∞—É–¥–∏—Ç–∞
            to_ts = int(now.timestamp()) // tf_sec * tf_sec - tf_sec
            from_time = max(created_at, now - timedelta(days=30))
            from_ts = int(from_time.timestamp()) // tf_sec * tf_sec

            # –û–∂–∏–¥–∞–µ–º—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            expected = {
                from_ts * 1000 + tf_ms * i
                for i in range((to_ts - from_ts) // tf_sec + 1)
            }
            expected_count = len(expected)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
            missing_counts = {}

            for field in FIELDS:
                key = f"ts:{symbol}:{tf}:{field}"
                try:
                    results = await infra.redis_client.ts().range(
                        key,
                        from_ts * 1000,
                        to_ts * 1000
                    )
                    actual = {int(ts) for ts, _ in results}
                    missing = expected - actual
                    missing_counts[field] = len(missing)

                except Exception as e:
                    log.exception(f"‚ùå [TS] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {key}: {e}")
                    missing_counts[field] = f"ERR"

            # –õ–æ–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É+—Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            summary = " ".join(f"{f}={missing_counts[f]}" for f in FIELDS)
            log.info(f"üìâ [TS] {symbol} [{tf}] ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ: {summary} (–∏–∑ {expected_count} —Ç–æ—á–µ–∫)")

        except Exception:
            log.exception(f"‚ùå [TS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {symbol} [{tf}]")


# üî∏ –ó–∞–ø—É—Å–∫ Redis TS –∞—É–¥–∏—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
async def run_audit_all_symbols_ts():
    log.info("üîç [AUDIT_TS] –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ Redis TimeSeries")

    semaphore = asyncio.Semaphore(10)
    tasks = []

    for symbol in infra.enabled_tickers:
        for tf in TF_SECONDS:
            tasks.append(audit_ts_for_symbol_tf(symbol, tf, semaphore))

    await asyncio.gather(*tasks)
    log.info("‚úÖ [AUDIT_TS] –ê—É–¥–∏—Ç Redis TS –∑–∞–≤–µ—Ä—à—ë–Ω")