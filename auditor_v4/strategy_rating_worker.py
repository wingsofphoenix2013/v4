# strategy_rating_worker.py

import logging
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
from scipy.stats import linregress
import asyncpg

import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("STRATEGY_RATER")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_strategy_rating_worker():
    start = datetime.utcnow()
    log.info("[STRATEGY_RATER] üîÅ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

    # üîπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    now = datetime.utcnow()
    ts_now = now.replace(second=0, microsecond=0)

    from_ts_3h = now - timedelta(hours=3)
    from_ts_12h = now - timedelta(hours=12)

    # üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞ 12—á
    query = """
        SELECT strategy_id, pnl, notional_value, created_at, closed_at
        FROM positions_v4
        WHERE closed_at BETWEEN $1 AND $2
          AND status = 'closed'
          AND pnl IS NOT NULL
          AND notional_value IS NOT NULL
          AND created_at IS NOT NULL
    """

    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query, from_ts_12h, now)

    if not rows:
        log.warning("[STRATEGY_RATER] ‚ùó –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤")
        return

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
    df = pd.DataFrame(rows, columns=rows[0].keys())
    df["pnl"] = df["pnl"].astype(float)
    df["notional_value"] = df["notional_value"].astype(float)
    df["created_at"] = pd.to_datetime(df["created_at"])
    df["closed_at"] = pd.to_datetime(df["closed_at"])

    # üîπ –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –∑–∞ 12—á (—Å —É—á—ë—Ç–æ–º –ª–µ–≤–µ—Ä–µ–¥–∂–∞)
    df_12h = df.copy()

    # üî∏ –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≤–µ—Ä–µ–¥–∂ –∏–∑ enabled_strategies
    df_12h["leverage"] = df_12h["strategy_id"].map(
        lambda sid: float(infra.enabled_strategies.get(sid, {}).get("leverage", 1))
    )

    # üî∏ –ü–µ—Ä–µ—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: pnl / (notional / leverage) * 100
    df_12h["pnl_pct"] = df_12h["pnl"] * df_12h["leverage"] / df_12h["notional_value"] * 100

    # üî∏ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    grouped_12h = df_12h.groupby("strategy_id")
    metrics_12h = grouped_12h.agg({
        "pnl_pct": "mean",
        "pnl": "count"
    }).rename(columns={
        "pnl_pct": "pnl_pct_12h",
        "pnl": "trade_count_12h"
    })
    
    # üîπ –ú–µ–¥–∏–∞–Ω–Ω—ã–π pnl_pct –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    median_pnl = metrics_12h["pnl_pct_12h"].median()

    # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (enabled = true)
    total_strategies = [
        sid for sid, strategy in infra.enabled_strategies.items()
        if strategy.get("enabled") is True
    ]

    passed = []
    rejected = []

    for sid in total_strategies:
        if sid not in metrics_12h.index:
            rejected.append((sid, "–Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ 12—á"))
            continue

        row = metrics_12h.loc[sid]
        pnl = row["pnl_pct_12h"]
        trades = row["trade_count_12h"]

        passed_by_pnl = pnl >= median_pnl
        passed_by_trades = trades >= 5  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å 10 ‚Üí 5

        if passed_by_pnl and passed_by_trades:
            passed.append((sid, pnl, trades))
        else:
            reasons = []
            if not passed_by_pnl:
                reasons.append("–Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã –ø–æ pnl")
            if not passed_by_trades:
                reasons.append("–º–µ–Ω–µ–µ 5 —Å–¥–µ–ª–æ–∫")
            reason = f"pnl={pnl:.2f}, trades={trades} ‚Äî " + ", ".join(reasons)
            rejected.append((sid, reason))

    if not passed:
        log.critical("[STRATEGY_RATER] ‚ùå –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä –¥–æ–ø—É—Å–∫–∞ (–æ–±–∞ —É—Å–ª–æ–≤–∏—è). –¢–æ—Ä–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return

    log.info(f"[STRATEGY_RATER] ‚úÖ –ö –¥–æ–ø—É—Å–∫—É –ø—Ä–æ—à–ª–∏ {len(passed)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–∏–∑ {len(total_strategies)} –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ)")

    log.debug("[STRATEGY_RATER] üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
    for sid, pnl, trades in passed:
        log.debug(
            f"[STRATEGY_RATER] ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {sid} ‚Äî pnl={pnl:.2f}, trades={trades} ‚Äî –¥–æ–ø—É—â–µ–Ω–∞ (–ø–æ –¥–≤—É–º —É—Å–ª–æ–≤–∏—è–º)"
        )

    log.info(f"[STRATEGY_RATER] ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {len(rejected)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
    for sid, reason in rejected:
        log.debug(f"[STRATEGY_RATER] ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {sid} ‚Äî {reason}")

    # üîπ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    passed_ids = [sid for sid, *_ in passed]
    df = df[df["strategy_id"].isin(passed_ids)]

    if df.empty:
        log.warning("[STRATEGY_RATER] ‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –∑–∞ 3—á")
        return

    # üîπ –û—Ç—Å–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ 3—á
    df = df[df["closed_at"] >= from_ts_3h]

    # üîπ –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –∑–∞ 3—á (core set)
    grouped_3h = df.groupby("strategy_id")
    results = []

    for strategy_id, group in grouped_3h:
        trade_count = len(group)

        # üî∏ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —É—á—ë—Ç–æ–º –ª–µ–≤–µ—Ä–µ–¥–∂–∞
        leverage = float(infra.enabled_strategies.get(strategy_id, {}).get("leverage", 1))
        pnl_pct = (group["pnl"] * leverage / group["notional_value"] * 100).mean()

        # üî∏ Profit factor
        profit = group[group["pnl"] > 0]["pnl"].sum()
        loss = group[group["pnl"] < 0]["pnl"].sum()
        profit_factor = float(profit / abs(loss)) if loss < 0 else 0.0

        # üî∏ Win rate
        win_rate = float((group["pnl"] > 0).mean())

        # üî∏ Avg holding time (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        holding_durations = (group["closed_at"] - group["created_at"]).dt.total_seconds()
        avg_holding_time = holding_durations.mean() if not holding_durations.empty else 0.0

        # üî∏ Trend slope (–Ω–∞–∫–ª–æ–Ω equity –∫—Ä–∏–≤–æ–π)
        equity = group.sort_values("closed_at")["pnl"].cumsum()
        minutes = (group["closed_at"] - group["closed_at"].min()).dt.total_seconds() / 60
        slope = float(linregress(minutes, equity).slope) if len(group) >= 2 else 0.0

        # üî∏ Max drawdown
        peak = equity.cummax()
        drawdown = peak - equity
        max_drawdown = float(drawdown.max()) if not drawdown.empty else 0.0

        results.append({
            "strategy_id": strategy_id,
            "pnl_pct": pnl_pct,
            "trend_slope": slope,
            "profit_factor": profit_factor,
            "win_rate": win_rate,
            "max_drawdown": max_drawdown,
            "avg_holding_time": avg_holding_time,
            "trade_count": trade_count
        })

    if not results:
        log.warning("[STRATEGY_RATER] ‚ùå –ù–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ 3—á")
        return

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ –ª–æ–≥–∏—Ä—É–µ–º
    metrics_df = pd.DataFrame(results)
    avg_trade_count = metrics_df["trade_count"].mean()
    metrics_df["avg_trade_count"] = avg_trade_count

    log.debug(f"[STRATEGY_RATER] üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è {len(metrics_df)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (3—á –æ–∫–Ω–æ)")

    for row in metrics_df.itertuples():
        log.debug(
            f"[STRATEGY_RATER] ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {row.strategy_id} ‚Äî "
            f"pnl={row.pnl_pct:.2f}%, trades={row.trade_count}, "
            f"win={row.win_rate:.2f}, pf={row.profit_factor:.2f}, "
            f"slope={row.trend_slope:.2f}, ddraw={row.max_drawdown:.2f}, "
            f"hold={row.avg_holding_time:.1f}s"
        )

    # üîπ –†–∞—Å—á—ë—Ç speed_factor –∏ reliability_weight
    metrics_df["speed_factor"] = metrics_df["trade_count"].clip(upper=20) / 20.0
    metrics_df["reliability_weight"] = (
        np.log1p(metrics_df["trade_count"]) / np.log1p(metrics_df["avg_trade_count"])
    ).clip(upper=1.0)

    # üîπ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    def normalize(series):
        min_val = series.min()
        max_val = series.max()
        return (series - min_val) / (max_val - min_val + 1e-9)

    metrics_df["norm_pnl"] = normalize(metrics_df["pnl_pct"])
    metrics_df["norm_trend"] = normalize(metrics_df["trend_slope"])
    metrics_df["norm_pf"] = normalize(metrics_df["profit_factor"].fillna(0))
    metrics_df["norm_win"] = normalize(metrics_df["win_rate"])
    metrics_df["norm_ddraw"] = normalize(metrics_df["max_drawdown"])
    metrics_df["norm_hold"] = normalize(metrics_df["avg_holding_time"])

    # üîπ –†–µ–π—Ç–∏–Ω–≥
    metrics_df["raw_rating"] = (
        0.40 * metrics_df["norm_pnl"] * metrics_df["speed_factor"] +
        0.20 * metrics_df["norm_trend"] +
        0.15 * metrics_df["norm_pf"] +
        0.10 * metrics_df["norm_win"] -
        0.10 * metrics_df["norm_ddraw"] -
        0.05 * metrics_df["norm_hold"]
    )

    metrics_df["final_rating"] = metrics_df["raw_rating"] * metrics_df["reliability_weight"]

    # üîπ –û—Ç—Å–µ–∫–∞–µ–º —Å–ª–∞–±—ã–µ –ø–æ reliability
    before = len(metrics_df)
    metrics_df = metrics_df[metrics_df["reliability_weight"] >= 0.3]
    after = len(metrics_df)

    log.info(
        f"[STRATEGY_RATER] ‚öñÔ∏è –û—Å—Ç–∞–≤–ª–µ–Ω–æ {after} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ reliability_weight >= 0.3 (–∏–∑ {before})"
    )

    log.info("[STRATEGY_RATER] üßÆ –†–µ–π—Ç–∏–Ω–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞:")
    for row in metrics_df.itertuples():
        log.info(
            f"[STRATEGY_RATER] ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {row.strategy_id} ‚Äî "
            f"raw={row.raw_rating:.4f}, final={row.final_rating:.4f}, "
            f"weight={row.reliability_weight:.2f}, speed={row.speed_factor:.2f}"
        )
    # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ strategies_metrics_v4
    insert_query = """
        INSERT INTO strategies_metrics_v4 (
            strategy_id, ts,
            pnl_pct_3h, trend_slope_3h, profit_factor_3h, win_rate_3h,
            max_drawdown_3h, avg_holding_time_3h,
            trade_count_3h, avg_trade_count_3h,
            speed_factor, reliability_weight,
            raw_rating, final_rating
        )
        VALUES (
            $1, $2,
            $3, $4, $5, $6,
            $7, $8,
            $9, $10,
            $11, $12,
            $13, $14
        )
        ON CONFLICT DO NOTHING
    """

    async with infra.pg_pool.acquire() as conn:
        for row in metrics_df.itertuples():
            await conn.execute(
                insert_query,
                row.strategy_id, ts_now,
                float(row.pnl_pct), float(row.trend_slope), float(row.profit_factor or 0), float(row.win_rate),
                float(row.max_drawdown), float(row.avg_holding_time),
                int(row.trade_count), int(row.avg_trade_count),
                float(row.speed_factor), float(row.reliability_weight),
                float(row.raw_rating), float(row.final_rating)
            )

    log.info(f"[STRATEGY_RATER] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –≤ strategies_metrics_v4: {len(metrics_df)} —Å—Ç—Ä–æ–∫")
    # üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ final_rating)
    best_row = metrics_df.sort_values("final_rating", ascending=False).iloc[0]
    best_id = best_row.strategy_id
    best_rating = best_row.final_rating

    # üîπ –ó–∞–ø—Ä–æ—Å—ã
    query_last_active = """
        SELECT ts, ts_switch, strategy_id, rating
        FROM strategies_active_v4
        ORDER BY ts DESC
        LIMIT 1
    """

    insert_active = """
        INSERT INTO strategies_active_v4 (
            ts, ts_switch, strategy_id, rating, previous_strategy_id, reason
        )
        VALUES ($1, $1, $2, $3, $4, $5)
    """

    update_active = """
        UPDATE strategies_active_v4
        SET ts = $1, rating = $2, reason = $3
        WHERE strategy_id = $4
    """

    reset_top_flag = "UPDATE strategies_v4 SET top_strategy = FALSE"
    set_top_flag = "UPDATE strategies_v4 SET top_strategy = TRUE WHERE id = $1"

    async with infra.pg_pool.acquire() as conn:
        last_entry = await conn.fetchrow(query_last_active)

        if last_entry is None:
            # üü¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            await conn.execute(insert_active, ts_now, best_id, best_rating, None, "initial_selection")
            await conn.execute(reset_top_flag)
            await conn.execute(set_top_flag, best_id)
            log.info(f"[STRATEGY_RATER] üëë –°—Ç—Ä–∞—Ç–µ–≥–∏—è {best_id} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ '–ö–æ—Ä–æ–ª—å' ‚Äî –ø—Ä–∏—á–∏–Ω–∞: initial_selection")

        else:
            previous_id = last_entry["strategy_id"]
            minutes_passed = (ts_now - last_entry["ts_switch"]).total_seconds() / 60

            previous_rating_row = metrics_df.loc[metrics_df["strategy_id"] == previous_id, "final_rating"]
            previous_rating = float(previous_rating_row.iloc[0]) if not previous_rating_row.empty else float(last_entry["rating"])
            rating_diff = best_rating - previous_rating

            if best_id == previous_id:
                # üü¢ –ö–æ—Ä–æ–ª—å –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await conn.execute(update_active, ts_now, best_rating, "confirmed", best_id)
                await conn.execute(reset_top_flag)
                await conn.execute(set_top_flag, best_id)
                log.info(f"[STRATEGY_RATER] üëë –°—Ç—Ä–∞—Ç–µ–≥–∏—è {best_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–∞–∫ '–ö–æ—Ä–æ–ª—å' ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∏ –≤—Ä–µ–º—è")

            elif rating_diff >= 0.15 and minutes_passed >= 15:
                # üü¢ –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
                reason = f"switched (Œî={rating_diff:.4f}, {minutes_passed:.1f} –º–∏–Ω)"
                await conn.execute(insert_active, ts_now, best_id, best_rating, previous_id, reason)
                await conn.execute(reset_top_flag)
                await conn.execute(set_top_flag, best_id)
                log.info(f"[STRATEGY_RATER] üëë –°—Ç—Ä–∞—Ç–µ–≥–∏—è {best_id} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ '–ö–æ—Ä–æ–ª—å' ‚Äî –ø—Ä–∏—á–∏–Ω–∞: {reason}")

            else:
                # üü° –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä, –Ω–æ –Ω–µ –ø—Ä–æ—à—ë–ª —É—Å–ª–æ–≤–∏—è ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ
                await conn.execute(update_active, ts_now, previous_rating, "retained", previous_id)
                await conn.execute(reset_top_flag)
                await conn.execute(set_top_flag, previous_id)
                log.info(
                    f"[STRATEGY_RATER] üëë –°—Ç—Ä–∞—Ç–µ–≥–∏—è {best_id} ‚Äî –ª–∏–¥–µ—Ä, –Ω–æ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω "
                    f"(Œî rating: {rating_diff:.4f}, –ø—Ä–æ—à–ª–æ: {minutes_passed:.1f} –º–∏–Ω ‚Äî "
                    f"–Ω—É–∂–Ω–æ Œî ‚â• 0.15 –∏ ‚â• 15 –º–∏–Ω). –ö–æ—Ä–æ–ª—å {previous_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
                )