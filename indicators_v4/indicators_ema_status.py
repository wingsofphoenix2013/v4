# üî∏ indicators_ema_status.py ‚Äî –≠—Ç–∞–ø 1: –∫–∞—Ä–∫–∞—Å –≤–æ—Ä–∫–µ—Ä–∞ EMA Status (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ indicator_stream)

import os
import asyncio
import json
import logging
from datetime import datetime

# üî∏ –ö–æ–Ω—Ñ–∏–≥
READY_STREAM   = "indicator_stream"                             # —Å–ª—É—à–∞–µ–º —ç—Ç–æ—Ç —Å—Ç—Ä–∏–º
GROUP_NAME     = os.getenv("EMA_STATUS_GROUP", "ema_status_v1") # –Ω–∞—à–∞ consumer-group
CONSUMER_NAME  = os.getenv("EMA_STATUS_CONSUMER", "ema_status_1")
REQUIRED_TFS   = {"m5", "m15", "h1"}

DEBOUNCE_MS       = int(os.getenv("EMA_STATUS_DEBOUNCE_MS", "250"))
MAX_CONCURRENCY   = int(os.getenv("EMA_STATUS_MAX_CONCURRENCY", "64"))
MAX_PER_SYMBOL    = int(os.getenv("EMA_STATUS_MAX_PER_SYMBOL", "4"))
XREAD_BLOCK_MS    = int(os.getenv("EMA_STATUS_BLOCK_MS", "1000"))
XREAD_COUNT       = int(os.getenv("EMA_STATUS_COUNT", "50"))

# üî∏ –ü—É–ª –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
task_gate = asyncio.Semaphore(MAX_CONCURRENCY)
symbol_semaphores: dict[str, asyncio.Semaphore] = {}
bucket_tasks: dict[tuple, asyncio.Task] = {}

log = logging.getLogger("EMA_STATUS")


# üî∏ –£—Ç–∏–ª–∏—Ç—ã
def _iso_to_ms(iso_str: str) -> int:
    dt = datetime.fromisoformat(iso_str)
    return int(dt.timestamp() * 1000)


# üî∏ –ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ¬´–±–∞–∫–µ—Ç–∞¬ª (–≠—Ç–∞–ø 1: —Ç–æ–ª—å–∫–æ debounce –∏ –ª–æ–≥)
async def handle_bucket(symbol: str, tf: str, open_time_ms: int, redis, pg):
    # debounce: –∂–¥—ë–º –¥–æ–∑–∞–ø–∏—Å—å –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤/—Ü–µ–Ω—ã
    await asyncio.sleep(DEBOUNCE_MS / 1000)
    # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è: —Å–±–æ—Ä —Ñ–∏—á –∏–∑ TS ‚Üí —Ä–∞—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–∞ ‚Üí –∑–∞–ø–∏—Å—å –≤ Redis/PG
    log.info(f"[STAGE1] bucket done: {symbol}/{tf} @ {open_time_ms}")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: XREADGROUP –ø–æ indicator_stream, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–æ–≤
async def run_indicators_ema_status(pg, redis):
    log.info("EMA Status: init consumer-group")
    # —Å–æ–∑–¥–∞—Ç—å consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await redis.xgroup_create(READY_STREAM, GROUP_NAME, id="$", mkstream=True)
        log.info("‚úÖ consumer-group '%s' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ '%s'", GROUP_NAME, READY_STREAM)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è consumer-group '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", GROUP_NAME)
        else:
            log.exception("‚ùå XGROUP CREATE error: %s", e)
            raise

    log.info("üöÄ –≠—Ç–∞–ø 1: —Å–ª—É—à–∞–µ–º '%s' (group=%s, consumer=%s)", READY_STREAM, GROUP_NAME, CONSUMER_NAME)

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={READY_STREAM: ">"},
                count=XREAD_COUNT,
                block=XREAD_BLOCK_MS
            )
            if not resp:
                continue

            to_ack = []
            for _, messages in resp:
                for msg_id, data in messages:
                    try:
                        symbol = data.get("symbol")
                        tf      = data.get("timeframe") or data.get("interval")
                        status  = data.get("status")
                        open_iso= data.get("open_time")

                        # –±–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                        if not symbol or tf not in REQUIRED_TFS or status != "ready" or not open_iso:
                            to_ack.append(msg_id)
                            continue

                        open_ms = _iso_to_ms(open_iso)
                        bucket  = (symbol, tf, open_ms)

                        # –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                        if bucket in bucket_tasks and not bucket_tasks[bucket].done():
                            to_ack.append(msg_id)
                            continue

                        # –ª–∏–º–∏—Ç per-symbol
                        if symbol not in symbol_semaphores:
                            symbol_semaphores[symbol] = asyncio.Semaphore(MAX_PER_SYMBOL)

                        log.info("[READY] %s/%s @ %s ‚Üí schedule EMA-status", symbol, tf, open_iso)

                        async def bucket_runner():
                            async with task_gate:
                                async with symbol_semaphores[symbol]:
                                    await handle_bucket(symbol, tf, open_ms, redis, pg)

                        bucket_tasks[bucket] = asyncio.create_task(bucket_runner())
                        to_ack.append(msg_id)

                    except Exception as parse_err:
                        to_ack.append(msg_id)
                        log.exception("‚ùå message parse error: %s", parse_err)

            if to_ack:
                await redis.xack(READY_STREAM, GROUP_NAME, *to_ack)

        except Exception as e:
            log.exception("‚ùå XREADGROUP loop error: %s", e)
            await asyncio.sleep(1)