# cleanup_worker.py ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ TS/DB/Streams –¥–ª—è indicators_v4

import asyncio
import logging
from datetime import datetime, timedelta

log = logging.getLogger("IND_CLEANUP")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
TS_RETENTION_MS = 14 * 24 * 60 * 60 * 1000             # 14 —Å—É—Ç–æ–∫
DB_KEEP_DAYS    = 30                                   # 30 —Å—É—Ç–æ–∫
STREAM_LIMITS = {
    "indicator_stream_core": 10000,
    "indicator_stream":      10000,
    "iv4_inserted":          20000,
    "indicator_request":     10000,
    "indicator_response":    10000,
}

# üî∏ –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ ts_ind:* –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å RETENTION=14 —Å—É—Ç–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def enforce_ts_retention(redis):
    try:
        cursor = "0"
        pattern = "ts_ind:*"
        changed = 0
        while True:
            cursor, keys = await redis.scan(cursor=cursor, match=pattern, count=500)
            for k in keys:
                try:
                    await redis.execute_command("TS.ALTER", k, "RETENTION", TS_RETENTION_MS)
                    changed += 1
                except Exception as e:
                    log.warning(f"TS.ALTER {k} error: {e}")
            if cursor == "0":
                break
        log.debug(f"[TS] RETENTION=14d –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {changed} –∫–ª—é—á–∞–º ts_ind:*")
    except Exception as e:
        log.error(f"[TS] enforce_ts_retention error: {e}", exc_info=True)

# üî∏ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î (open_time < NOW()-30d)
async def cleanup_db(pg):
    try:
        async with pg.acquire() as conn:
            cutoff = DB_KEEP_DAYS
            # indicator_values_v4 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–Ω–ª–∞–π–Ω–∞
            res1 = await conn.execute(
                f"""
                DELETE FROM indicator_values_v4
                WHERE open_time < NOW() - INTERVAL '{cutoff} days'
                """
            )
        log.debug(f"[DB] indicator_values_v4 —É–¥–∞–ª–µ–Ω–æ: {res1}")
    except Exception as e:
        log.error(f"[DB] cleanup_db error: {e}", exc_info=True)

# üî∏ –¢—Ä–∏–º –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ö–≤–æ—Å—Ç–∞
async def trim_streams(redis):
    for key, maxlen in STREAM_LIMITS.items():
        try:
            trimmed = await redis.execute_command("XTRIM", key, "MAXLEN", "~", maxlen)
            log.debug(f"[STREAM] {key} ‚Üí XTRIM ~{maxlen}, —É–¥–∞–ª–µ–Ω–æ ~{trimmed}")
        except Exception as e:
            log.warning(f"[STREAM] {key} XTRIM error: {e}")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
async def run_indicators_cleanup(pg, redis):
    log.debug("IND_CLEANUP –∑–∞–ø—É—â–µ–Ω")
    # –¶–∏–∫–ª—ã: TS/Streams ‚Äî –ø–æ—á–∞—â–µ; –ë–î ‚Äî —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    last_db = datetime.min

    while True:
        try:
            # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äî TS retention –∏ —Å—Ç—Ä–∏–º—ã
            await enforce_ts_retention(redis)
            await trim_streams(redis)

            # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ‚Äî –ë–î
            now = datetime.utcnow()
            if (now - last_db) >= timedelta(days=1):
                await cleanup_db(pg)
                last_db = now

            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞

        except Exception as e:
            log.error(f"IND_CLEANUP loop error: {e}", exc_info=True)
            await asyncio.sleep(10)