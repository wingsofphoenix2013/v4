# cleanup_worker.py ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ TS/DB/Streams –¥–ª—è indicators_v4

import asyncio
import logging
from datetime import datetime, timedelta

log = logging.getLogger("IND_CLEANUP")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
TS_RETENTION_MS = 14 * 24 * 60 * 60 * 1000             # 14 —Å—É—Ç–æ–∫
DB_KEEP_DAYS    = 30                                   # 30 —Å—É—Ç–æ–∫
STREAM_LIMITS = {
    "indicator_stream_core": 10000,
    "indicator_stream":      10000,
    "iv4_inserted":          20000,
    "indicator_request":     10000,
    "indicator_response":    10000,
}

# üîπ –¢–∞–π–º-–±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ—Ç–µ–Ω—Ü–∏—é TS –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–∫–µ—Ä –Ω–∞–¥–æ–ª–≥–æ
TS_RETENTION_TIME_BUDGET_SEC = 30

# üîπ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —á–∏—Å—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ-MW —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
NON_MW_CLEANUP_PERIOD_HOURS = 4

# üî∏ –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ ts_ind:* –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å RETENTION=14 —Å—É—Ç–æ–∫ (—Å —Ç–∞–π–º-–±—é–¥–∂–µ—Ç–æ–º)
async def enforce_ts_retention(redis):
    """
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ RETENTION –Ω–∞ ts_ind:* —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN —Å count=500; –µ—Å–ª–∏ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        start = datetime.utcnow()
        cursor = "0"
        pattern = "ts_ind:*"
        changed = 0

        while True:
            cursor, keys = await redis.scan(cursor=cursor, match=pattern, count=500)
            for k in keys:
                try:
                    await redis.execute_command("TS.ALTER", k, "RETENTION", TS_RETENTION_MS)
                    changed += 1
                except Exception as e:
                    log.warning(f"TS.ALTER {k} error: {e}")

            if cursor == "0":
                break

            if (datetime.utcnow() - start).total_seconds() >= TS_RETENTION_TIME_BUDGET_SEC:
                log.debug(f"[TS] RETENTION pass time-budget reached, changed ~{changed}, will continue next loop")
                break

        if cursor == "0":
            log.debug(f"[TS] RETENTION=14d –ø—Ä–∏–º–µ–Ω—ë–Ω (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥), –∏–∑–º–µ–Ω–µ–Ω–æ ~{changed} –∫–ª—é—á–µ–π ts_ind:*")
    except Exception as e:
        log.error(f"[TS] enforce_ts_retention error: {e}", exc_info=True)

# üî∏ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î (open_time < NOW()-30d)
async def cleanup_db(pg):
    try:
        async with pg.acquire() as conn:
            cutoff = DB_KEEP_DAYS
            res1 = await conn.execute(
                f"""
                DELETE FROM indicator_values_v4
                WHERE open_time < NOW() - INTERVAL '{cutoff} days'
                """
            )
        log.debug(f"[DB] indicator_values_v4 —É–¥–∞–ª–µ–Ω–æ: {res1}")
    except Exception as e:
        log.error(f"[DB] cleanup_db error: {e}", exc_info=True)

# üî∏ –¢—Ä–∏–º –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ö–≤–æ—Å—Ç–∞
async def trim_streams(redis):
    for key, maxlen in STREAM_LIMITS.items():
        try:
            trimmed = await redis.execute_command("XTRIM", key, "MAXLEN", "~", maxlen)
            log.debug(f"[STREAM] {key} ‚Üí XTRIM ~{maxlen}, —É–¥–∞–ª–µ–Ω–æ ~{trimmed}")
        except Exception as e:
            log.warning(f"[STREAM] {key} XTRIM error: {e}")

# üî∏ –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ market_watcher
async def cleanup_positions_indicators_non_mw(pg):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ positions_indicators_stat –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö market_watcher = false.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç join –ø–æ strategy_id, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, —Ç–∞–∫ –∏ –ª—é–±—ã–µ —Å–ª—É—á–∞–π–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –±—É–¥—É—â–µ–º.
    """
    try:
        async with pg.acquire() as conn:
            res = await conn.execute(
                """
                DELETE FROM positions_indicators_stat pis
                USING strategies_v4 s
                WHERE pis.strategy_id = s.id
                  AND s.market_watcher = false
                """
            )
        log.debug(f"[DB] positions_indicators_stat (non-MW) —É–¥–∞–ª–µ–Ω–æ: {res}")
    except Exception as e:
        log.error(f"[DB] cleanup_positions_indicators_non_mw error: {e}", exc_info=True)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
async def run_indicators_cleanup(pg, redis):
    log.info("IND_CLEANUP started")
    last_db = datetime.min
    last_non_mw = datetime.min

    while True:
        try:
            # –∫–∞–∂–¥—ã–µ ~5 –º–∏–Ω—É—Ç ‚Äî TS retention –∏ —Å—Ç—Ä–∏–º—ã
            await enforce_ts_retention(redis)
            await trim_streams(redis)

            now = datetime.utcnow()

            # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ‚Äî –æ—á–∏—Å—Ç–∫–∞ indicator_values_v4
            if (now - last_db) >= timedelta(days=1):
                await cleanup_db(pg)
                last_db = now

            # —Ä–∞–∑ –≤ 4 —á–∞—Å–∞ ‚Äî —á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ market_watcher
            if (now - last_non_mw) >= timedelta(hours=NON_MW_CLEANUP_PERIOD_HOURS):
                await cleanup_positions_indicators_non_mw(pg)
                last_non_mw = now

            await asyncio.sleep(300)  # –ø–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç

        except Exception as e:
            log.error(f"IND_CLEANUP loop error: {e}", exc_info=True)
            await asyncio.sleep(10)