# cleanup_worker.py ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ TS/DB/Streams –¥–ª—è indicators_v4 (–æ—á–∏—â–µ–Ω–æ –æ—Ç positions_indicators_stat)

import asyncio
import logging
from datetime import datetime, timedelta

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("IND_CLEANUP")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
TS_RETENTION_MS = 14 * 24 * 60 * 60 * 1000             # 14 —Å—É—Ç–æ–∫
DB_KEEP_DAYS    = 30                                   # 30 —Å—É—Ç–æ–∫
STREAM_LIMITS = {
    "indicator_stream_core": 10000,
    "indicator_stream":      10000,
    "iv4_inserted":          20000,
    "indicator_request":     10000,
    "indicator_response":    10000,
}

# üî∏ –¢–∞–π–º-–±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ—Ç–µ–Ω—Ü–∏—é TS –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–∫–µ—Ä –Ω–∞–¥–æ–ª–≥–æ
TS_RETENTION_TIME_BUDGET_SEC = 30


# üî∏ –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ ts_ind:* –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å RETENTION=14 —Å—É—Ç–æ–∫ (—Å —Ç–∞–π–º-–±—é–¥–∂–µ—Ç–æ–º)
async def enforce_ts_retention(redis):
    """
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ RETENTION –Ω–∞ ts_ind:* —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN —Å count=500; –µ—Å–ª–∏ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (changed_count: int, finished_pass: bool).
    """
    try:
        start = datetime.utcnow()
        cursor = "0"
        pattern = "ts_ind:*"
        changed = 0

        while True:
            cursor, keys = await redis.scan(cursor=cursor, match=pattern, count=500)
            for k in keys:
                try:
                    await redis.execute_command("TS.ALTER", k, "RETENTION", TS_RETENTION_MS)
                    changed += 1
                except Exception as e:
                    log.warning(f"TS.ALTER {k} error: {e}")

            if cursor == "0":
                # –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω
                log.debug(f"[TS] RETENTION=14d –ø—Ä–∏–º–µ–Ω—ë–Ω (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥), –∏–∑–º–µ–Ω–µ–Ω–æ ~{changed} –∫–ª—é—á–µ–π ts_ind:*")
                return changed, True

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–±—é–¥–∂–µ—Ç–∞
            if (datetime.utcnow() - start).total_seconds() >= TS_RETENTION_TIME_BUDGET_SEC:
                log.debug(f"[TS] RETENTION pass time-budget reached, changed ~{changed}, will continue next loop")
                return changed, False

    except Exception as e:
        log.error(f"[TS] enforce_ts_retention error: {e}", exc_info=True)
        return 0, False


# üî∏ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î (open_time < NOW()-30d)
async def cleanup_db(pg):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å), –∏–Ω–∞—á–µ None.
    """
    try:
        async with pg.acquire() as conn:
            cutoff = DB_KEEP_DAYS
            res = await conn.execute(
                f"""
                DELETE FROM indicator_values_v4
                WHERE open_time < NOW() - INTERVAL '{cutoff} days'
                """
            )
        # res –æ–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 'DELETE <n>'
        try:
            deleted = int(res.split()[-1])
        except Exception:
            deleted = None
        log.debug(f"[DB] indicator_values_v4 —É–¥–∞–ª–µ–Ω–æ: {res}")
        return deleted
    except Exception as e:
        log.error(f"[DB] cleanup_db error: {e}", exc_info=True)
        return None


# üî∏ –¢—Ä–∏–º –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ö–≤–æ—Å—Ç–∞
async def trim_streams(redis):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç XTRIM –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {stream: trimmed_count}.
    """
    results = {}
    for key, maxlen in STREAM_LIMITS.items():
        try:
            trimmed = await redis.execute_command("XTRIM", key, "MAXLEN", "~", maxlen)
            results[key] = int(trimmed) if trimmed is not None else 0
            log.debug(f"[STREAM] {key} ‚Üí XTRIM ~{maxlen}, —É–¥–∞–ª–µ–Ω–æ ~{trimmed}")
        except Exception as e:
            log.warning(f"[STREAM] {key} XTRIM error: {e}")
            results[key] = 0
    return results


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
async def run_indicators_cleanup(pg, redis):
    log.info("IND_CLEANUP: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    last_db = datetime.min

    while True:
        try:
            # –∫–∞–∂–¥—ã–µ ~5 –º–∏–Ω—É—Ç ‚Äî TS retention –∏ —Å—Ç—Ä–∏–º—ã
            changed, finished = await enforce_ts_retention(redis)
            trim_stats = await trim_streams(redis)

            # –∏—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ-–º–µ—Ç—Ä–∏–∫–∞ –ø–æ –ø—Ä–æ—Ö–æ–¥—É —Ä–µ—Ç–µ–Ω—Ü–∏–∏/—Å—Ç—Ä–∏–º–∞–º
            total_trimmed = sum(trim_stats.values())
            log.info(
                f"IND_CLEANUP: TS_RETENTION changed={changed}, full_pass={finished}; "
                f"Streams trimmed total={total_trimmed} ({', '.join(f'{k}:{v}' for k,v in trim_stats.items())})"
            )

            now = datetime.utcnow()

            # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ‚Äî –æ—á–∏—Å—Ç–∫–∞ indicator_values_v4
            if (now - last_db) >= timedelta(days=1):
                deleted = await cleanup_db(pg)
                if deleted is not None:
                    log.info(f"IND_CLEANUP: DB purge indicator_values_v4 ‚Äî deleted={deleted} rows (older than {DB_KEEP_DAYS}d)")
                else:
                    log.info(f"IND_CLEANUP: DB purge indicator_values_v4 ‚Äî completed (older than {DB_KEEP_DAYS}d)")
                last_db = now

            await asyncio.sleep(300)  # –ø–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç

        except Exception as e:
            log.error(f"IND_CLEANUP loop error: {e}", exc_info=True)
            await asyncio.sleep(10)