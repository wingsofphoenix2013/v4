# indicator_livestream.py ‚Äî –≤–æ—Ä–∫–µ—Ä ¬´–∂–∏–≤—ã—Ö¬ª –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–æ (symbol, TF) —Ä–∞–∑ –≤ 60—Å, –ø—É–±–ª–∏–∫—É–µ—Ç –±–∞—Ç—á –≤ Stream –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–∏—à–µ—Ç KV

import asyncio
import json
import logging
import time
from datetime import datetime
import pandas as pd

# üî∏ –ò–º–ø–æ—Ä—Ç—ã –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤
from indicators.compute_and_store import compute_snapshot_values_async

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("IND_LIVESTREAM")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã TF, —à–∞–≥–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã live-—Ç–∏–∫–µ—Ä–∞
STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}
STEP_MS  = {"m5": 300_000, "m15": 900_000, "h1": 3_600_000}

LIVE_TICK_SEC    = 30       # –ø–µ—Ä–∏–æ–¥ live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
LIVE_TTL_SEC     = 90       # TTL ind_live:* (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ KV)
LIVE_DEPTH_BARS  = 800      # –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è live-—Ä–∞—Å—á—ë—Ç–æ–≤
LIVE_CONCURRENCY = 30       # —Å–µ–º–∞—Ñ–æ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞–º TF

# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è live –≤ Stream –∏/–∏–ª–∏ –≤ KV
LIVE_PUBLISH_STREAM = True                # XADD –≤ indicator_live_stream (–¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤)
LIVE_WRITE_KV       = False               # –ø–∏—Å–∞—Ç—å ind_live:* (–æ–±—ã—á–Ω–æ False, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ)

# üî∏ –ò–º–µ–Ω–∞ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ö—Ä–∞–Ω–∏–ª–∏—â
BB_TS_PREFIX      = "bb:ts"               # bb:ts:{symbol}:{interval}:{field}
IND_LIVE_PREFIX   = "ind_live"            # ind_live:{symbol}:{tf}:{param}
LIVE_STREAM_NAME  = "indicator_live_stream"  # Stream —Å –±–∞—Ç—á-—Å–æ–±—ã—Ç–∏—è–º–∏ –ø–æ (symbol, TF)

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –±–∞—Ä–∞ (UTC, –º—Å)
def floor_to_bar(ts_ms: int, tf: str) -> int:
    step = STEP_MS[tf]
    return (ts_ms // step) * step


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ Redis TS (–æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º) –∏ —Å–±–æ—Ä–∫–∞ DataFrame
async def load_ohlcv_df(redis, symbol: str, tf: str, end_ts_ms: int, bars: int):
    if tf not in STEP_MS:
        return None

    step = STEP_MS[tf]
    start_ts = end_ts_ms - (bars - 1) * step

    fields = ["o", "h", "l", "c", "v"]
    keys = {f: f"{BB_TS_PREFIX}:{symbol}:{tf}:{f}" for f in fields}

    # –æ–¥–∏–Ω –±–∞—Ç—á –Ω–∞ 5 TS.RANGE
    tasks = {f: redis.execute_command("TS.RANGE", keys[f], start_ts, end_ts_ms) for f in fields}
    results = await asyncio.gather(*tasks.values(), return_exceptions=True)

    series = {}
    for f, res in zip(tasks.keys(), results):
        if isinstance(res, Exception):
            log.warning(f"[TS] RANGE {keys[f]} error: {res}")
            continue
        if res:
            try:
                series[f] = {int(ts): float(val) for ts, val in res if val is not None}
            except Exception as e:
                log.warning(f"[TS] parse {keys[f]} error: {e}")

    if not series or "c" not in series or not series["c"]:
        return None

    # –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ –º–µ—Ç–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏
    idx = sorted(series["c"].keys())
    df = None
    for f in fields:
        col_map = series.get(f, {})
        s = pd.Series({ts: col_map.get(ts) for ts in idx})
        s.index = pd.to_datetime(s.index, unit="ms")
        s.name = f
        df = s.to_frame() if df is None else df.join(s, how="outer")

    if df is None or df.empty:
        return None

    df.index.name = "open_time"
    return df.sort_index()


# üî∏ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–∏–∫–ª–æ–≤ –ø–æ (symbol, timeframe)
class TFManager:
    def __init__(self, pg, redis, get_instances_by_tf, get_precision, get_active_symbols):
        self.pg = pg
        self.redis = redis
        self.get_instances_by_tf = get_instances_by_tf
        self.get_precision = get_precision
        self.get_active_symbols = get_active_symbols

        # (symbol, tf) -> asyncio.Task
        self.tasks = {}

    def _key(self, symbol: str, tf: str):
        return (symbol, tf)

    def is_running(self, symbol: str, tf: str) -> bool:
        t = self.tasks.get(self._key(symbol, tf))
        return t is not None and not t.done()

    async def start_or_restart(self, symbol: str, tf: str):
        if tf not in STEP_MIN:
            return
        key = self._key(symbol, tf)

        # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã ¬´—Ñ–∞–∑–∞¬ª —à–ª–∞ –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ (+60—Å)
        prev = self.tasks.get(key)
        if prev and not prev.done():
            prev.cancel()
            try:
                await prev
            except asyncio.CancelledError:
                # –æ–∂–∏–¥–∞–µ–º–∞—è –æ—Ç–º–µ–Ω–∞ ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
                pass
            except Exception:
                pass

        task = asyncio.create_task(self._tf_loop(symbol, tf))
        self.tasks[key] = task
        log.debug(f"[START] {symbol}/{tf}: live-—Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω (–ø–µ—Ä–≤—ã–π —Ç–∏–∫ —á–µ—Ä–µ–∑ {LIVE_TICK_SEC}s)")

    async def stop_symbol(self, symbol: str):
        # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ TF –ø–æ —Å–∏–º–≤–æ–ª—É
        to_stop = [k for k in self.tasks.keys() if k[0] == symbol]
        for key in to_stop:
            t = self.tasks.pop(key, None)
            if t:
                t.cancel()
                try:
                    await t
                except asyncio.CancelledError:
                    pass
                except Exception:
                    pass
                log.debug(f"[STOP] {key[0]}/{key[1]}: live-—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _tf_loop(self, symbol: str, tf: str):
        # –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏: –ø–µ—Ä–≤—ã–π live-—Ç–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ iv4_inserted
        try:
            sem = asyncio.Semaphore(LIVE_CONCURRENCY)

            while True:
                t0 = time.monotonic()

                try:
                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞
                    if symbol not in set(self.get_active_symbols()):
                        log.debug(f"[SKIP] {symbol}/{tf}: —Å–∏–º–≤–æ–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        await asyncio.sleep(LIVE_TICK_SEC)
                        continue

                    # 1) –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV
                    now_ms = int(datetime.utcnow().timestamp() * 1000)
                    bar_open_ms = floor_to_bar(now_ms, tf)

                    t_fetch0 = time.monotonic()
                    df = await load_ohlcv_df(self.redis, symbol, tf, bar_open_ms, LIVE_DEPTH_BARS)
                    t_fetch1 = time.monotonic()

                    if df is None or df.empty:
                        log.debug(f"[SKIP] {symbol}/{tf}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è live-—Ç–∏–∫–∞")
                        await asyncio.sleep(LIVE_TICK_SEC)
                        continue

                    # 2) —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ TF (–∏–∑ in-memory –∫—ç—à–∞)
                    instances = self.get_instances_by_tf(tf)
                    if not instances:
                        log.debug(f"[SKIP] {symbol}/{tf}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ TF")
                        await asyncio.sleep(LIVE_TICK_SEC)
                        continue

                    # 3) —Ä–∞—Å—á—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º TF (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º)
                    precision = self.get_precision(symbol) or 8

                    async def run_one(inst):
                        # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É df
                        async with sem:
                            return inst["id"], inst["indicator"], inst["params"], await compute_snapshot_values_async(inst, symbol, df, precision)

                    t_comp0 = time.monotonic()
                    results = await asyncio.gather(*[run_one(inst) for inst in instances], return_exceptions=True)
                    t_comp1 = time.monotonic()

                    # —Å–æ–±—Ä–∞—Ç—å –±–∞—Ç—á –¥–ª—è Stream: —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    instances_payload = []
                    params_written = 0  # –±—É–¥–µ—Ç >0 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–º KV

                    for res in results:
                        if isinstance(res, Exception):
                            continue
                        iid, indicator, params, values = res
                        if not values:
                            continue
                        instances_payload.append({
                            "instance_id": iid,
                            "indicator": indicator,
                            "params": params,
                            "values": values,  # dict param_name -> —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        })

                    # 4a) –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Stream (–æ–¥–∏–Ω XADD –Ω–∞ —Ç–∏–∫ –ø–æ (symbol, TF))
                    t_pub0 = time.monotonic()
                    if LIVE_PUBLISH_STREAM and instances_payload:
                        try:
                            await self.redis.xadd(LIVE_STREAM_NAME, {
                                "symbol": symbol,
                                "timeframe": tf,
                                "tick_open_time": datetime.utcfromtimestamp(bar_open_ms / 1000).isoformat(),
                                "instances": json.dumps(instances_payload),
                                "precision": str(precision),
                            })
                        except Exception as e:
                            log.warning(f"[STREAM] XADD {LIVE_STREAM_NAME} error for {symbol}/{tf}: {e}")
                    t_pub1 = time.monotonic()

                    # 4b) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞–ø–∏—Å—å ind_live:* (–æ–¥–Ω–∏–º pipeline), –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ LIVE_WRITE_KV
                    t_write0 = t_write1 = time.monotonic()
                    if LIVE_WRITE_KV and instances_payload:
                        pipe = self.redis.pipeline()
                        for item in instances_payload:
                            values = item.get("values") or {}
                            for pname, sval in values.items():
                                rkey = f"{IND_LIVE_PREFIX}:{symbol}:{tf}:{pname}"
                                pipe.set(rkey, sval, ex=LIVE_TTL_SEC)
                                params_written += 1
                        t_write0 = time.monotonic()
                        if params_written > 0:
                            await pipe.execute()
                        t_write1 = time.monotonic()

                    # 5) –ª–æ–≥ –∏—Ç–æ–≥–∞ —Ç–∏–∫–∞
                    fetch_ms  = int((t_fetch1 - t_fetch0) * 1000)
                    comp_ms   = int((t_comp1  - t_comp0) * 1000)
                    pub_ms    = int((t_pub1   - t_pub0) * 1000) if LIVE_PUBLISH_STREAM and instances_payload else 0
                    write_ms  = int((t_write1 - t_write0) * 1000) if params_written > 0 else 0
                    total_ms  = int((time.monotonic() - t0) * 1000)

                    log.debug(
                        f"[LIVE] {symbol}/{tf}: instances={len(instances_payload)}/{len(instances)}, "
                        f"stream_ms={pub_ms}, kv_params={params_written}, fetch_ms={fetch_ms}, "
                        f"compute_ms={comp_ms}, write_ms={write_ms}, total_ms={total_ms}"
                    )

                except asyncio.CancelledError:
                    log.debug(f"[CANCEL] {symbol}/{tf}: live-—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return
                except Exception as e:
                    log.warning(f"[ERR] {symbol}/{tf}: –æ—à–∏–±–∫–∞ live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)

                # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ live-—Ç–∏–∫–∞
                await asyncio.sleep(LIVE_TICK_SEC)

        except asyncio.CancelledError:
            log.debug(f"[CANCEL:init] {symbol}/{tf}: live-—Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω/–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ä—Ç–µ")
            return


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç iv4_inserted –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∞–º–∏ –ø–æ (symbol, TF)
async def run_indicator_livestream(pg, redis, get_instances_by_tf, get_precision, get_active_symbols):
    log.debug("IND_LIVESTREAM: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    mgr = TFManager(pg, redis, get_instances_by_tf, get_precision, get_active_symbols)

    stream = "iv4_inserted"
    group = "ind_live_tf_group"
    consumer = "ind_live_tf_1"

    # —Å–æ–∑–¥–∞—Ç—å consumer-group –¥–ª—è iv4_inserted
    try:
        await redis.xgroup_create(stream, group, id="$", mkstream=True)
    except Exception as e:
        if "BUSYGROUP" not in str(e):
            log.warning(f"xgroup_create error: {e}")

    # üî∏ –ë–£–¢–°–¢–†–ê–ü: —Å—Ç–∞—Ä—Ç—É–µ–º live-—Ü–∏–∫–ª—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ TF —Å –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏ (–ø–µ—Ä–≤—ã–π —Ç–∏–∫ —á–µ—Ä–µ–∑ 60—Å)
    try:
        symbols = get_active_symbols()
        tfs_with_instances = [tf for tf in ("m5", "m15", "h1") if get_instances_by_tf(tf)]
        started = 0
        for tf in tfs_with_instances:
            for sym in symbols:
                try:
                    await mgr.start_or_restart(sym, tf)  # _tf_loop —Å–∞–º –∂–¥—ë—Ç 60—Å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ç–∏–∫–æ–º
                    started += 1
                except asyncio.CancelledError:
                    # –æ–∂–∏–¥–∞–µ–º–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    pass
        log.debug(f"[BOOT] live-—Ü–∏–∫–ª—ã –∑–∞–ø—É—â–µ–Ω—ã: symbols={len(symbols)}, tfs={tfs_with_instances}, tasks={started}")
    except Exception as e:
        log.warning(f"[BOOT] –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ live-—Ü–∏–∫–ª–æ–≤: {e}", exc_info=True)

    # üî∏ –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π open_time –ø–æ (symbol, TF), —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Ü–∏–∫–ª –Ω–∞ —Ç–æ—Ç –∂–µ –±–∞—Ä
    last_open_time: dict[tuple[str, str], datetime] = {}

    while True:
        try:
            resp = await redis.xreadgroup(group, consumer, streams={stream: ">"}, count=200, block=2000)
            if not resp:
                continue

            to_ack = []
            latest: dict[tuple[str, str], datetime | None] = {}  # (symbol, interval) -> max(open_time) –∏–ª–∏ None

            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        symbol = data.get("symbol")
                        interval = data.get("interval")  # m5/m15/h1
                        open_time_iso = data.get("open_time")

                        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                        if not symbol or interval not in STEP_MIN:
                            continue

                        # –±–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π open_time –≤ –±–∞—Ç—á–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (symbol, TF)
                        key = (symbol, interval)
                        ot = None
                        if open_time_iso:
                            try:
                                ot = datetime.fromisoformat(open_time_iso)
                            except Exception:
                                ot = None

                        if key not in latest:
                            latest[key] = ot
                        else:
                            if ot is not None:
                                if latest[key] is None or ot > latest[key]:
                                    latest[key] = ot

                    except Exception as e:
                        log.warning(f"[STREAM] parse iv4_inserted error: {e}")

            # –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –Ω–∞ –±–∞—Ä –∏ –æ–¥–Ω—É –ø–∞—Ä—É (symbol, TF)
            for (symbol, interval), ot in latest.items():
                try:
                    # –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if ot is not None and last_open_time.get((symbol, interval)) == ot:
                        continue
                    if ot is not None:
                        last_open_time[(symbol, interval)] = ot

                    try:
                        await mgr.start_or_restart(symbol, interval)
                    except asyncio.CancelledError:
                        pass

                except Exception as e:
                    log.warning(f"[STREAM] start_or_restart error for {symbol}/{interval}: {e}")

            if to_ack:
                await redis.xack(stream, group, *to_ack)

        except Exception as e:
            log.error(f"[STREAM] iv4_inserted loop error: {e}", exc_info=True)
            await asyncio.sleep(2)