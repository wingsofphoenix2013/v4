# indicator_lrpostproc.py ‚Äî –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ live-LR: 12-–∫–æ—Ä–∑–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞, bucket_delta, —Ç—Ä–µ–Ω–¥ —É–≥–ª–∞ (¬±5% –æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ) ‚Üí –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∫–ª—é—á

import asyncio
import json
import logging
from datetime import datetime

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("IND_LR_POST")

# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LIVE_STREAM_NAME = "indicator_live_stream"   # batched-—Å–æ–±—ã—Ç–∏—è –æ—Ç indicator_livestream
GROUP_NAME       = "lr_post_group"           # consumer-group –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
CONSUMER_NAME    = "lr_post_1"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TF
STEP_MS = {"m5": 300_000, "m15": 900_000, "h1": 3_600_000}

# üî∏ TTL –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ live-–∫–ª—é—á–∞ (—Å–µ–∫)
LIVE_TTL_SEC = 30

# üî∏ –ü–æ—Ä–æ–≥ ¬´—Ç–∞–∫–æ–π –∂–µ —É–≥–æ–ª¬ª: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ <= 5%
ANGLE_FLAT_REL = 0.05
ANGLE_ABS_EPS  = 1e-6  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å

# üî∏ –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º –∏ –∫–ª—é—á–∞–º
def lr_base_from_params(params: dict) -> str:
    length = int(params["length"])
    return f"lr{length}"

def lr_pack_key(symbol: str, tf: str, base: str) -> str:
    # –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π live-–∫–ª—é—á –¥–ª—è LR
    return f"lrpos_pack:{symbol}:{tf}:{base}"

def ind_key(symbol: str, tf: str, param_name: str) -> str:
    return f"ind:{symbol}:{tf}:{param_name}"

def ts_ind_key(symbol: str, tf: str, param_name: str) -> str:
    return f"ts_ind:{symbol}:{tf}:{param_name}"

def ts_close_key(symbol: str, tf: str) -> str:
    return f"bb:ts:{symbol}:{tf}:c"

def mark_price_key(symbol: str) -> str:
    return f"bb:price:{symbol}"

# üî∏ –£—Ç–∏–ª–∏—Ç—ã (–∫–æ—Ä–∑–∏–Ω—ã/–¥–∏–Ω–∞–º–∏–∫–∏)
def clamp(v, lo, hi):
    return hi if v > hi else lo if v < lo else v

def classify_bucket_delta(d: int) -> str:
    if d == 0: return "no_change"
    if d == 1: return "up_1"
    if d == 2: return "up_2"
    if d >= 3: return "up_strong"
    if d == -1: return "down_1"
    if d == -2: return "down_2"
    if d <= -3: return "down_strong"
    return "no_change"

def compute_bucket_12(price: float, lower: float, upper: float) -> int | None:
    # –Ω—É–º–µ—Ä–∞—Ü–∏—è 0..11 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑:
    # 0/1 ‚Äî –Ω–∞–¥, 2..9 ‚Äî –≤–Ω—É—Ç—Ä–∏ (—Å–≤–µ—Ä—Ö—É‚Üí–≤–Ω–∏–∑), 10/11 ‚Äî –ø–æ–¥
    width = upper - lower
    if width <= 0:
        return None
    seg = width / 8.0
    top1 = upper + seg
    top2 = upper + 2 * seg
    bot1 = lower - seg
    bot2 = lower - 2 * seg

    if price >= top2:
        return 0
    if price >= upper:  # [upper, top2)
        return 1

    if price >= lower:  # [lower, upper)
        k = int((upper - price) // seg)  # 0..7 (0 ‚Äî —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç)
        k = clamp(k, 0, 7)
        return 2 + int(k)

    if price >= bot1:  # [bot1, lower)
        return 10
    return 11

def classify_angle_trend(angle_live: float, angle_closed: float) -> tuple[str, float]:
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (trend, delta), –≥–¥–µ trend ‚àà {"up","down","flat"} –ø–æ –ø—Ä–∞–≤–∏–ª—É 5% –æ—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ
    delta = angle_live - angle_closed
    denom = abs(angle_closed)
    if denom < ANGLE_ABS_EPS:
        # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–π —É–≥–æ–ª ~0, —Å—á–∏—Ç–∞–µ–º "flat", –µ—Å–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –¥–µ–ª—å—Ç–∞ –æ—á–µ–Ω—å –º–∞–ª–∞
        if abs(delta) <= ANGLE_ABS_EPS:
            return "flat", delta
        # –∏–Ω–∞—á–µ –∑–Ω–∞–∫ –¥–µ–ª—å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        return ("up" if delta > 0 else "down"), delta

    rel = abs(delta) / denom
    if rel <= ANGLE_FLAT_REL:
        return "flat", delta
    return ("up" if delta > 0 else "down"), delta

# üî∏ –î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω–∞–º/–∑–∞–∫—Ä—ã—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
async def fetch_mark_or_last_close(redis, symbol: str, tf: str) -> float | None:
    mp = await redis.get(mark_price_key(symbol))
    if mp is not None:
        try:
            return float(mp)
        except Exception:
            pass
    try:
        res = await redis.execute_command("TS.GET", ts_close_key(symbol, tf))
        if res and len(res) == 2:
            return float(res[1])
    except Exception:
        pass
    return None

async def fetch_closed_close(redis, symbol: str, tf: str, last_closed_ms: int) -> float | None:
    try:
        res = await redis.execute_command("TS.RANGE", ts_close_key(symbol, tf), last_closed_ms, last_closed_ms)
        if res:
            return float(res[0][1])
    except Exception:
        pass
    return None

async def fetch_closed_lr(redis, symbol: str, tf: str, base: str) -> dict:
    out = {}
    try:
        up = await redis.get(ind_key(symbol, tf, f"{base}_upper"))
        lo = await redis.get(ind_key(symbol, tf, f"{base}_lower"))
        ct = await redis.get(ind_key(symbol, tf, f"{base}_center"))
        ang = await redis.get(ind_key(symbol, tf, f"{base}_angle"))
        if up is not None: out["upper"] = float(up)
        if lo is not None: out["lower"] = float(lo)
        if ct is not None: out["center"] = float(ct)
        if ang is not None: out["angle"] = float(ang)
    except Exception:
        pass
    return out

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ LR
async def run_indicator_lrpostproc(pg, redis):
    log.debug("IND_LR_POST: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    # —Å–æ–∑–¥–∞—Ç—å consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await redis.xgroup_create(LIVE_STREAM_NAME, GROUP_NAME, id="$", mkstream=True)
    except Exception as e:
        if "BUSYGROUP" not in str(e):
            log.warning(f"xgroup_create error: {e}")

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={LIVE_STREAM_NAME: ">"},
                count=100,
                block=2000
            )
            if not resp:
                continue

            to_ack = []
            total_processed = 0
            total_written = 0

            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        symbol = data.get("symbol")
                        tf = data.get("timeframe")
                        tick_open_iso = data.get("tick_open_time")
                        instances_raw = data.get("instances")
                        if not symbol or tf not in STEP_MS or not instances_raw:
                            continue

                        try:
                            instances = json.loads(instances_raw) if isinstance(instances_raw, str) else instances_raw
                        except Exception:
                            continue

                        # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ LR-–∏–Ω—Å—Ç–∞–Ω—Å—ã
                        lr_items = [x for x in instances if str(x.get("indicator")) == "lr"]
                        if not lr_items:
                            continue

                        # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –±–∞—Ä–∞
                        last_closed_ms = None
                        try:
                            if tick_open_iso:
                                t = datetime.fromisoformat(tick_open_iso)
                                step = STEP_MS[tf]
                                last_closed_ms = int((t.timestamp() * 1000) - step)
                        except Exception:
                            last_closed_ms = None

                        # live-—Ü–µ–Ω–∞
                        live_price = await fetch_mark_or_last_close(redis, symbol, tf)

                        pipe = redis.pipeline()
                        writes = 0

                        for item in lr_items:
                            params = item.get("params") or {}
                            values = item.get("values") or {}
                            try:
                                base = lr_base_from_params(params)
                            except Exception:
                                continue

                            # live LR-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                            try:
                                up_live = float(values.get(f"{base}_upper"))
                                lo_live = float(values.get(f"{base}_lower"))
                                ct_live = float(values.get(f"{base}_center"))
                                ang_live = float(values.get(f"{base}_angle"))
                            except Exception:
                                continue

                            # –∫–æ—Ä–∑–∏–Ω—ã: live –∏ –∑–∞–∫—Ä—ã—Ç–∞—è
                            bucket_live = None
                            if live_price is not None:
                                bucket_live = compute_bucket_12(live_price, lo_live, up_live)

                            bucket_closed = None
                            closed = {}
                            if last_closed_ms is not None:
                                closed = await fetch_closed_lr(redis, symbol, tf, base)
                                if "upper" in closed and "lower" in closed:
                                    close_closed = await fetch_closed_close(redis, symbol, tf, last_closed_ms)
                                    if close_closed is not None:
                                        bucket_closed = compute_bucket_12(close_closed, closed["lower"], closed["upper"])

                            bucket_delta = "unknown"
                            if bucket_live is not None and bucket_closed is not None:
                                d = int(bucket_live - bucket_closed)
                                bucket_delta = classify_bucket_delta(d)

                            # –¥–∏–Ω–∞–º–∏–∫–∞ —É–≥–ª–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ live vs closed (5% –ø—Ä–∞–≤–∏–ª–æ)
                            angle_trend = "unknown"
                            angle_delta = None
                            if "angle" in closed:
                                trend, d_ang = classify_angle_trend(ang_live, closed["angle"])
                                angle_trend = trend
                                angle_delta = d_ang

                            # –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
                            pack = {
                                "bucket": bucket_live if bucket_live is not None else None,
                                "bucket_delta": bucket_delta,
                                "angle": f"{ang_live:.5f}",
                                "angle_delta": (f"{angle_delta:.5f}" if angle_delta is not None else None),
                                "angle_trend": angle_trend,
                                # –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è
                                "price": (f"{live_price:.8f}" if live_price is not None else None),
                                "lower": f"{lo_live:.8f}",
                                "upper": f"{up_live:.8f}",
                                "center": f"{ct_live:.8f}",
                            }

                            pipe.set(lr_pack_key(symbol, tf, base), json.dumps(pack), ex=LIVE_TTL_SEC)
                            writes += 1
                            total_processed += 1

                        if writes:
                            await pipe.execute()
                            total_written += writes

                    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–∞ —Ü–∏–∫–ª–∞
                    except Exception as e:
                        log.warning(f"[LR_POST] –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–ª–∞—Å—å: {e}", exc_info=True)

            if to_ack:
                await redis.xack(LIVE_STREAM_NAME, GROUP_NAME, *to_ack)

            if total_processed or total_written:
                log.info(f"IND_LR_POST: processed={total_processed}, written={total_written}")

        except Exception as e:
            log.error(f"IND_LR_POST loop error: {e}", exc_info=True)
            await asyncio.sleep(2)