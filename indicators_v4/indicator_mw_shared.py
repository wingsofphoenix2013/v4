# indicator_mw_shared.py ‚Äî –æ–±—â–∏–π —Å–ª–æ–π –ø—Ä–∞–≤–∏–ª –¥–ª—è MarketWatch (–≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å + dwell) –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—à–ª–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

import json
from datetime import datetime

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ—Ä–æ–≥–æ–≤ (–Ω–∞—á–∏–Ω–∞–µ–º —Å Trend; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –¥–æ–±–∞–≤–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö)
TREND_ADX_SIDEWAYS_IN  = 12.0  # –≤—Ö–æ–¥ –≤–æ —Ñ–ª–µ—Ç: max(ADX) < IN
TREND_ADX_SIDEWAYS_OUT = 14.0  # –≤—ã—Ö–æ–¥ –∏–∑ —Ñ–ª—ç—Ç–∞: max(ADX) ‚â• OUT

# üî∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –±–∞—Ä–∞—Ö) –ø–æ TF
TREND_MIN_STREAK = {"m5": 2, "m15": 1, "h1": 1}

# üî∏ –ò–º—è KV –∫–ª—é—á–∞ MarketWatch
def kv_key(kind: str, symbol: str, tf: str) -> str:
    return f"ind_mw:{symbol}:{tf}:{kind}"


# üî∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ KV (state, streak)
async def load_prev_state(redis, kind: str, symbol: str, tf: str) -> tuple[str | None, int]:
    """
    –ß–∏—Ç–∞–µ—Ç KV ind_mw:{symbol}:{tf}:{kind}.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (prev_state | None, prev_streak:int).
    """
    try:
        key = kv_key(kind, symbol, tf)
        raw = await redis.get(key)
        if not raw:
            return None, 0
        data = json.loads(raw)
        prev_state = data.get("state")
        details = data.get("details") or {}
        prev_streak = int(details.get("streak") or 0)
        return prev_state, prev_streak
    except Exception:
        return None, 0


# üî∏ –ü–æ—Ä–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Trend –¥–ª—è TF
def trend_thresholds(tf: str) -> dict:
    return {
        "adx_in": TREND_ADX_SIDEWAYS_IN,
        "adx_out": TREND_ADX_SIDEWAYS_OUT,
        "min_streak": TREND_MIN_STREAK.get(tf, 2),
    }


# üî∏ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å –∏ dwell –¥–ª—è Trend
def apply_trend_hysteresis_and_dwell(
    prev_state: str | None,
    raw_state: str,
    features: dict,     # –æ–∂–∏–¥–∞–µ—Ç—Å—è {"max_adx": float}
    thresholds: dict,   # –∏–∑ trend_thresholds(tf)
    prev_streak: int,
) -> tuple[str, int]:
    """
    –ü—Ä–∞–≤–∏–ª–∞:
      - –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å –ø–æ ADX –¥–ª—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ 'sideways':
          –≤—Ö–æ–¥ –≤–æ —Ñ–ª–µ—Ç:  max_adx <  IN
          –≤—ã—Ö–æ–¥ –∏–∑ —Ñ–ª—ç—Ç: max_adx ‚â• OUT
      - Dwell-time: –Ω–µ –º–µ–Ω—è—Ç—å state, –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–Ω –º–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ (min_streak),
        –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ raw_state == prev_state (—Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º streak).
    """
    max_adx = features.get("max_adx")
    adx_in  = thresholds["adx_in"]
    adx_out = thresholds["adx_out"]
    min_streak = thresholds["min_streak"]

    # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º raw –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if prev_state is None:
        return raw_state, 1

    prev_is_sideways = (prev_state == "sideways")
    raw_is_sideways  = (raw_state == "sideways")
    candidate = raw_state

    # –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –≤/–∏–∑ —Ñ–ª—ç—Ç–∞
    if raw_is_sideways and not prev_is_sideways:
        if max_adx is not None and max_adx >= adx_in:
            candidate = prev_state  # –µ—â—ë —Ä–∞–Ω–æ –≤–æ —Ñ–ª–µ—Ç
    elif (not raw_is_sideways) and prev_is_sideways:
        if max_adx is not None and max_adx < adx_out:
            candidate = "sideways"  # –µ—â—ë —Ä–∞–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ñ–ª—ç—Ç–∞

    # –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–≤–ø–∞–ª —Å –ø—Ä–æ—à–ª—ã–º ‚Äî —Ä–∞—Å—Ç–∏–º streak
    if candidate == prev_state:
        return prev_state, prev_streak + 1

    # –∏–Ω–∞—á–µ —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å state ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º dwell
    if prev_streak + 1 < min_streak:
        # —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–π state –¥–æ –º–∏–Ω–∏–º—É–º–∞
        return prev_state, prev_streak + 1

    # –º–∏–Ω–∏–º—É–º –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    return candidate, 1