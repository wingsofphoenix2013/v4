# position_decision_maker.py ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å: —ç—Ç–∞–ø 2 (EMA-–ø–∞—Ç—Ç–µ—Ä–Ω—ã, on-demand)

import asyncio
import logging
import json
import time
from datetime import datetime

log = logging.getLogger("POSITION_DECISION_MAKER")

REQUEST_STREAM  = "decision_request"
RESPONSE_STREAM = "decision_response"
GROUP           = "decision_maker_group"
CONSUMER        = "decision_maker_1"

EPSILON_REL = 0.0005  # 0.05%
TIMEFRAMES_DEFAULT = ("m5", "m15", "h1")
EMA_NAMES  = ("ema9", "ema21", "ema50", "ema100", "ema200")
EMA_LEN = {"EMA9": 9, "EMA21": 21, "EMA50": 50, "EMA100": 100, "EMA200": 200}

# –∫—ç—à: pattern_text -> id
_PATTERN_ID = {}
# –∫—ç—à –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: {"m5": {9: iid, 21: iid, ...}, ...}
_EMA_INSTANCES = {}
# —É–∫–∞–∑–∞—Ç–µ–ª—å —á—Ç–µ–Ω–∏—è indicator_response (–¥–ª—è XREAD)
_IND_RESP_LAST_ID = "0-0"


# üî∏ consumer group
async def _ensure_group(redis):
    try:
        await redis.xgroup_create(REQUEST_STREAM, GROUP, id="$", mkstream=True)
        log.debug(f"–°–æ–∑–¥–∞–Ω–∞ consumer group {GROUP} –¥–ª—è {REQUEST_STREAM}")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug(f"Consumer group {GROUP} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            log.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group")
            raise


# üî∏ –æ—Ç–≤–µ—Ç
async def _send_response(redis, req_id: str, decision: str, reason: str):
    payload = {
        "req_id": req_id or "",
        "decision": decision,
        "reason": reason,
        "responded_at": datetime.utcnow().isoformat(),
    }
    await redis.xadd(RESPONSE_STREAM, payload)
    log.debug(f"[RESP] req_id={req_id} decision={decision} reason={reason}")


# üî∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
def _validate_request(data: dict) -> tuple[bool, str]:
    required = ("req_id", "strategy_id", "symbol", "direction", "checks")
    for k in required:
        if data.get(k) in (None, ""):
            return False, f"missing_{k}"
    if data.get("direction", "").lower() not in ("long", "short"):
        return False, "bad_direction"
    if not isinstance(data.get("checks"), (list, tuple)) or len(data["checks"]) == 0:
        return False, "empty_checks"
    return True, "ok"


# üî∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
def _rel_equal(a: float, b: float) -> bool:
    m = max(abs(a), abs(b), 1e-12)
    return abs(a - b) <= EPSILON_REL * m


# üî∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
def _build_pattern(price: float, ema_vals: dict[str, float]) -> str:
    pairs = [("PRICE", float(price))]
    for name in EMA_NAMES:
        pairs.append((name.upper(), float(ema_vals[name])))

    pairs.sort(key=lambda kv: kv[1], reverse=True)

    groups = []
    cur = []
    for token, val in pairs:
        if not cur:
            cur = [(token, val)]
            continue
        ref = cur[0][1]
        if _rel_equal(val, ref):
            cur.append((token, val))
        else:
            groups.append([t for t, _ in cur])
            cur = [(token, val)]
    if cur:
        groups.append([t for t, _ in cur])

    canon_groups = []
    for g in groups:
        if "PRICE" in g:
            rest = [t for t in g if t != "PRICE"]
            rest.sort(key=lambda t: EMA_LEN[t])
            canon_groups.append(["PRICE"] + rest)
        else:
            gg = list(g)
            gg.sort(key=lambda t: EMA_LEN[t])
            canon_groups.append(gg)

    return " > ".join(" = ".join(g) for g in canon_groups)


# üî∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è EMA-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫—ç—à
async def _ensure_pattern_cache(pg):
    if _PATTERN_ID:
        return
    async with pg.acquire() as conn:
        rows = await conn.fetch("SELECT id, pattern_text FROM indicator_emapattern_dict")
    for r in rows:
        _PATTERN_ID[r["pattern_text"]] = int(r["id"])
    log.debug(f"[CACHE_LOADED] patterns={len(_PATTERN_ID)}")


# üî∏ –∑–∞–≥—Ä—É–∑–∫–∞ iid –¥–ª—è EMA (–ø–æ –¥–ª–∏–Ω–∞–º) –≤ –∫—ç—à
async def _ensure_ema_instances(pg):
    if _EMA_INSTANCES:
        return
    # –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –ø–æ EMA –∏ TF {m5,m15,h1}, —Ç—è–Ω–µ–º –¥–ª–∏–Ω—ã
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT i.id, i.timeframe, p.value AS length
            FROM indicator_instances_v4 i
            JOIN indicator_parameters_v4 p ON p.instance_id = i.id AND p.param='length'
            WHERE i.enabled = true AND i.indicator = 'ema' AND i.timeframe IN ('m5','m15','h1')
            """
        )
    by_tf = {"m5": {}, "m15": {}, "h1": {}}
    for r in rows:
        try:
            tf = r["timeframe"]
            ln = int(r["length"])
            if ln in (9,21,50,100,200):
                by_tf[tf][ln] = int(r["id"])
        except Exception:
            continue
    _EMA_INSTANCES.update(by_tf)
    log.debug(f"[CACHE_LOADED] ema_instances={_EMA_INSTANCES}")

# üî∏ on-demand –≤—ã–∑–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞, –±–µ–∑ –≥–æ–Ω–æ–∫; –∂–¥—ë–º —Ä–æ–≤–Ω–æ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
async def _ondemand_indicator(redis, symbol: str, timeframe: str, instance_id: int, timeout_ms: int | None = None):
    import time, json

    now_ms = int(time.time() * 1000)

    # –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π id –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)
    try:
        last = await redis.xrevrange("indicator_response", count=1)
        last_id = last[0][0] if last else "0-0"
    except Exception:
        last_id = "0-0"

    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    req_id = await redis.xadd("indicator_request", {
        "symbol": symbol,
        "timeframe": timeframe,
        "instance_id": str(instance_id),
        "timestamp_ms": str(now_ms),
    })

    # –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: XREAD BLOCK 0 ‚Äî –∂–¥—ë–º –æ—Ç–≤–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    while True:
        resp = await redis.xread(streams={"indicator_response": last_id}, count=64, block=0)
        if not resp:
            continue

        _, messages = resp[0]
        for mid, data in messages:
            last_id = mid
            if data.get("req_id") != req_id:
                continue
            status = (data.get("status") or "").lower()
            if status == "ok":
                try:
                    return json.loads(data.get("results") or "{}")
                except Exception:
                    return {}
            else:
                # –ª—é–±–æ–π error ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏–π)
                return {}
    
# üî∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
async def _get_price(redis, symbol: str) -> float | None:
    val = await redis.get(f"price:{symbol}")
    try:
        return float(val) if val is not None else None
    except Exception:
        return None


# üî∏ —á—Ç–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–∞ –∏–∑ Redis
async def _read_aggr(redis, strategy_id: int, direction: str, tf: str, pattern_id: int):
    key = f"aggr:emapattern:{strategy_id}:{direction}:{tf}:{pattern_id}"
    res = await redis.hgetall(key)
    if not res:
        return None, key
    try:
        ct = int(res.get("count_trades", "0"))
        wr = float(res.get("winrate", "0"))
        return (ct, wr), key
    except Exception:
        return None, key


# üî∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ mirror-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def _resolve_mirror(pg, strategy_id: int, direction: str, mirror_field: str | int | None):
    # —è–≤–Ω—ã–π mirror id –≤ –∑–∞–ø—Ä–æ—Å–µ (—á–∏—Å–ª–æ) –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if isinstance(mirror_field, int):
        return mirror_field
    # auto: —á–∏—Ç–∞–µ–º –∏–∑ strategies_v4
    async with pg.acquire() as conn:
        row = await conn.fetchrow(
            """
            SELECT emamirrow, emamirrow_long, emamirrow_short
            FROM strategies_v4 WHERE id = $1
            """, strategy_id
        )
    if not row:
        return None
    if direction == "long" and row["emamirrow_long"]:
        return int(row["emamirrow_long"])
    if direction == "short" and row["emamirrow_short"]:
        return int(row["emamirrow_short"])
    if row["emamirrow"]:
        return int(row["emamirrow"])
    return None

# üî∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ check kind=ema_pattern (—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º on-demand –ø–æ 5 EMA –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ TF)
async def _process_ema_check(pg, redis, strategy_id: int, symbol: str, direction: str, check: dict) -> str:
    # timeframes –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    tfs = check.get("timeframes") or list(TIMEFRAMES_DEFAULT)

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫—ç—à–∏
    await _ensure_pattern_cache(pg)
    await _ensure_ema_instances(pg)

    # mirror —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    mirror = check.get("mirror")
    if mirror == "auto":
        mirror_id = await _resolve_mirror(pg, strategy_id, direction, "auto")
    elif isinstance(mirror, int):
        mirror_id = mirror
    else:
        mirror_id = await _resolve_mirror(pg, strategy_id, direction, "auto")
    target_strategy = mirror_id if mirror_id else strategy_id

    # —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    price = await _get_price(redis, symbol)
    if price is None:
        log.debug(f"[EMA] no_price symbol={symbol}")
        return "ignore"

    lengths_needed = (9, 21, 50, 100, 200)

    # –ø–æ –∫–∞–∂–¥–æ–º—É TF: –ø–æ–ª—É—á–∏—Ç—å 5 EMA on-demand (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    for tf in tfs:
        iid_map = _EMA_INSTANCES.get(tf) or {}
        if any(ln not in iid_map for ln in lengths_needed):
            log.debug(f"[EMA] not all EMA instances present tf={tf}")
            return "ignore"

        # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã on-demand –¥–ª—è –≤—Å–µ—Ö –¥–ª–∏–Ω EMA
        tasks = [
            _ondemand_indicator(redis, symbol, tf, iid_map[ln], timeout_ms=2500)
            for ln in lengths_needed
        ]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        ema_vals: dict[str, float] = {}
        for ln, res in zip(lengths_needed, results):
            if isinstance(res, Exception) or not res:
                log.debug(f"[EMA] ondemand timeout/empty tf={tf} len={ln}")
                return "ignore"
            key = f"ema{ln}"
            v = res.get(key)
            if v is None:
                log.debug(f"[EMA] ondemand no key tf={tf} len={ln}")
                return "ignore"
            try:
                ema_vals[key] = float(v)
            except Exception:
                log.debug(f"[EMA] parse_error tf={tf} len={ln} val={v!r}")
                return "ignore"

        # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω -> id
        pattern_text = _build_pattern(price, ema_vals)
        pid = _PATTERN_ID.get(pattern_text)
        if pid is None:
            log.debug(f"[EMA] pattern_not_found tf={tf} text={pattern_text}")
            return "ignore"

        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ç –ø–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π/—Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        aggr, key = await _read_aggr(redis, target_strategy, direction, tf, pid)
        if aggr is None:
            log.debug(f"[EMA] no_agg key={key}")
            return "ignore"

        count_trades, winrate = aggr
        if not (count_trades > 2 and winrate > 0.5):
            log.debug(f"[EMA] below_threshold tf={tf} count={count_trades} winrate={winrate}")
            return "deny"

    # –≤—Å–µ TF –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥–∏
    return "allow"

# üî∏ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
async def run_position_decision_maker(pg, redis):
    await _ensure_group(redis)

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP,
                consumername=CONSUMER,
                streams={REQUEST_STREAM: ">"},
                count=20,
                block=2000
            )
            if not resp:
                continue

            to_ack = []
            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        req_id      = data.get("req_id")
                        strategy_id = int(data.get("strategy_id")) if data.get("strategy_id") else None
                        symbol      = data.get("symbol")
                        direction   = (data.get("direction") or "").lower()
                        checks_raw  = data.get("checks")
                        mirror_in   = data.get("mirror", "auto")

                        # checks –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–æ–π
                        checks = None
                        if isinstance(checks_raw, str):
                            try:
                                checks = json.loads(checks_raw)
                            except Exception:
                                checks = None
                        else:
                            checks = checks_raw
                        data["checks"] = checks

                        ok, reason = _validate_request(data)
                        if not ok:
                            log.warning(f"[REQ_SKIP] req_id={req_id} reason={reason}")
                            await _send_response(redis, req_id, "ignore", reason)
                            continue

                        log.debug(f"[REQ] req_id={req_id} strat={strategy_id} {symbol} dir={direction} checks={len(checks)}")

                        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ ema_pattern (—Å–ª–µ–¥—É—é—â–∏–µ kind –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
                        # –ø—Ä–∞–≤–∏–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É check ‚Äî AND –ø–æ –µ–≥–æ timeframes
                        decision = "ignore"
                        for check in checks:
                            kind = check.get("kind")
                            if kind != "ema_pattern":
                                decision = "ignore"
                                break
                            # –ø—Ä–æ–∫–∏–Ω–µ–º mirror –≤–Ω—É—Ç—Ä—å check, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                            if mirror_in is not None and "mirror" not in check:
                                check["mirror"] = mirror_in
                            decision = await _process_ema_check(pg, redis, strategy_id, symbol, direction, check)
                            # –æ–¥–∏–Ω check –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏; –µ—Å–ª–∏ –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ AND
                        await _send_response(redis, req_id, decision, "ok" if decision=="allow" else ("below_thresholds" if decision=="deny" else "no_data"))

                    except Exception:
                        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ decision_request")

            if to_ack:
                await redis.xack(REQUEST_STREAM, GROUP, *to_ack)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ POSITION_DECISION_MAKER: {e}", exc_info=True)
            await asyncio.sleep(2)