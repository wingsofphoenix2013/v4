# position_decision_maker.py ‚Äî —ç—Ç–∞–ø 1: —Å–ª—É—à–∞—Ç–µ–ª—å decision_request, –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç

import asyncio
import logging
import json
from datetime import datetime

log = logging.getLogger("POSITION_DECISION_MAKER")

REQUEST_STREAM  = "decision_request"
RESPONSE_STREAM = "decision_response"
GROUP           = "decision_maker_group"
CONSUMER        = "decision_maker_1"

# üî∏ –°–æ–∑–¥–∞–Ω–∏–µ consumer group –¥–ª—è decision_request
async def _ensure_group(redis):
    try:
        await redis.xgroup_create(REQUEST_STREAM, GROUP, id="$", mkstream=True)
        log.info(f"–°–æ–∑–¥–∞–Ω–∞ consumer group {GROUP} –¥–ª—è {REQUEST_STREAM}")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug(f"Consumer group {GROUP} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            log.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group")
            raise

# üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ decision_response
async def _send_response(redis, req_id: str, decision: str, reason: str):
    payload = {
        "req_id": req_id or "",
        "decision": decision,
        "reason": reason,
        "responded_at": datetime.utcnow().isoformat(),
    }
    await redis.xadd(RESPONSE_STREAM, payload)
    log.info(f"[RESP] req_id={req_id} decision={decision} reason={reason}")

# üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
def _validate_request(data: dict) -> tuple[bool, str]:
    required = ("req_id", "strategy_id", "symbol", "direction", "checks")
    for k in required:
        if data.get(k) in (None, ""):
            return False, f"missing_{k}"
    if data.get("direction", "").lower() not in ("long", "short"):
        return False, "bad_direction"
    if not isinstance(data.get("checks"), (list, tuple)) or len(data["checks"]) == 0:
        return False, "empty_checks"
    return True, "ok"

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —á–∏—Ç–∞–µ–º decision_request –∏ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞–≥–ª—É—à–∫–æ–π
async def run_position_decision_maker(pg, redis):
    await _ensure_group(redis)

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP,
                consumername=CONSUMER,
                streams={REQUEST_STREAM: ">"},
                count=50,
                block=2000
            )
            if not resp:
                continue

            to_ack = []
            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        # –±–µ—Ä—ë–º req_id –∏ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                        req_id      = data.get("req_id")
                        strategy_id = data.get("strategy_id")
                        symbol      = data.get("symbol")
                        direction   = data.get("direction")
                        checks_raw  = data.get("checks")

                        # –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å checks –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if isinstance(checks_raw, str):
                            try:
                                data["checks"] = json.loads(checks_raw)
                            except Exception:
                                pass

                        ok, reason = _validate_request(data)
                        if not ok:
                            log.warning(f"[REQ_SKIP] req_id={req_id} reason={reason}")
                            await _send_response(redis, req_id, "ignore", reason)
                            continue

                        # –ª–æ–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ)
                        log.info(f"[REQ] req_id={req_id} strat={strategy_id} {symbol} dir={direction} checks={len(data['checks'])}")

                        # –∑–∞–≥–ª—É—à–∫–∞: –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ ignore (–¥–∞–ª—å—à–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
                        await _send_response(redis, req_id, "ignore", "not_implemented")

                    except Exception:
                        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ decision_request")
            if to_ack:
                await redis.xack(REQUEST_STREAM, GROUP, *to_ack)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ POSITION_DECISION_MAKER: {e}", exc_info=True)
            await asyncio.sleep(2)