# üî∏ indicators_market_watcher.py ‚Äî –≠—Ç–∞–ø 1 (stream/consumer group): –∫–∞—Ä–∫–∞—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

import os
import asyncio
import json
import logging
from datetime import datetime

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥
READY_STREAM = "indicator_stream"                      # —á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
GROUP_NAME = os.getenv("MRW_GROUP", "mrw_v1_group")    # –Ω–∞—à–∞ consumer group (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö)
CONSUMER_NAME = os.getenv("MRW_CONSUMER", "mrw_1")     # –∏–º—è consumer'–∞ –≤ –≥—Ä—É–ø–ø–µ
REQUIRED_TFS = {"m5", "m15", "h1"}                     # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¢–§

DEBOUNCE_MS = int(os.getenv("MRW_DEBOUNCE_MS", "250"))
MAX_CONCURRENCY = int(os.getenv("MRW_MAX_CONCURRENCY", "64"))
MAX_PER_SYMBOL = int(os.getenv("MRW_MAX_PER_SYMBOL", "4"))
XREAD_BLOCK_MS = int(os.getenv("MRW_BLOCK_MS", "1000"))
XREAD_COUNT = int(os.getenv("MRW_COUNT", "50"))

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
task_gate = asyncio.Semaphore(MAX_CONCURRENCY)         # –æ–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–¥–∞—á
symbol_semaphores: dict[str, asyncio.Semaphore] = {}   # –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
bucket_tasks: dict[tuple, asyncio.Task] = {}           # (symbol, tf, open_time_ms) -> task


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def _iso_to_ms(iso_str: str) -> int:
    dt = datetime.fromisoformat(iso_str)
    return int(dt.timestamp() * 1000)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ ¬´–±–∞–∫–µ—Ç–∞¬ª (–ø–æ–∫–∞ –±–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
async def handle_bucket(log: logging.Logger, symbol: str, tf: str, open_time_ms: int):
    await asyncio.sleep(DEBOUNCE_MS / 1000)  # debounce: –∂–¥—ë–º –¥–æ–∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    # —Å–ª–µ–¥—É—é—â–∏–º–∏ —ç—Ç–∞–ø–∞–º–∏ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º: —á—Ç–µ–Ω–∏–µ —Ñ–∏—á ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –∑–∞–ø–∏—Å—å (TS/KV/PG)
    log.info(f"[BUCKET] done: {symbol}/{tf} @ {open_time_ms}")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: XREADGROUP indicator_stream –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–æ–≤
async def run_market_watcher(pg, redis):
    log = logging.getLogger("MRW")
    log.info(f"market_watcher starting: XGROUP={GROUP_NAME}, CONSUMER={CONSUMER_NAME}")

    # —Å–æ–∑–¥–∞—ë–º consumer group (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º BUSYGROUP)
    try:
        await redis.xgroup_create(READY_STREAM, GROUP_NAME, id="$", mkstream=True)
        log.info(f"consumer group '{GROUP_NAME}' created on '{READY_STREAM}'")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info(f"consumer group '{GROUP_NAME}' already exists")
        else:
            log.error(f"XGROUP CREATE error: {e}", exc_info=True)

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={READY_STREAM: ">"},
                count=XREAD_COUNT,
                block=XREAD_BLOCK_MS
            )
            if not resp:
                continue

            to_ack = []
            for _, messages in resp:
                for msg_id, data in messages:
                    try:
                        symbol = data.get("symbol")
                        tf = data.get("timeframe") or data.get("interval")
                        status = data.get("status")
                        open_time_iso = data.get("open_time")

                        # –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞
                        if not symbol or tf not in REQUIRED_TFS or status != "ready" or not open_time_iso:
                            to_ack.append(msg_id)
                            continue

                        open_time_ms = _iso_to_ms(open_time_iso)
                        bucket = (symbol, tf, open_time_ms)

                        # –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if bucket in bucket_tasks and not bucket_tasks[bucket].done():
                            to_ack.append(msg_id)
                            continue

                        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
                        if symbol not in symbol_semaphores:
                            symbol_semaphores[symbol] = asyncio.Semaphore(MAX_PER_SYMBOL)

                        log.info(f"[READY] {symbol}/{tf} @ {open_time_iso} ‚Üí schedule bucket")

                        async def bucket_runner():
                            async with task_gate:
                                async with symbol_semaphores[symbol]:
                                    await handle_bucket(log, symbol, tf, open_time_ms)

                        bucket_tasks[bucket] = asyncio.create_task(bucket_runner())
                        to_ack.append(msg_id)

                    except Exception as parse_err:
                        # –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî ack, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è, –∏ –ª–æ–≥–∏—Ä—É–µ–º
                        to_ack.append(msg_id)
                        log.error(f"message parse error: {parse_err}", exc_info=True)

            # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ
            if to_ack:
                await redis.xack(READY_STREAM, GROUP_NAME, *to_ack)

        except Exception as e:
            log.error(f"XREADGROUP loop error: {e}", exc_info=True)
            await asyncio.sleep(1)