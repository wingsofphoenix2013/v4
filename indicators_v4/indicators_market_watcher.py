# üî∏ indicators_market_watcher.py ‚Äî –≠—Ç–∞–ø 1: –∫–∞—Ä–∫–∞—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ indicator_stream

import os
import asyncio
import json
import logging
from datetime import datetime

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥
READY_STREAM = "indicator_stream"                   # —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Å—Ç—Ä–∏–º
REQUIRED_TFS = {"m5", "m15", "h1"}                  # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¢–§

DEBOUNCE_MS = int(os.getenv("MRW_DEBOUNCE_MS", "250"))
MAX_CONCURRENCY = int(os.getenv("MRW_MAX_CONCURRENCY", "64"))
MAX_PER_SYMBOL = int(os.getenv("MRW_MAX_PER_SYMBOL", "4"))

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
task_gate = asyncio.Semaphore(MAX_CONCURRENCY)      # –æ–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–¥–∞—á
symbol_semaphores: dict[str, asyncio.Semaphore] = {}  # –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
bucket_tasks: dict[tuple, asyncio.Task] = {}          # (symbol, tf, open_time_ms) -> task


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def _iso_to_ms(iso_str: str) -> int:
    dt = datetime.fromisoformat(iso_str)
    return int(dt.timestamp() * 1000)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ ¬´–±–∞–∫–µ—Ç–∞¬ª (–ø–æ–∫–∞ –±–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
async def handle_bucket(log: logging.Logger, symbol: str, tf: str, open_time_ms: int):
    await asyncio.sleep(DEBOUNCE_MS / 1000)  # debounce: –∂–¥—ë–º –¥–æ–∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è: —á—Ç–µ–Ω–∏–µ —Ñ–∏—á ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –∑–∞–ø–∏—Å—å (TS/KV/PG)
    log.info(f"[BUCKET] done: {symbol}/{tf} @ {open_time_ms}")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ indicator_stream –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–æ–≤
async def run_market_watcher(pg, redis):
    log = logging.getLogger("MRW")
    log.info("market_watcher starting: subscribe to indicator_stream")

    pubsub = redis.pubsub()
    await pubsub.subscribe(READY_STREAM)

    async for msg in pubsub.listen():
        if msg["type"] != "message":
            continue
        try:
            data = json.loads(msg["data"])
            symbol = data.get("symbol")
            tf = data.get("timeframe") or data.get("interval")
            status = data.get("status")
            open_time_iso = data.get("open_time")

            # –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞
            if not symbol or tf not in REQUIRED_TFS or status != "ready" or not open_time_iso:
                continue

            open_time_ms = _iso_to_ms(open_time_iso)
            bucket = (symbol, tf, open_time_ms)

            # –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if bucket in bucket_tasks and not bucket_tasks[bucket].done():
                continue

            # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
            if symbol not in symbol_semaphores:
                symbol_semaphores[symbol] = asyncio.Semaphore(MAX_PER_SYMBOL)

            log.info(f"[READY] {symbol}/{tf} @ {open_time_iso} ‚Üí schedule bucket")

            async def bucket_runner():
                async with task_gate:
                    async with symbol_semaphores[symbol]:
                        await handle_bucket(log, symbol, tf, open_time_ms)

            bucket_tasks[bucket] = asyncio.create_task(bucket_runner())

        except Exception as e:
            log.error(f"stream parse error: {e}", exc_info=True)