# auditor.py ‚Äî –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∏

import logging
from collections import defaultdict
from datetime import datetime, timedelta

from indicators.compute_and_store import get_expected_param_names

# üî∏ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
async def analyze_config_state(pg):
    log = logging.getLogger("GAP_CHECKER")

    async with pg.acquire() as conn:
        # üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        row = await conn.fetchrow("""
            SELECT COUNT(*) AS count
            FROM tickers_v4
            WHERE status = 'enabled' AND tradepermission = 'enabled'
        """)
        ticker_count = row["count"]

        # üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        row = await conn.fetchrow("""
            SELECT COUNT(*) AS count
            FROM indicator_instances_v4
            WHERE enabled = true
        """)
        indicator_count = row["count"]

        # üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        rows = await conn.fetch("""
            SELECT DISTINCT timeframe
            FROM indicator_instances_v4
            WHERE enabled = true
        """)
        timeframes = sorted(r["timeframe"] for r in rows)

    # üî∏ –í—ã–≤–æ–¥ –≤ –ª–æ–≥
    log.debug(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {ticker_count}")
    log.debug(f"üß© –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {indicator_count}")
    log.debug(f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º—ã —Å—Ä–µ–¥–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {', '.join(timeframes) if timeframes else '‚Äî'}")

# üî∏ –ê—É–¥–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö open_time –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (24 —á–∞—Å–∞)
async def analyze_open_times(pg):
    log = logging.getLogger("GAP_CHECKER")

    step_map = {
        "m1": timedelta(minutes=1),
        "m5": timedelta(minutes=5),
        "m15": timedelta(minutes=15),
        "h1": timedelta(hours=1),
    }

    def align_down(dt: datetime, step: timedelta) -> datetime:
        seconds = int(step.total_seconds())
        timestamp = int(dt.timestamp())
        aligned = timestamp - (timestamp % seconds)
        return datetime.utcfromtimestamp(aligned)

    async with pg.acquire() as conn:
        rows = await conn.fetch("""
            SELECT DISTINCT timeframe
            FROM indicator_instances_v4
            WHERE enabled = true
        """)
        timeframes = sorted(r["timeframe"] for r in rows if r["timeframe"] in step_map)

    now = datetime.utcnow()

    for tf in timeframes:
        step = step_map[tf]
        end_time = align_down(now - 2 * step, step)         # –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É
        start_time = end_time - timedelta(hours=24)

        open_times = []
        t = start_time
        while t <= end_time:
            open_times.append(t)
            t += step

        if open_times:
            log.debug(f"üß™ {tf} ‚Üí {len(open_times)} open_time ({open_times[0]} ‚Äî {open_times[-1]})")
        else:
            log.warning(f"‚ö†Ô∏è {tf} ‚Üí –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ open_time")
# üî∏ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –ø–æ —Ç–∏–∫–µ—Ä–∞–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
async def audit_storage_gaps(pg):
    log = logging.getLogger("GAP_CHECKER")

    step_map = {
        "m1": timedelta(minutes=1),
        "m5": timedelta(minutes=5),
        "m15": timedelta(minutes=15),
        "h1": timedelta(hours=1),
    }

    def align_down(dt: datetime, step: timedelta) -> datetime:
        seconds = int(step.total_seconds())
        timestamp = int(dt.timestamp())
        aligned = timestamp - (timestamp % seconds)
        return datetime.utcfromtimestamp(aligned)

    now = datetime.utcnow()
    semaphore = asyncio.Semaphore(10)
    counter_lock = asyncio.Lock()
    total = {"checks": 0, "failures": 0}

    async with pg.acquire() as conn:
        symbols = [r["symbol"] for r in await conn.fetch("""
            SELECT symbol FROM tickers_v4
            WHERE status = 'enabled' AND tradepermission = 'enabled'
        """)]

        instances = await conn.fetch("""
            SELECT id, indicator, timeframe
            FROM indicator_instances_v4
            WHERE enabled = true
        """)

        param_rows = await conn.fetch("""
            SELECT instance_id, param, value
            FROM indicator_parameters_v4
        """)
        param_map = defaultdict(dict)
        for r in param_rows:
            param_map[r["instance_id"]][r["param"]] = r["value"]

    # üî∏ –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    async def check_single(symbol, inst):
        async with semaphore:
            instance_id = inst["id"]
            indicator = inst["indicator"]
            timeframe = inst["timeframe"]
            params = param_map.get(instance_id, {})
            step = step_map[timeframe]

            try:
                expected_params = get_expected_param_names(indicator, params)
            except Exception as e:
                log.warning(f"‚õî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: id={instance_id} {indicator} ‚Äî {e}")
                return

            end_time = align_down(now - 2 * step, step)
            start_time = end_time - timedelta(hours=24)

            open_times = []
            t = start_time
            while t <= end_time:
                open_times.append(t)
                t += step
            expected_count = len(open_times)

            async with pg.acquire() as conn:
                rows = await conn.fetch("""
                    SELECT open_time, param_name
                    FROM indicator_values_v4
                    WHERE instance_id = $1 AND symbol = $2 AND open_time BETWEEN $3 AND $4
                """, instance_id, symbol, start_time, end_time)

            found = defaultdict(set)
            for r in rows:
                found[r["open_time"]].add(r["param_name"])

            valid = []
            gaps = []
            for ts in open_times:
                recorded = found.get(ts, set())
                if all(p in recorded for p in expected_params):
                    valid.append(ts)
                else:
                    gaps.append(ts)

            actual_count = len(valid)

            param_str = ", ".join(f"{k}={v}" for k, v in sorted(params.items()))
            label = f"{symbol} / id={instance_id} / {indicator}({param_str}) / {timeframe}"

            async with counter_lock:
                total["checks"] += 1

            if actual_count == expected_count:
                log.debug(f"‚úÖ {label} ‚Üí {actual_count} / {expected_count}")
            else:
                async with counter_lock:
                    total["failures"] += 1

                log.warning(f"‚ö†Ô∏è {label} ‚Üí {actual_count} / {expected_count} (–Ω–µ–ø–æ–ª–Ω—ã–µ {expected_count - actual_count} —Ç–æ—á–µ–∫)")

                if gaps:
                    async with pg.acquire() as conn:
                        await conn.executemany("""
                            INSERT INTO indicator_gaps_v4 (instance_id, symbol, open_time)
                            VALUES ($1, $2, $3)
                            ON CONFLICT DO NOTHING
                        """, [(instance_id, symbol, ts) for ts in gaps])

    # üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    tasks = []
    for symbol in symbols:
        for inst in instances:
            tasks.append(check_single(symbol, inst))

    await asyncio.gather(*tasks)

    # üî∏ –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
    if total["failures"] == 0:
        log.info(f"‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—Ç–µ: {total['checks']} —Å–≤—è–∑–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, 0 –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    else:
        log.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {total['checks']} —Å–≤—è–∑–æ–∫, —Å –æ—à–∏–±–∫–∞–º–∏: {total['failures']}")