# auditor.py ‚Äî –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∏

import logging

# üî∏ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
async def analyze_config_state(pg):
    log = logging.getLogger("GAP_CHECKER")

    async with pg.acquire() as conn:
        # üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        row = await conn.fetchrow("""
            SELECT COUNT(*) AS count
            FROM tickers_v4
            WHERE status = 'enabled' AND tradepermission = 'enabled'
        """)
        ticker_count = row["count"]

        # üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        row = await conn.fetchrow("""
            SELECT COUNT(*) AS count
            FROM indicator_instances_v4
            WHERE enabled = true
        """)
        indicator_count = row["count"]

        # üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        rows = await conn.fetch("""
            SELECT DISTINCT timeframe
            FROM indicator_instances_v4
            WHERE enabled = true
        """)
        timeframes = sorted(r["timeframe"] for r in rows)

    # üî∏ –í—ã–≤–æ–¥ –≤ –ª–æ–≥
    log.info(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {ticker_count}")
    log.info(f"üß© –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {indicator_count}")
    log.info(f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º—ã —Å—Ä–µ–¥–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {', '.join(timeframes) if timeframes else '‚Äî'}")