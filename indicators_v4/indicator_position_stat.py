# indicator_position_stat.py ‚Äî –≤–æ—Ä–∫–µ—Ä on-demand —Å–Ω–∏–º–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (—ç—Ç–∞–ø 1: —Ç–æ–ª—å–∫–æ ¬´—Å—ã—Ä—ã–µ¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ m5)

import asyncio
import json
import logging
from datetime import datetime, timedelta

# üî∏ –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ TF (floor –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞)
from packs.pack_utils import STEP_MS, floor_to_bar

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
POSITIONS_OPEN_STREAM = "positions_open_stream"
INDICATOR_REQ_STREAM = "indicator_request"
INDICATOR_RESP_STREAM = "indicator_response"
TARGET_TABLE = "indicator_position_stat"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Ä–∫–µ—Ä–∞ (—ç—Ç–∞–ø 1)
REQUIRED_TFS = ("m5",)          # –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ m5
POLL_INTERVAL_SEC = 1           # —á–∞—Å—Ç–æ—Ç–∞ —Ä–µ—Ç—Ä–∞–µ–≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
GLOBAL_TIMEOUT_SEC = 600        # 10 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
BATCH_SIZE_POS_OPEN = 20        # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π —á–∏—Ç–∞–µ–º –∑–∞ —Ä–∞–∑
BATCH_SIZE_RESP_READ = 200      # —Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–∏—Ç–∞–µ–º –∑–∞ —Ä–∞–∑
CONCURRENCY_PER_TF = 50         # –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ per TF

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("IND_POS_STAT")


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫ open_time –±–∞—Ä–∞ TF (ms)
def to_bar_open_ms(created_at_iso: str, tf: str) -> int:
    dt = datetime.fromisoformat(created_at_iso)
    ts_ms = int(dt.timestamp() * 1000)
    return floor_to_bar(ts_ms, tf)


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: —Ä–∞–∑–æ–±—Ä–∞—Ç—å ISO –≤ datetime
def parse_iso(s: str) -> datetime:
    return datetime.fromisoformat(s)


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ INSERT –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
def build_rows_for_indicator_response(position_uid: str,
                                      strategy_id: int,
                                      symbol: str,
                                      tf: str,
                                      indicator_name: str,
                                      open_time_iso: str,
                                      results_json: str) -> list[tuple]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è executemany INSERT –≤ indicator_position_stat.
    param_type='indicator', param_base=<–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞>, param_name=<–∫–∞–Ω–æ–Ω. –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞>.
    value_num ‚Äî float, value_text ‚Äî NULL; status='ok'.
    """
    rows = []
    try:
        results = json.loads(results_json)
    except Exception:
        results = {}

    if not isinstance(results, dict) or not results:
        return rows

    open_time = parse_iso(open_time_iso)

    for param_name, str_val in results.items():
        try:
            value_num = float(str_val)
        except Exception:
            # –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—à–ª–æ –Ω–µ–Ω–∞umeric –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º –Ω–∞ —ç—Ç–∞–ø–µ 1
            continue

        rows.append((
            position_uid,                 # position_uid
            strategy_id,                  # strategy_id
            symbol,                       # symbol
            tf,                           # timeframe
            "indicator",                  # param_type
            indicator_name,               # param_base (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)
            param_name,                   # param_name (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π param)
            value_num,                    # value_num
            None,                         # value_text
            open_time,                    # open_time
            "ok",                         # status
            None                          # error_code
        ))
    return rows


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: INSERT –ø–∞—á–∫–∏ —Å—Ç—Ä–æ–∫ –≤ PG (UPSERT –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É)
async def insert_rows_pg(pg, rows: list[tuple]):
    if not rows:
        return 0
    async with pg.acquire() as conn:
        async with conn.transaction():
            await conn.executemany(f"""
                INSERT INTO {TARGET_TABLE}
                (position_uid, strategy_id, symbol, timeframe, param_type, param_base, param_name,
                 value_num, value_text, open_time, status, error_code, captured_at)
                VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12, NOW())
                ON CONFLICT (position_uid, timeframe, param_type, param_base, param_name)
                DO UPDATE SET
                    value_num = EXCLUDED.value_num,
                    value_text = EXCLUDED.value_text,
                    open_time = EXCLUDED.open_time,
                    status = EXCLUDED.status,
                    error_code = EXCLUDED.error_code,
                    captured_at = NOW()
            """, rows)
    return len(rows)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: —á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –∏ —Å–Ω–∏–º–∞–µ–º ¬´—Å—ã—Ä—ã–µ¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ m5
async def run_indicator_position_stat(pg, redis, get_instances_by_tf, get_precision):
    """
    –≠—Ç–∞–ø 1:
    - –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ positions_open_stream —Å–≤–æ–µ–π consumer-group.
    - –ù–∞ —Å–æ–±—ã—Ç–∏–µ ¬´opened¬ª: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ TF –∏–∑ REQUIRED_TFS (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ m5)
      –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º indicator_request –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Å—Ç–∞–Ω—Å–∞–º TF.
    - –†–µ—Ç—Ä–∞–∏–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∂–¥—É—é 1—Å –¥–æ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–∏–±–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ 10 –º–∏–Ω—É—Ç.
    - –ü–∏—à–µ–º —Ç–æ–ª—å–∫–æ param_type='indicator' —Å—Ç—Ä–æ–∫–∏ –≤ indicator_position_stat.
    - –õ–æ–≥–∏ –ø–æ –∏—Ç–æ–≥–∞–º ‚Äî log.info.
    """
    group = "iv4_possnap_group"
    consumer = "iv4_possnap_1"

    # —Å–æ–∑–¥–∞—Ç—å consumer-group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await redis.xgroup_create(POSITIONS_OPEN_STREAM, group, id="$", mkstream=True)
    except Exception as e:
        if "BUSYGROUP" not in str(e):
            log.warning(f"xgroup_create error: {e}")

    # –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ñ—Ñ—Å–µ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ indicator_response
    last_resp_id = "0-0"

    # üî∏ –ü—É–ª —Å–µ–º–∞—Ñ–æ—Ä–æ–≤ –ø–æ TF –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    tf_semaphores = {tf: asyncio.Semaphore(CONCURRENCY_PER_TF) for tf in REQUIRED_TFS}

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=group,
                consumername=consumer,
                streams={POSITIONS_OPEN_STREAM: ">"},
                count=BATCH_SIZE_POS_OPEN,
                block=2000
            )
            if not resp:
                continue

            to_ack: list[str] = []

            # –≤–ª–æ–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ (m5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏)
            for _, messages in resp:
                for msg_id, data in messages:
                    try:
                        if (data.get("event_type") or "").lower() != "opened":
                            to_ack.append(msg_id)
                            continue

                        position_uid = data["position_uid"]
                        strategy_id = int(data["strategy_id"])
                        symbol = data["symbol"]
                        created_at_iso = data.get("created_at") or data.get("received_at")
                        if not created_at_iso:
                            # –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî ACK, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                            log.info(f"[SKIP] position {position_uid}: no created_at/received_at")
                            to_ack.append(msg_id)
                            continue

                        # —Å–æ–±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã per TF (—Ç–æ–ª—å–∫–æ m5 –Ω–∞ —ç—Ç–∞–ø–µ 1)
                        instances_by_tf = {tf: [i for i in get_instances_by_tf(tf)] for tf in REQUIRED_TFS}

                        # –ø–æ—Å—Ç—Ä–æ–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ indicator_request –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ m5
                        start_ts = datetime.utcnow()
                        deadline = start_ts + timedelta(seconds=GLOBAL_TIMEOUT_SEC)

                        # –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–µ–∂–µ–Ω–∏—è: –ø–æ –∫–∞–∂–¥–æ–º—É TF ‚Äî map instance_id -> state ('pending'|'ok'|'error'), last_error
                        progress = {tf: {inst["id"]: {"state": "pending", "err": None} for inst in instances}
                                    for tf, instances in instances_by_tf.items()}

                        # –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–∏–º bar_open_ms –Ω–∞ –æ—Å–Ω–æ–≤–µ created_at
                        bar_open_ms_by_tf = {tf: to_bar_open_ms(created_at_iso, tf) for tf in REQUIRED_TFS}

                        # helper: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
                        async def request_one(tf: str, inst: dict):
                            async with tf_semaphores[tf]:
                                await redis.xadd(INDICATOR_REQ_STREAM, {
                                    "symbol": symbol,
                                    "timeframe": tf,
                                    "instance_id": str(inst["id"]),
                                    "timestamp_ms": str(bar_open_ms_by_tf[tf])
                                })

                        # helper: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö pending –ø–æ TF
                        async def request_all_pending(tf: str):
                            tasks = []
                            for inst in instances_by_tf[tf]:
                                if progress[tf][inst["id"]]["state"] == "pending":
                                    tasks.append(asyncio.create_task(request_one(tf, inst)))
                            if tasks:
                                await asyncio.gather(*tasks, return_exceptions=True)

                        # helper: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ indicator_response
                        async def drain_indicator_responses():
                            nonlocal last_resp_id
                            try:
                                got = await redis.xread(streams={INDICATOR_RESP_STREAM: last_resp_id}, count=BATCH_SIZE_RESP_READ, block=1000)
                            except Exception:
                                return []
                            if not got:
                                return []
                            out = []
                            for _, msgs in got:
                                for rid, payload in msgs:
                                    out.append((rid, payload))
                                    last_resp_id = rid
                            return out

                        # helper: –∑–∞–ø–∏—Å–∞—Ç—å –≤ PG –æ—Ç–≤–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É TF
                        async def persist_ok_rows(tf: str, collected: list[tuple]):
                            if not collected:
                                return 0
                            n = await insert_rows_pg(pg, collected)
                            return n

                        # –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ—Ç—Ä–∞–µ–≤ ‚Äî –¥–æ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ m5 (–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö TF –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ) –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
                        total_inserted = 0
                        first_round = True
                        while True:
                            now = datetime.utcnow()
                            if now >= deadline:
                                # –ø–∏—à–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è pending –∫–∞–∫ 'error' c –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–¥–æ–º (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è)
                                err_rows = []
                                for tf in REQUIRED_TFS:
                                    for inst in instances_by_tf[tf]:
                                        st = progress[tf][inst["id"]]
                                        if st["state"] == "pending":
                                            # —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ error –ø–æ –∫–∞–∂–¥–æ–º—É –æ–∂–∏–¥–∞–µ–º–æ–º—É param (–Ω–µ –∑–Ω–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ param_name –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è) ‚Äî –Ω–∞ —ç—Ç–∞–ø–µ 1 —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ instance (–ø—É—Å—Ç–æ–π results –Ω–µ –ø–∏—à–µ–º)
                                            # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ ‚Äî –ª–æ–≥:
                                            log.info(f"[TIMEOUT] position {position_uid} {symbol}/{tf} inst_id={inst['id']} indicator={inst['indicator']} last_err={st['err']}")
                                # –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∑–∏—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–±–µ–∑ –¥–æ–ø. –≤—Å—Ç–∞–≤–æ–∫)
                                break

                            # 1) –ø–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ pending)
                            if first_round:
                                # m5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ m5
                                await request_all_pending("m5") if "m5" in REQUIRED_TFS else None
                                # –æ—Å—Ç–∞–ª—å–Ω—ã–µ TF (–Ω–∞ —ç—Ç–∞–ø–µ 1 –∏—Ö –Ω–µ—Ç) –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                                first_round = False
                            else:
                                # –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º, –∫—Ç–æ pending –∏ –¥–∞–≤–∞–ª —Ä–µ—Ç—Ä–∞–∏–±–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
                                for tf in REQUIRED_TFS:
                                    await request_all_pending(tf)

                            # 2) —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ indicator_response –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞
                            end_wait = now + timedelta(seconds=POLL_INTERVAL_SEC)
                            collected_rows_by_tf = {tf: [] for tf in REQUIRED_TFS}

                            # –∂–¥—ë–º –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ POLL_INTERVAL_SEC, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø–∞—á–∫—É –æ—Ç–≤–µ—Ç–æ–≤
                            while datetime.utcnow() < end_wait:
                                batch = await drain_indicator_responses()
                                if not batch:
                                    await asyncio.sleep(0.05)
                                    continue

                                for resp_id, payload in batch:
                                    req_id = payload.get("req_id")
                                    status = payload.get("status")
                                    r_symbol = payload.get("symbol")
                                    tf = payload.get("timeframe")
                                    instance_id_raw = payload.get("instance_id")
                                    if not tf or tf not in progress or r_symbol != symbol or not instance_id_raw:
                                        continue

                                    iid = int(instance_id_raw)
                                    if iid not in progress[tf]:
                                        continue

                                    if status == "ok":
                                        inst = next((i for i in instances_by_tf[tf] if i["id"] == iid), None)
                                        if not inst:
                                            continue
                                        open_time_iso = payload.get("open_time")
                                        results_json = payload.get("results", "{}")
                                        rows = build_rows_for_indicator_response(
                                            position_uid=position_uid,
                                            strategy_id=strategy_id,
                                            symbol=symbol,
                                            tf=tf,
                                            indicator_name=inst["indicator"],
                                            open_time_iso=open_time_iso,
                                            results_json=results_json
                                        )
                                        if rows:
                                            collected_rows_by_tf[tf].extend(rows)
                                        progress[tf][iid]["state"] = "ok"
                                        progress[tf][iid]["err"] = None

                                    elif status == "error":
                                        err = payload.get("error") or "unknown"
                                        progress[tf][iid]["err"] = err
                                        # —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ error (–Ω–∞ —ç—Ç–∞–ø–µ 1 –Ω–µ –ø–∏—à–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è)
                                        if err in ("instance_not_active", "exception"):
                                            progress[tf][iid]["state"] = "error"
                                        # –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º pending ‚Äî –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ

                                await asyncio.sleep(0.01)

                            # 3) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ ok-–∑–Ω–∞—á–µ–Ω–∏—è –≤ PG –ø–∞—á–∫–∞–º–∏ –ø–æ TF
                            for tf in REQUIRED_TFS:
                                if collected_rows_by_tf[tf]:
                                    added = await persist_ok_rows(tf, collected_rows_by_tf[tf])
                                    total_inserted += added

                            # 4) –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏¬ª –≤—Å–µ—Ö TF (—ç—Ç–∞–ø 1 ‚Äî —Ç–æ–ª—å–∫–æ m5)
                            all_done = True
                            for tf in REQUIRED_TFS:
                                # m5 –≥–æ—Ç–æ–≤ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã tf –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ok/–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (–Ω–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º ‚Äî –æ–∂–∏–¥–∞–µ–º –≤—Å–µ, –ø–æ—ç—Ç–æ–º—É error —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏—Ç all_done=True, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç; –Ω–∞ —ç—Ç–∞–ø–µ 1 —Å–ª–µ–¥—É–µ–º –ø—Ä–∞–≤–∏–ª—É "–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ" ‚Üí —Å—á–∏—Ç–∞–µ–º done —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç pending –∏ –Ω–µ—Ç error)
                                states = [v["state"] for v in progress[tf].values()]
                                if any(s == "pending" for s in states):
                                    all_done = False
                                if any(s == "error" for s in states):
                                    all_done = False
                            if all_done:
                                elapsed_ms = int((datetime.utcnow() - start_ts).total_seconds() * 1000)
                                ok_cnt = sum(1 for tf in REQUIRED_TFS for v in progress[tf].values() if v["state"] == "ok")
                                log.info(f"IND_POS_STAT: position={position_uid} {symbol} m5 snapshot complete: ok_instances={ok_cnt}, rows_inserted={total_inserted}, elapsed_ms={elapsed_ms}")
                                break

                        # –Ω–∞ —ç—Ç–∞–ø–µ 1 ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ m5
                        to_ack.append(msg_id)

                    except Exception as e:
                        log.error(f"position handling error: {e}", exc_info=True)
                        # –≤ —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –Ω–µ ACK, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É

            # –±–∞—Ç—á–µ–≤—ã–π ACK –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            if to_ack:
                await redis.xack(POSITIONS_OPEN_STREAM, group, *to_ack)

        except Exception as e:
            log.error(f"run loop error: {e}", exc_info=True)
            await asyncio.sleep(0.5)