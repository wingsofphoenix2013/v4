# üî∏ indicators/compute_and_store.py
import logging
from indicators import ema  # –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ ema

# üî∏ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
INDICATOR_DISPATCH = {
    "ema": ema.compute,
}

# üî∏ –†–∞—Å—á—ë—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
async def compute_and_store(instance_id, instance, symbol, df, ts, pg, redis):
    log = logging.getLogger("CALC")

    indicator = instance["indicator"]
    timeframe = instance["timeframe"]
    params = instance["params"]
    stream = instance["stream_publish"]

    compute_fn = INDICATOR_DISPATCH.get(indicator)
    if compute_fn is None:
        log.warning(f"‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
        return

    try:
        result = compute_fn(df, params)  # {'value': float, ...}
        precision = active_tickers.get(symbol, 8)
        result = {k: round(v, precision) for k, v in result.items()}
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ {indicator} id={instance_id}: {e}")
        return

    log.info(f"‚úÖ {indicator.upper()} id={instance_id} {symbol}/{timeframe} ‚Üí {result}")

    # üî∏ –í –±—É–¥—É—â–µ–º: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis, PG –∏ Stream