# indicator_healer.py ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ª–µ—á–µ–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: –≤—ã–±–æ—Ä –∏–∑ –ë–î –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞

import asyncio
import logging
from collections import defaultdict

log = logging.getLogger("IND_HEALER")

STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}

# üî∏ –í—ã–±–æ—Ä–∫–∞ ¬´–¥—ã—Ä¬ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º found –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (instance_id, symbol, timeframe)
async def fetch_found_gaps_grouped(pg, limit_pairs: int = 2000):
    async with pg.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT g.instance_id, g.symbol, g.open_time, g.param_name, i.timeframe
            FROM indicator_gap_v4 g
            JOIN indicator_instances_v4 i ON i.id = g.instance_id
            WHERE g.status = 'found' AND i.enabled = true
            ORDER BY g.instance_id, g.symbol, g.open_time
            LIMIT $1
            """,
            limit_pairs,
        )

    if not rows:
        return []

    grouped = {}  # (iid, symbol, tf) -> {open_time: set(param_name)}
    for r in rows:
        key = (r["instance_id"], r["symbol"], r["timeframe"])
        by_time = grouped.setdefault(key, defaultdict(set))
        by_time[r["open_time"]].add(r["param_name"])

    result = []
    for (iid, sym, tf), by_time in grouped.items():
        result.append((iid, sym, tf, dict(by_time)))
    return result

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä healer (—ç—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø)
async def run_indicator_healer(pg, redis, pause_sec: int = 2):
    log.info("HEALER –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω (—ç—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏)")
    while True:
        try:
            groups = await fetch_found_gaps_grouped(pg)
            if not groups:
                await asyncio.sleep(pause_sec)
                continue

            for iid, sym, tf, by_time in groups:
                total_points = len(by_time)
                total_params = sum(len(s) for s in by_time.values())
                log.info(f"[{sym}] [{tf}] inst={iid} –ø—Ä–æ–ø—É—Å–∫–∏: –±–∞—Ä–æ–≤ {total_points}, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {total_params}")
                for ot, params in by_time.items():
                    log.debug(f"[{sym}] [{tf}] inst={iid} {ot} ‚Üí {sorted(params)}")

            await asyncio.sleep(pause_sec)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ IND_HEALER: {e}", exc_info=True)
            await asyncio.sleep(pause_sec)