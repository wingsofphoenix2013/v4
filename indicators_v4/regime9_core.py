# üî∏ regime9_core.py ‚Äî –µ–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ regime9_code v2 (live + backfill)

from dataclasses import dataclass
from statistics import median
from typing import List, Tuple, Optional, Dict


# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑–≤–Ω–µ —á–µ—Ä–µ–∑ RegimeParams)
EPS_Z_DEFAULT = 0.5        # –ø–æ—Ä–æ–≥ –¥–ª—è z-score(ŒîMACD)
HYST_TREND_BARS = 2        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Ç—Ä–µ–Ω–¥‚Üî—Ñ–ª–µ—Ç), –±–∞—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
HYST_SUB_BARS = 1          # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (accel/stable/decel), –±–∞—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
Z_WINSOR = 5.0             # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ z-score –ø–æ –º–æ–¥—É–ª—é
BB_EPS = 1e-9              # –∑–∞—â–∏—Ç–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç–∏ –Ω–æ–ª—å


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è/–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dataclass
class RegimeState:
    core: str = "flat"      # 'flat' | 'trend'
    core_cnt: int = 0       # —Å—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–º–µ–Ω—ã core
    sub: str = "stable"     # 'accel' | 'stable' | 'decel' (–∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –≤ 'trend')
    sub_cnt: int = 0        # —Å—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–º–µ–Ω—ã sub


@dataclass
class RegimeParams:
    hyst_trend_bars: int = HYST_TREND_BARS
    hyst_sub_bars: int = HYST_SUB_BARS
    eps_z: float = EPS_Z_DEFAULT


# üî∏ –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ p30/p70 –Ω–∞ —Å–ø–∏—Å–∫–µ (–±–µ–∑ numpy)
def _p30(vals: List[float]) -> float:
    if not vals:
        return float("nan")
    k = max(0, int(0.30 * (len(vals) - 1)))
    return sorted(vals)[k]


def _p70(vals: List[float]) -> float:
    if not vals:
        return float("nan")
    k = max(0, int(0.70 * (len(vals) - 1)))
    return sorted(vals)[k]


# üî∏ MAD –∏ z-score —Å –∑–∞—â–∏—Ç–æ–π –∏ winsorize
def _mad(vals: List[float]) -> float:
    if not vals:
        return 0.0
    m = median(vals)
    dev = [abs(x - m) for x in vals]
    s = median(dev)
    return s if s > 0.0 else BB_EPS


def _zscore(x: float, vals: List[float]) -> float:
    m = median(vals) if vals else 0.0
    s = _mad(vals)
    z = (x - m) / s
    # winsorize
    if z > Z_WINSOR:
        z = Z_WINSOR
    elif z < -Z_WINSOR:
        z = -Z_WINSOR
    return z


# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∫–ª–æ–Ω–∞ EMA —Å —É—á—ë—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
def _normalized_slope(tf: str, ema_t1: float, ema_t: float,
                      atr_t: Optional[float],
                      bb_center_t: Optional[float]) -> float:
    raw = ema_t - ema_t1
    # –ù–∞ m5/m15 –Ω–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ ATR; –Ω–∞ h1 ‚Äì –Ω–∞ —Ü–µ–Ω—Ç—Ä BB (–∫–∞–∫ —Å—É—Ä—Ä–æ–≥–∞—Ç –º–∞—Å—à—Ç–∞–±–∞)
    if tf in ("m5", "m15"):
        denom = atr_t if (atr_t is not None and atr_t > 0.0) else 1.0
    else:
        c = bb_center_t if (bb_center_t is not None and abs(bb_center_t) > BB_EPS) else 1.0
        denom = abs(c)
    return raw / denom if denom != 0.0 else raw


# üî∏ –†–∞—Å—á—ë—Ç —à–∏—Ä–∏–Ω—ã –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –∏ –µ—ë –ø–æ—Ä–æ–≥–æ–≤
def _bb_width_and_thresholds(bb_u: List[float], bb_l: List[float], bb_c: List[float]) -> Tuple[float, float, float]:
    # –¢–µ–∫—É—â–∞—è —à–∏—Ä–∏–Ω–∞
    c_t = bb_c[-1] if bb_c else 0.0
    if abs(c_t) <= BB_EPS:
        # –µ—Å–ª–∏ —Ü–µ–Ω—Ç—Ä –ø–æ—á—Ç–∏ –Ω–æ–ª—å, –¥–µ–ª–∏–º –Ω–∞ 1 —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å —Ä–∞—Å—á—ë—Ç ‚Äî –º–∞—Å—à—Ç–∞–± –Ω–µ –≤–∞–∂–µ–Ω, –≤–∞–∂–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        c_t = 1.0
    bbw_series = []
    for u, l, c in zip(bb_u, bb_l, bb_c):
        denom = c if abs(c) > BB_EPS else 1.0
        bbw_series.append((u - l) / denom)
    bbw_t = bbw_series[-1] if bbw_series else 0.0
    bb_low = _p30(bbw_series)
    bb_high = _p70(bbw_series)
    # –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ—Ä—è–¥–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
    if bb_low > bb_high:
        bb_low, bb_high = bb_high, bb_low
    return bbw_t, bb_low, bb_high


# üî∏ –ü–æ—Ä–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ADX —Å –∑–∞—â–∏—Ç–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–ª—ë—Ç–∞
def _adx_thresholds(adx_win: List[float]) -> Tuple[float, float, float]:
    adx = adx_win[-1]
    low = max(_p30(adx_win), 15.0)
    high = min(_p70(adx_win), 30.0)
    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    if (high - low) < 4.0:
        low = min(low, 18.0)
        high = max(high, 28.0)
    return adx, low, high


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –¥–ª—è core: 'flat' ‚Üî 'trend'
def _update_core_with_hysteresis(state: RegimeState, adx: float, low: float, high: float, need: int) -> None:
    # –ï—Å–ª–∏ —É–∂–µ 'trend' ‚Äî –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ö–æ–¥–∞ –Ω–∏–∂–µ low
    if state.core == "trend":
        if adx <= low:
            state.core_cnt += 1
            if state.core_cnt >= need:
                state.core = "flat"
                state.core_cnt = 0
                # –ø—Ä–∏ —Å–º–µ–Ω–µ core —Å–±—Ä–∞—Å—ã–≤–∞–µ–º sub
                state.sub = "stable"
                state.sub_cnt = 0
        else:
            state.core_cnt = 0
    # –ï—Å–ª–∏ —É–∂–µ 'flat' ‚Äî –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –≤—ã—à–µ high
    else:  # 'flat'
        if adx >= high:
            state.core_cnt += 1
            if state.core_cnt >= need:
                state.core = "trend"
                state.core_cnt = 0
                # –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ç—Ä–µ–Ω–¥ sub –æ—Å—Ç–∞–≤–ª—è–µ–º 'stable' (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –¥–∞–ª–µ–µ)
                state.sub = "stable"
                state.sub_cnt = 0
        else:
            state.core_cnt = 0


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –¥–ª—è sub (–≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–Ω–¥–∞): accel/stable/decel
def _update_sub_with_hysteresis(state: RegimeState, desired: str, need: int) -> None:
    if state.sub == desired:
        state.sub_cnt = 0
        return
    state.sub_cnt += 1
    if state.sub_cnt >= need:
        state.sub = desired
        state.sub_cnt = 0


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ä–µ–∂–∏–º—É (0..8) —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
def decide_regime_code(
    tf: str,
    features: Dict[str, object],
    state: RegimeState,
    params: RegimeParams
) -> Tuple[int, RegimeState, Dict[str, float]]:
    """
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è features:
      ema_t1: float
      ema_t: float
      macd_t1: float
      macd_t: float
      dhist_win: List[float]           # –æ–∫–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ŒîMACD (–Ω–µ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π, –ª–∏–±–æ –≤–∫–ª—é—á–∞—è ‚Äì –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è MAD)
      adx_win: List[float]             # –æ–∫–Ω–æ –¥–ª—è ADX (‚âà200)
      bb_u_win: List[float]
      bb_l_win: List[float]
      bb_c_win: List[float]
      atr_t: Optional[float]           # —Ç–æ–ª—å–∫–æ –¥–ª—è m5/m15; –Ω–∞ h1 = None
      atr_win: Optional[List[float]]   # –æ–∫–Ω–æ ATR –¥–ª—è m5/m15; –Ω–∞ h1 = None
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (code 0..8, –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π state, diag dict)
    """
    ema_t1 = float(features["ema_t1"])
    ema_t = float(features["ema_t"])
    macd_t1 = float(features["macd_t1"])
    macd_t = float(features["macd_t"])
    dhist_win = list(features.get("dhist_win", []))  # —Ç–∏–ø: List[float]
    adx_win = list(features["adx_win"])
    bb_u = list(features["bb_u_win"])
    bb_l = list(features["bb_l_win"])
    bb_c = list(features["bb_c_win"])
    atr_t = features.get("atr_t", None)
    atr_win = features.get("atr_win", None)

    # ŒîMACD –∏ z-score
    d_hist = macd_t - macd_t1
    z = _zscore(d_hist, dhist_win) if dhist_win else 0.0

    # –ü–æ—Ä–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ADX
    adx, adx_low, adx_high = _adx_thresholds(adx_win)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ core (trend/flat) —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
    _update_core_with_hysteresis(state, adx, adx_low, adx_high, params.hyst_trend_bars)

    # –®–∏—Ä–∏–Ω–∞ BB –∏ –ø–æ—Ä–æ–≥–∏
    bb_width, bb_low, bb_high = _bb_width_and_thresholds(bb_u, bb_l, bb_c)

    # –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–ª–æ–Ω EMA (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ 'trend')
    bb_center_t = bb_c[-1] if bb_c else None
    slope = _normalized_slope(tf, ema_t1, ema_t, atr_t, bb_center_t)

    # –í–µ—Ç–∫–∞ FLAT
    if state.core == "flat":
        # ATR-–ø–æ—Ä–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è m5/m15), –Ω–∞ h1 –æ—Å—Ç–∞–≤–ª—è–µ–º None
        atr = float(atr_t) if (atr_t is not None) else None
        atr_low = _p30(atr_win) if (atr_win is not None and len(atr_win) > 0) else None
        atr_high = _p70(atr_win) if (atr_win is not None and len(atr_win) > 0) else None

        if bb_width <= bb_low and (atr is None or (atr_low is not None and atr <= atr_low)):
            code = 0  # F_CONS
        elif bb_width >= bb_high:
            code = 1  # F_EXP
        else:
            code = 2  # F_DRIFT

        diag = {
            "adx": adx, "adx_low": adx_low, "adx_high": adx_high,
            "bb_width": bb_width, "bb_low": bb_low, "bb_high": bb_high,
            "atr": (atr if atr is not None else float("nan")),
            "atr_low": (float(atr_low) if atr_low is not None else float("nan")),
            "atr_high": (float(atr_high) if atr_high is not None else float("nan")),
            "ema_slope": slope,
            "macd_hist": macd_t,
            "d_hist": d_hist,
            "z_d_hist": z
        }
        return code, state, diag

    # –í–µ—Ç–∫–∞ TREND: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ä–µ–∂–∏–º –ø–æ z –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞–∫—É slope
    desired_sub = "stable"
    if z > +params.eps_z:
        desired_sub = "accel"
    elif z < -params.eps_z:
        desired_sub = "decel"
    _update_sub_with_hysteresis(state, desired_sub, params.hyst_sub_bars)

    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ –∑–Ω–∞–∫—É –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–∞
    direction_up = slope > 0.0
    # –í —Ä–µ–¥–∫–æ–º —Å–ª—É—á–∞–µ slope==0.0 –º–æ–∂–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫ MACD_hist
    if slope == 0.0:
        direction_up = (macd_t >= 0.0)

    # –ö–æ–¥–∏—Ä–æ–≤–∫–∞: Up: 3..5, Down: 6..8
    sub_idx = 0 if state.sub == "accel" else (1 if state.sub == "stable" else 2)
    code = (3 + sub_idx) if direction_up else (6 + sub_idx)

    diag = {
        "adx": adx, "adx_low": adx_low, "adx_high": adx_high,
        "bb_width": bb_width, "bb_low": bb_low, "bb_high": bb_high,
        "atr": (float(atr_t) if atr_t is not None else float("nan")),
        "atr_low": (float(_p30(atr_win)) if atr_win else float("nan")),
        "atr_high": (float(_p70(atr_win)) if atr_win else float("nan")),
        "ema_slope": slope,
        "macd_hist": macd_t,
        "d_hist": d_hist,
        "z_d_hist": z
    }
    return code, state, diag