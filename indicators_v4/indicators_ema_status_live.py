# üî∏ indicators_ema_status_live.py ‚Äî live: on-demand EMA-status –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Redis KV

import os
import asyncio
import json
import logging
from datetime import datetime, timezone

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("EMA_STATUS_LIVE")

# üî∏ –ö–æ–Ω—Ñ–∏–≥
EMA_LENS = [int(x) for x in os.getenv("EMA_STATUS_EMA_LENS", "9,21,50,100,200").split(",")]
INTERVAL_SEC = int(os.getenv("EMA_STATUS_LIVE_INTERVAL", "60"))    # –ø–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
CONCURRENCY  = int(os.getenv("EMA_STATUS_LIVE_CONCURRENCY", "8"))  # –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –ø–æ —Ç–∏–∫–µ—Ä–∞–º
EPS0 = float(os.getenv("EMA_STATUS_EPS0", "0.05"))  # –∑–æ–Ω–∞ equal
EPS1 = float(os.getenv("EMA_STATUS_EPS1", "0.02"))  # –∑–Ω–∞—á–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ŒîD

# üî∏ –ö–ª—é—á–∏ –∏ –≥—Ä—É–ø–ø—ã on-demand
REQ_STREAM  = "indicator_request"
RESP_STREAM = "indicator_response"
RESP_GROUP  = os.getenv("EMA_STATUS_LIVE_RESP_GROUP", "ema_status_live")
RESP_CONSUM = os.getenv("EMA_STATUS_LIVE_CONSUMER",   "ema_status_live_1")

# üî∏ –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–∞ ‚Üí label
STATE_LABELS = {
    0: "below_away",
    1: "below_towards",
    2: "equal",
    3: "above_towards",
    4: "above_away",
}

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
def _floor_to_bar_ms(now_ms: int, tf: str) -> int:
    step = 300_000 if tf == "m5" else (900_000 if tf == "m15" else 3_600_000)
    return (now_ms // step) * step

def _prev_bar_ms(open_ms: int, tf: str) -> int:
    step = 300_000 if tf == "m5" else (900_000 if tf == "m15" else 3_600_000)
    return open_ms - step

def _to_ms(dt: datetime) -> int:
    return int(dt.replace(tzinfo=timezone.utc).timestamp() * 1000)

# üî∏ TS –∫–ª—é—á–∏ (Close/EMA/ATR/BB)
def k_close(sym: str, tf: str) -> str:
    return f"ts:{sym}:{tf}:c"

def k_ema(sym: str, tf: str, L: int) -> str:
    return f"ts_ind:{sym}:{tf}:ema{L}"

def k_atr(sym: str, tf: str) -> str:
    return f"ts_ind:{sym}:{tf}:atr14"

def k_bb(sym: str, tf: str, part: str) -> str:
    return f"ts_ind:{sym}:{tf}:bb20_2_0_{part}"

# üî∏ KV –∫–ª—é—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ live-—Å—Ç–∞—Ç—É—Å–æ–≤
def kv_tf(symbol: str, tf: str, L: int) -> str:
    return f"indlive:{symbol}:{tf}:ema{L}_status"

def kv_comp(symbol: str, L: int) -> str:
    return f"indlive:{symbol}:ema{L}_triplet"

# üî∏ –ü—Ä–æ—Å—Ç–æ–π TS.RANGE —Ç–æ—á–µ—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
async def ts_get(redis, key: str, ts_ms: int):
    try:
        r = await redis.execute_command("TS.RANGE", key, ts_ms, ts_ms)
        if r and int(r[0][0]) == ts_ms:
            return float(r[0][1])
    except Exception as e:
        log.debug("[TSERR] key=%s err=%s", key, e)
    return None

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ instance_id –¥–ª—è on-demand (EMA/ATR/BB), –∫–µ—à –≤ –ø–∞–º—è—Ç–∏
async def load_instance_map(pg) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
      'm5':  {'ema': {9:id,...}, 'atr14': id_or_None, 'bb': id_bb},
      'm15': {...}, 'h1': {'ema': {...}, 'atr14': None, 'bb': id_bb}
    }
    """
    out = {'m5': {'ema': {}}, 'm15': {'ema': {}}, 'h1': {'ema': {}}}
    async with pg.acquire() as conn:
        # EMA
        rows = await conn.fetch("""
            SELECT i.id, i.timeframe, p.value::int AS len
            FROM indicator_instances_v4 i
            JOIN indicator_parameters_v4 p ON p.instance_id=i.id AND p.param='length'
            WHERE i.enabled = true AND i.indicator='ema' AND i.timeframe IN ('m5','m15','h1')
              AND p.value::int = ANY($1::int[])
        """, EMA_LENS)
        for r in rows:
            out[r['timeframe']].setdefault('ema', {})[int(r['len'])] = int(r['id'])
        # ATR14 (—Ç–æ–ª—å–∫–æ m5/m15)
        rows = await conn.fetch("""
            SELECT i.id, i.timeframe
            FROM indicator_instances_v4 i
            JOIN indicator_parameters_v4 p ON p.instance_id=i.id AND p.param='length'
            WHERE i.enabled = true AND i.indicator='atr' AND i.timeframe IN ('m5','m15') AND p.value::int=14
        """)
        for r in rows:
            out[r['timeframe']]['atr14'] = int(r['id'])
        # BB 20/2.0 (–≤—Å–µ TF)
        rows = await conn.fetch("""
            SELECT i.id, i.timeframe
            FROM indicator_instances_v4 i
            JOIN indicator_parameters_v4 p1 ON p1.instance_id=i.id AND p1.param='length' AND p1.value::int=20
            JOIN indicator_parameters_v4 p2 ON p2.instance_id=i.id AND p2.param='std'
            WHERE i.enabled = true AND i.indicator='bb' AND i.timeframe IN ('m5','m15','h1')
              AND (p2.value::text='2.0' OR p2.value::text='2')
        """)
        for r in rows:
            out[r['timeframe']]['bb'] = int(r['id'])
    # –∑–∞–ø–æ–ª–Ω–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ atr14 None
    for tf in ('m5','m15','h1'):
        out[tf].setdefault('atr14', None)
    return out

# üî∏ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –¥–ª—è indicator_response (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def ensure_resp_group(redis):
    try:
        await redis.xgroup_create(RESP_STREAM, RESP_GROUP, id="$", mkstream=True)
        log.info("‚úÖ resp-group '%s' —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ '%s'", RESP_GROUP, RESP_STREAM)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è resp-group '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", RESP_GROUP)
        else:
            log.exception("‚ùå XGROUP CREATE (resp) error: %s", e)
            raise

# üî∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç on-demand –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ TF (EMA/ATR/BB) –Ω–∞ bar_open, –≤–µ—Ä–Ω—É—Ç—å {req_id: ('ema',L| 'atr'| 'bb')}
async def send_requests_for_tf(redis, symbol: str, tf: str, bar_open_ms: int, inst_map: dict) -> dict:
    pending = {}
    # EMA
    for L in EMA_LENS:
        inst_id = inst_map[tf]['ema'].get(L)
        if not inst_id: continue
        req_id = await redis.xadd(REQ_STREAM, {
            "symbol": symbol, "timeframe": tf, "instance_id": str(inst_id), "timestamp_ms": str(bar_open_ms)
        })
        pending[req_id] = ('ema', L)
    # ATR14 (m5/m15)
    if inst_map[tf].get('atr14'):
        req_id = await redis.xadd(REQ_STREAM, {
            "symbol": symbol, "timeframe": tf, "instance_id": str(inst_map[tf]['atr14']), "timestamp_ms": str(bar_open_ms)
        })
        pending[req_id] = ('atr', None)
    # BB 20/2.0 (upper/center/lower –ø—Ä–∏–¥—É—Ç –æ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º)
    if inst_map[tf].get('bb'):
        req_id = await redis.xadd(REQ_STREAM, {
            "symbol": symbol, "timeframe": tf, "instance_id": str(inst_map[tf]['bb']), "timestamp_ms": str(bar_open_ms)
        })
        pending[req_id] = ('bb', None)
    return pending

# üî∏ –î–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–∞—à –ø–∞–∫–µ—Ç req_id ‚Üí —Å–æ–±—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è { 'ema':{L:val}, 'atr':val, 'bb':{'upper':..,'lower':..} }
async def collect_responses(redis, pending: dict, timeout_ms: int = 1500) -> dict:
    results = {'ema': {}, 'atr': None, 'bb': {}}
    want = set(pending.keys())
    # —á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–æ–π
    end = _to_ms(datetime.utcnow()) + timeout_ms
    while want and _to_ms(datetime.utcnow()) < end:
        resp = await redis.xreadgroup(RESP_GROUP, RESP_CONSUM, streams={RESP_STREAM: ">"}, count=100, block=200)
        if not resp:
            continue
        to_ack = []
        for _, messages in resp:
            for msg_id, data in messages:
                to_ack.append(msg_id)
                req_id = data.get("req_id")
                if req_id not in want:
                    continue
                status = data.get("status")
                if status != "ok":
                    want.discard(req_id)
                    continue
                try:
                    parsed = json.loads(data.get("results", "{}"))
                except Exception:
                    parsed = {}
                kind = pending[req_id]
                if kind[0] == 'ema':
                    # –æ–∂–∏–¥–∞–µ–º –∫–ª—é—á –≤–∏–¥–∞ 'ema{L}' –∏–ª–∏ 'ema'
                    val = None
                    # –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
                    for k in (f"ema{kind[1]}", "value"):
                        if k in parsed:
                            val = float(parsed[k])
                            break
                    if val is not None:
                        results['ema'][kind[1]] = val
                elif kind[0] == 'atr':
                    # 'atr14' –∏–ª–∏ 'atr'
                    for k in ("atr14", "atr"):
                        if k in parsed:
                            results['atr'] = float(parsed[k])
                            break
                elif kind[0] == 'bb':
                    # bb20_2_0_{upper,center,lower}
                    for k in parsed.keys():
                        if "upper" in k:
                            results['bb']['upper'] = float(parsed[k])
                        elif "lower" in k:
                            results['bb']['lower'] = float(parsed[k])
                        elif "center" in k:
                            results['bb']['center'] = float(parsed[k])
                want.discard(req_id)
        if to_ack:
            try:
                await redis.xack(RESP_STREAM, RESP_GROUP, *to_ack)
            except Exception:
                pass
    return results

# üî∏ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–¥–∏–Ω TF√óEMA)
def classify(price_t, price_p, ema_t, ema_p, scale_t, scale_p) -> int | None:
    if None in (price_t, price_p, ema_t, ema_p, scale_t, scale_p):
        return None
    if scale_t <= 0.0 or scale_p <= 0.0:
        return None
    nd_t = (price_t - ema_t) / scale_t
    nd_p = (price_p - ema_p) / scale_p
    d_t  = abs(nd_t)
    d_p  = abs(nd_p)
    delta_d = d_t - d_p
    if d_t <= EPS0:
        return 2
    above = nd_t > 0.0
    if delta_d >= EPS1:
        return 4 if above else 0
    elif delta_d <= -EPS1:
        return 3 if above else 1
    else:
        return 3 if above else 1  # –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ towards

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: —Å–æ–±—Ä–∞—Ç—å on-demand –ø–æ –≤—Å–µ–º TF ‚Üí —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã ‚Üí KV publish
async def process_symbol(pg, redis, symbol: str, inst_map: dict, price_key_fmt: str):
    now_ms = _to_ms(datetime.utcnow())
    tf_list = ('m5', 'm15', 'h1')
    tf_status: dict[str, dict[int, int]] = {tf: {} for tf in tf_list}  # tf -> {L -> code}

    # —Ü–µ–Ω–∞ —Å–µ–π—á–∞—Å (–∏–∑ –º–∞—Ä–∫–µ—Ç–∞/—Ä–µ–¥–∏—Å–∞)
    try:
        price_now = float(await redis.get(price_key_fmt.format(symbol=symbol)))
    except Exception:
        price_now = None

    if price_now is None:
        log.debug("[LIVE] %s: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ‚Üí skip", symbol)
        return

    # ensure resp group
    await ensure_resp_group(redis)

    for tf in tf_list:
        bar_open = _floor_to_bar_ms(now_ms, tf)
        prev_ms  = _prev_bar_ms(bar_open, tf)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º on-demand EMA/ATR/BB –Ω–∞ —Ç–µ–∫—É—â–∏–π –±–∞—Ä
        pending = await send_requests_for_tf(redis, symbol, tf, bar_open, inst_map)
        od = await collect_responses(redis, pending, timeout_ms=1500)

        # –¥–æ–±–∏—Ä–∞–µ–º prev –∏–∑ TS
        price_prev = await ts_get(redis, k_close(symbol, tf), prev_ms)
        scale_prev = None
        if tf in ('m5','m15'):
            atr_prev = await ts_get(redis, k_atr(symbol, tf), prev_ms)
            if atr_prev is not None and atr_prev > 0.0:
                scale_prev = atr_prev
            else:
                bbu_p = await ts_get(redis, k_bb(symbol, tf, 'upper'), prev_ms)
                bbl_p = await ts_get(redis, k_bb(symbol, tf, 'lower'), prev_ms)
                if bbu_p is not None and bbl_p is not None and (bbu_p - bbl_p) > 0.0:
                    scale_prev = bbu_p - bbl_p
        else:
            bbu_p = await ts_get(redis, k_bb(symbol, tf, 'upper'), prev_ms)
            bbl_p = await ts_get(redis, k_bb(symbol, tf, 'lower'), prev_ms)
            if bbu_p is not None and bbl_p is not None and (bbu_p - bbl_p) > 0.0:
                scale_prev = bbu_p - bbl_p

        # –º–∞—Å—à—Ç–∞–± —Ç–µ–∫—É—â–∏–π –∏–∑ on-demand (m5/m15: ATR; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî bb width; h1: bb width)
        scale_now = None
        if tf in ('m5','m15'):
            if od.get('atr') is not None and od['atr'] > 0.0:
                scale_now = od['atr']
            else:
                bu = od['bb'].get('upper'); bl = od['bb'].get('lower')
                if bu is not None and bl is not None and (bu - bl) > 0.0:
                    scale_now = bu - bl
        else:
            bu = od['bb'].get('upper'); bl = od['bb'].get('lower')
            if bu is not None and bl is not None and (bu - bl) > 0.0:
                scale_now = bu - bl

        # –¥–ª—è –∫–∞–∂–¥–æ–π EMA –¥–ª–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–¥
        for L in EMA_LENS:
            ema_t = od['ema'].get(L)
            ema_p = await ts_get(redis, k_ema(symbol, tf, L), prev_ms)
            code = classify(price_now, price_prev, ema_t, ema_p, scale_now, scale_prev)
            if code is not None:
                tf_status[tf][L] = code
                # KV per-TF
                try:
                    await redis.set(kv_tf(symbol, tf, L), str(code))
                except Exception:
                    pass

    # –∫–æ–º–ø–æ–∑–∏—Ç—ã: —Å–æ–±–µ—Ä—ë–º —Ç—Ä–æ–π–∫–∏ m5-m15-h1 –¥–ª—è –∫–∞–∂–¥–æ–π L
    for L in EMA_LENS:
        if all(L in tf_status[tf] for tf in ('m5','m15','h1')):
            triplet = f"{tf_status['m5'][L]}-{tf_status['m15'][L]}-{tf_status['h1'][L]}"
            try:
                await redis.set(kv_comp(symbol, L), triplet)
            except Exception:
                pass

# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª: –∫–∞–∂–¥—ã–µ INTERVAL_SEC, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º CONCURRENCY
async def run_indicators_ema_status_live(pg, redis):
    log.info("üöÄ EMA Status LIVE: interval=%ds, concurrency=%d, eps0=%.3f eps1=%.3f",
             INTERVAL_SEC, CONCURRENCY, EPS0, EPS1)

    # –∑–∞–≥—Ä—É–∑–∏–º –∏–Ω—Å—Ç–∞–Ω—Å—ã on-demand
    inst_map = await load_instance_map(pg)
    # –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    async with pg.acquire() as conn:
        rows = await conn.fetch("""
            SELECT symbol
            FROM tickers_v4
            WHERE status='enabled' AND tradepermission='enabled'
        """)
    symbols = [r['symbol'] for r in rows]

    sem = asyncio.Semaphore(CONCURRENCY)
    price_key_fmt = os.getenv("EMA_STATUS_LIVE_PRICE_KEY_FMT", "mark:{symbol}:price")

    while True:
        started = datetime.utcnow()
        try:
            # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            async def runner(sym: str):
                async with sem:
                    await process_symbol(pg, redis, sym, inst_map, price_key_fmt)

            tasks = [asyncio.create_task(runner(sym)) for sym in symbols]
            await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            log.exception("‚ùå LIVE loop error: %s", e)

        # –º—è–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
        elapsed = (datetime.utcnow() - started).total_seconds()
        sleep_sec = max(0.0, INTERVAL_SEC - elapsed)
        await asyncio.sleep(sleep_sec)