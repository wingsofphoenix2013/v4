# indicators_ema_status_live.py ‚Äî –µ–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π –∫–∞—Ä–∫–∞—Å on-demand EMA-status –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–∞—Ä—É (–≠—Ç–∞–ø 1)

import os
import asyncio
import logging
from datetime import datetime

log = logging.getLogger("EMA_STATUS_LIVE")

# üî∏ –ö–æ–Ω—Ñ–∏–≥
INTERVAL_SEC = int(os.getenv("EMA_STATUS_LIVE_INTERVAL_SEC", "60"))
REQUIRED_TFS = ("m5", "m15", "h1")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (–≠—Ç–∞–ø 1: —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä –∏ –ø–ª–∞–Ω –æ–±—Ö–æ–¥–∞)
async def run_indicators_ema_status_live(pg, redis, get_instances_by_tf, get_precision, get_active_symbols):
    """
    –≠—Ç–∞–ø 1:
      - –ö–∞–∂–¥—ã–µ INTERVAL_SEC —Å–µ–∫—É–Ω–¥ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ç–∏–∫.
      - –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç—Ä—ë—Ö –¢–§.
      - –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–¥–∞–Ω–∏—è (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤).
    –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≠—Ç–∞–ø—É 2 —ç—Ç–∏ –ª–æ–≥–∏ –±—É–¥—É—Ç –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–æ DEBUG.
    """
    while True:
        try:
            tick_iso = datetime.utcnow().isoformat()
            symbols = list(get_active_symbols() or [])
            planned = 0

            log.info("[TICK] start @ %s, symbols=%d", tick_iso, len(symbols))

            for sym in symbols:
                # (–Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)
                for tf in REQUIRED_TFS:
                    log.info("[PLAN] symbol=%s tf=%s", sym, tf)
                    planned += 1

            log.info("[TICK] end, planned=%d", planned)

        except Exception as e:
            log.error("loop error: %s", e, exc_info=True)

        await asyncio.sleep(INTERVAL_SEC)