# indicators_ema_status_live.py ‚Äî –µ–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π on-demand EMA-status: –≠—Ç–∞–ø 2 (—Å—Ä–µ–∑ DF –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–∞—Ä—É)

import os
import asyncio
import logging
from datetime import datetime
import pandas as pd

log = logging.getLogger("EMA_STATUS_LIVE")

# üî∏ –ö–æ–Ω—Ñ–∏–≥
INTERVAL_SEC = int(os.getenv("EMA_STATUS_LIVE_INTERVAL_SEC", "60"))
REQUIRED_TFS = ("m5", "m15", "h1")
REQUIRED_BARS_DEFAULT = int(os.getenv("EMA_STATUS_LIVE_REQUIRED_BARS", "800"))

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞–ø—ã –¥–ª—è —à–∞–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
_STEP_MS = {"m5": 300_000, "m15": 900_000, "h1": 3_600_000}
_FIELDS = ("o", "h", "l", "c", "v")

# üî∏ –§–ª–æ—Ä –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞ TF (UTC, –º—Å)
def _floor_to_bar_ms(ts_ms: int, tf: str) -> int:
    step = _STEP_MS[tf]
    return (ts_ms // step) * step

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ Redis TS –¥–æ bar_open_ms –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤)
async def _load_df_for_current_bar(redis, symbol: str, tf: str, bar_open_ms: int, depth: int) -> pd.DataFrame | None:
    step_ms = _STEP_MS[tf]
    start_ts = bar_open_ms - (depth - 1) * step_ms
    keys = {f: f"ts:{symbol}:{tf}:{f}" for f in _FIELDS}
    tasks = {f: redis.execute_command("TS.RANGE", keys[f], start_ts, bar_open_ms) for f in _FIELDS}
    res = await asyncio.gather(*tasks.values(), return_exceptions=True)

    # —Å–æ–±—Ä–∞—Ç—å –ø–æ –æ–±—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É (–ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Ç–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏)
    series = {}
    for f, r in zip(tasks.keys(), res):
        if isinstance(r, Exception):
            log.debug("[TSERR] %s err=%s", keys[f], r)
            continue
        if r:
            series[f] = {int(ts): float(v) for ts, v in r if v is not None}

    if "c" not in series or not series["c"]:
        return None

    idx = sorted(series["c"].keys())
    data = {f: [series.get(f, {}).get(ts) for ts in idx] for f in _FIELDS}
    df = pd.DataFrame(data, index=pd.to_datetime(idx, unit="ms"))
    df.index.name = "open_time"
    return df

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä (–≠—Ç–∞–ø 2: —Ç–∞–π–º–µ—Ä + –ø–æ–ª—É—á–µ–Ω–∏–µ DF; –≠—Ç–∞–ø 1 –ª–æ–≥–∏ ‚Üí debug)
async def run_indicators_ema_status_live(pg, redis, get_instances_by_tf, get_precision, get_active_symbols):
    """
    –≠—Ç–∞–ø 2:
      - –ö–∞–∂–¥—ã–µ INTERVAL_SEC —Å–µ–∫—É–Ω–¥ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ç–∏–∫.
      - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ symbol –∏ TF —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º bar_open_ms (—Ç–µ–∫—É—â–∏–π –±–∞—Ä),
        –∑–∞–≥—Ä—É–∂–∞–µ–º OHLCV –∏–∑ Redis TS –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º DataFrame, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –ø–æ bar_open_ms.
      - –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö –∑–∞–≥—Ä—É–∑–∫–∏ DF –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤.
    """
    while True:
        try:
            tick_iso = datetime.utcnow().isoformat()
            symbols = list(get_active_symbols() or [])
            planned = 0
            ok = 0
            skipped = 0

            # –≠—Ç–∞–ø 1: –ø–æ–Ω–∏–∂–∞–µ–º –¥–æ debug
            log.debug("[TICK] start @ %s, symbols=%d", tick_iso, len(symbols))

            now_ms = int(datetime.utcnow().timestamp() * 1000)

            for sym in symbols:
                for tf in REQUIRED_TFS:
                    planned += 1
                    bar_open_ms = _floor_to_bar_ms(now_ms, tf)
                    df = await _load_df_for_current_bar(redis, sym, tf, bar_open_ms, REQUIRED_BARS_DEFAULT)
                    if df is None or df.empty:
                        skipped += 1
                        # –ù–∞ –≠—Ç–∞–ø–µ 2 —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ info, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∏–¥–µ—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã
                        log.info("[DF] miss %s/%s @ %s", sym, tf, datetime.utcfromtimestamp(bar_open_ms/1000).isoformat())
                        continue

                    ok += 1
                    # –≠—Ç–∞–ø 2: –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏ ‚Äî info
                    log.info("[DF] ok %s/%s bars=%d @ %s",
                             sym, tf, len(df), datetime.utcfromtimestamp(bar_open_ms/1000).isoformat())

            # –≠—Ç–∞–ø 1 –∏—Ç–æ–≥ ‚Äî debug
            log.debug("[TICK] end, planned=%d ok=%d skipped=%d", planned, ok, skipped)

        except Exception as e:
            log.error("loop error: %s", e, exc_info=True)

        await asyncio.sleep(INTERVAL_SEC)