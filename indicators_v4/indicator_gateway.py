# indicator_gateway.py ‚Äî on-demand –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä (RSI + MFI + BB)

import asyncio
import json
import logging
import time
from datetime import datetime

from packs.rsi_pack import build_rsi_pack
from packs.mfi_pack import build_mfi_pack
from packs.bb_pack  import build_bb_pack
from packs.pack_utils import floor_to_bar

log = logging.getLogger("IND_GATEWAY")

# üî∏ Streams
REQ_STREAM  = "indicator_gateway_request"
RESP_STREAM = "indicator_gateway_response"

# üî∏ TTL –±–∞—Ä–Ω–æ–≥–æ –∫—ç—à–∞/–ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
LIVE_TTL_SEC = 30

# üî∏ –ö–ª—é—á–∏ –∫—ç—à–∞/–ø—É–±–ª–∏—á–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
def cache_key(indicator: str, symbol: str, tf: str, base_or_len: str, bar_open_ms: int) -> str:
    # –¥–ª—è rsi/mfi base_or_len = "<length>"; –¥–ª—è bb ‚Äî "<base>"
    return f"gw_cache:{indicator}:{symbol}:{tf}:{base_or_len}:{bar_open_ms}"

def public_key(indicator: str, symbol: str, tf: str, base: str) -> str:
    # rsi ‚Üí rsi_pack:{symbol}:{tf}:rsi{L}
    # mfi ‚Üí mfi_pack:{symbol}:{tf}:mfi{L}
    # bb  ‚Üí bbpos_pack:{symbol}:{tf}:{base}
    if indicator == "bb":
        return f"bbpos_pack:{symbol}:{tf}:{base}"
    return f"{indicator}_pack:{symbol}:{tf}:{base}"


# üî∏ –†–∞–∑–±–æ—Ä std –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (2 –∑–Ω–∞–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏)
def parse_std(std_raw) -> float | None:
    try:
        return round(float(std_raw), 2)
    except Exception:
        return None


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä gateway (RSI + MFI + BB)
async def run_indicator_gateway(pg, redis, get_instances_by_tf, get_precision, compute_snapshot_values_async):
    log.debug("IND_GATEWAY: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    group = "gw_group"
    consumer = "gw_consumer"

    # —Å–æ–∑–¥–∞—Ç—å consumer-group
    try:
        await redis.xgroup_create(REQ_STREAM, group, id="$", mkstream=True)
    except Exception as e:
        if "BUSYGROUP" not in str(e):
            log.warning(f"xgroup_create error: {e}")

    while True:
        try:
            resp = await redis.xreadgroup(group, consumer, streams={REQ_STREAM: ">"}, count=50, block=2000)
            if not resp:
                continue

            to_ack = []

            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    t0 = time.monotonic()
                    try:
                        symbol   = data.get("symbol")
                        tf       = data.get("timeframe")
                        ind      = data.get("indicator")
                        length_s = data.get("length")    # –¥–ª—è rsi/mfi/bb
                        std_s    = data.get("std")       # —Ç–æ–ª—å–∫–æ –¥–ª—è bb
                        ts_raw   = data.get("timestamp_ms")

                        if not symbol or tf not in ("m5","m15","h1") or ind not in ("rsi","mfi","bb"):
                            await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status": "error", "error": "bad_request"})
                            continue

                        now_ms = int(ts_raw) if ts_raw else int(datetime.utcnow().timestamp() * 1000)
                        bar_open_ms = floor_to_bar(now_ms, tf)

                        # –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –ø–æ TF –∏ —Ç–∏–ø—É
                        instances = [i for i in get_instances_by_tf(tf) if i["indicator"] == ind]
                        if not instances:
                            await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"instance_not_found"})
                            continue

                        precision = get_precision(symbol) or 8
                        results = []

                        if ind in ("rsi", "mfi"):
                            # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω
                            if length_s:
                                try:
                                    L = int(length_s)
                                except Exception:
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"bad_length"})
                                    continue
                                if not any(int(i["params"]["length"]) == L for i in instances):
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"instance_not_found"})
                                    continue
                                lengths = [L]
                            else:
                                lengths = sorted({int(i["params"]["length"]) for i in instances})

                            for L in lengths:
                                # –∫—ç—à –Ω–∞ –±–∞—Ä (–∫–ª—é—á –ø–æ length)
                                ckey = cache_key(ind, symbol, tf, str(L), bar_open_ms)
                                pkey = public_key(ind, symbol, tf, f"{ind}{L}")

                                cached = await redis.get(ckey)
                                if cached:
                                    try:
                                        results.append(json.loads(cached))
                                        continue
                                    except Exception:
                                        pass

                                if ind == "rsi":
                                    pack = await build_rsi_pack(symbol, tf, L, now_ms, precision, redis, compute_snapshot_values_async)
                                else:
                                    pack = await build_mfi_pack(symbol, tf, L, now_ms, precision, redis, compute_snapshot_values_async)

                                if pack:
                                    data_json = json.dumps(pack)
                                    await redis.set(ckey, data_json, ex=LIVE_TTL_SEC)
                                    await redis.set(pkey, data_json, ex=LIVE_TTL_SEC)
                                    results.append(pack)

                        else:
                            # BB: —Ç—Ä–µ–±—É–µ—Ç—Å—è (length, std). –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ BB –ø–æ TF.
                            # –°–æ–±–µ—Ä—ë–º –Ω–∞–±–æ—Ä (length, std) –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤; std –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤.
                            active_pairs = []
                            for i in instances:
                                try:
                                    L = int(i["params"]["length"])
                                    S = round(float(i["params"]["std"]), 2)
                                    active_pairs.append((L, S))
                                except Exception:
                                    continue

                            pairs = []
                            if length_s and std_s:
                                try:
                                    L = int(length_s)
                                    S = parse_std(std_s)
                                except Exception:
                                    L, S = None, None
                                if (L, S) not in active_pairs:
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"instance_not_found"})
                                    continue
                                pairs = [(L, S)]
                            elif length_s and not std_s:
                                try:
                                    L = int(length_s)
                                except Exception:
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"bad_length"})
                                    continue
                                pairs = [(L, S) for (L2, S) in active_pairs if L2 == L]
                                if not pairs:
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"instance_not_found"})
                                    continue
                            elif std_s and not length_s:
                                S = parse_std(std_s)
                                pairs = [(L, S) for (L, S2) in active_pairs if S2 == S]
                                if not pairs:
                                    await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"instance_not_found"})
                                    continue
                            else:
                                # –Ω–∏ length, –Ω–∏ std ‚Üí –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ BB
                                pairs = sorted(set(active_pairs))

                            for (L, S) in pairs:
                                # base –≤—ã—á–∏—Å–ª–∏–º –≤–Ω—É—Ç—Ä–∏ build_bb_pack; –∫—ç—à–æ–º –ø–æ–ª—å–∑—É–µ–º—Å—è –ø–æ base
                                pack = None

                                # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –ø–æ base (–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω base ‚Üí —Å–≥–µ–Ω–µ—Ä–∏–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ pack)
                                # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ base –¥—É–±–ª–∏—Ä—É–µ–º –∑–¥–µ—Å—å (—á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞—Ç—å –ª–∏—à–Ω–∏–π —Ä–∞–∑):
                                std_str = str(round(float(S), 2)).replace(".", "_")
                                base = f"bb{int(L)}_{std_str}"

                                ckey = cache_key(ind, symbol, tf, base, bar_open_ms)
                                pkey = public_key(ind, symbol, tf, base)

                                cached = await redis.get(ckey)
                                if cached:
                                    try:
                                        results.append(json.loads(cached))
                                        continue
                                    except Exception:
                                        pass

                                pack = await build_bb_pack(symbol, tf, L, S, now_ms, precision, redis, compute_snapshot_values_async)
                                if pack:
                                    data_json = json.dumps(pack)
                                    await redis.set(ckey, data_json, ex=LIVE_TTL_SEC)
                                    await redis.set(pkey, data_json, ex=LIVE_TTL_SEC)
                                    results.append(pack)

                        if results:
                            await redis.xadd(RESP_STREAM, {
                                "req_id": msg_id,
                                "status": "ok",
                                "symbol": symbol,
                                "timeframe": tf,
                                "indicator": ind,
                                "results": json.dumps(results),
                            })
                        else:
                            await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status":"error", "error":"no_results"})

                        t1 = time.monotonic()
                        log.info(f"[DONE] IND_GATEWAY {ind.upper()} {symbol}/{tf} elapsed_ms={int((t1-t0)*1000)} results={len(results)}")

                    except Exception as e:
                        log.warning(f"[GW] error {e}", exc_info=True)
                        await redis.xadd(RESP_STREAM, {"req_id": msg_id, "status": "error", "error": "exception"})

            if to_ack:
                await redis.xack(REQ_STREAM, group, *to_ack)

        except Exception as e:
            log.error(f"IND_GATEWAY loop error: {e}", exc_info=True)
            await asyncio.sleep(2)