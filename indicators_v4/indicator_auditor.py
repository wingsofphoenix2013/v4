# indicator_auditor.py ‚Äî –∞—É–¥–∏—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ indicator_values_v4 –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è ¬´–¥—ã—Ä¬ª –≤ indicator_gap_v4

import asyncio
import logging
from datetime import datetime, timedelta

from indicators.compute_and_store import get_expected_param_names

log = logging.getLogger("IND_AUDITOR")

# üî∏ –®–∞–≥–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}

# üî∏ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —à–∞–≥—É
def align_start(ts, step_min: int) -> datetime:
    ts = ts.replace(second=0, microsecond=0)
    rem = ts.minute % step_min
    if rem:
        ts -= timedelta(minutes=rem)
    return ts

# üî∏ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –ø–æ –¢–§ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ enabled_at
async def fetch_enabled_instances_for_tf(pg, timeframe: str):
    async with pg.acquire() as conn:
        rows = await conn.fetch("""
            SELECT id, indicator, timeframe, stream_publish, enabled_at
            FROM indicator_instances_v4
            WHERE enabled = true AND timeframe = $1
        """, timeframe)

        result = []
        for r in rows:
            params = await conn.fetch("""
                SELECT param, value
                FROM indicator_parameters_v4
                WHERE instance_id = $1
            """, r["id"])
            param_map = {p["param"]: p["value"] for p in params}
            result.append({
                "id": r["id"],
                "indicator": r["indicator"],
                "timeframe": r["timeframe"],
                "enabled_at": r["enabled_at"],  # timestamp | None
                "params": param_map,
            })
        return result

# üî∏ –£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ–∫–Ω—É
async def existing_params_in_db(pg, instance_id: int, symbol: str, start_ts: datetime, end_ts: datetime):
    async with pg.acquire() as conn:
        rows = await conn.fetch("""
            SELECT open_time, param_name
            FROM indicator_values_v4
            WHERE instance_id = $1
              AND symbol = $2
              AND open_time BETWEEN $3 AND $4
        """, instance_id, symbol, start_ts, end_ts)

    by_time = {}
    for r in rows:
        by_time.setdefault(r["open_time"], set()).add(r["param_name"])
    return by_time

# üî∏ –ú–∞—Å—Å–æ–≤–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è ¬´–¥—ã—Ä¬ª –≤ indicator_gap_v4
async def insert_gaps(pg, gaps):
    """
    gaps: iterable[(instance_id, symbol, open_time, param_name)]
    """
    if not gaps:
        return 0
    async with pg.acquire() as conn:
        await conn.executemany("""
            INSERT INTO indicator_gap_v4 (instance_id, symbol, open_time, param_name, status)
            VALUES ($1, $2, $3, $4, 'found')
            ON CONFLICT (instance_id, symbol, open_time, param_name) DO NOTHING
        """, gaps)
    return len(gaps)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∞
async def run_indicator_auditor(pg, redis, window_hours: int = 12):
    """
    –°–ª—É—à–∞–µ—Ç iv4_inserted –∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —á–∞—Å–æ–≤)
    —Å —É—á—ë—Ç–æ–º enabled_at. –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ (param_name) —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ indicator_gap_v4.
    """
    log.info("–ê—É–¥–∏—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω (iv4_inserted)")

    stream = "iv4_inserted"
    group = "ind_audit_group"
    consumer = "ind_audit_1"

    # üî∏ –°–æ–∑–¥–∞—Ç—å consumer group (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    try:
        await redis.xgroup_create(stream, group, id="$", mkstream=True)
    except Exception as e:
        if "BUSYGROUP" not in str(e):
            log.warning(f"xgroup_create error: {e}")

    while True:
        try:
            resp = await redis.xreadgroup(group, consumer, streams={stream: ">"}, count=50, block=2000)
            if not resp:
                continue

            to_ack = []
            latest = {}  # (symbol, interval) -> max(open_time)

            # üî∏ –°–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö open_time –Ω–∞ –ø–∞—Ä—É (symbol, interval)
            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        symbol = data.get("symbol")
                        interval = data.get("interval")
                        open_time_iso = data.get("open_time")
                        if not symbol or interval not in STEP_MIN or not open_time_iso:
                            continue
                        end_dt = datetime.fromisoformat(open_time_iso)
                        key = (symbol, interval)
                        if key not in latest or end_dt > latest[key]:
                            latest[key] = end_dt
                    except Exception as e:
                        log.warning(f"parse iv4_inserted error: {e}")

            # üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
            for (symbol, interval), end_dt in latest.items():
                step_min = STEP_MIN[interval]
                end_dt = end_dt.replace(second=0, microsecond=0)
                start_dt = align_start(end_dt - timedelta(hours=window_hours), step_min)

                instances = await fetch_enabled_instances_for_tf(pg, interval)
                if not instances:
                    log.debug(f"[{symbol}] [{interval}] –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –¥–ª—è –∞—É–¥–∏—Ç–∞")
                    continue

                total_found = 0

                for inst in instances:
                    iid = inst["id"]
                    indicator = inst["indicator"]
                    params = inst["params"]
                    enabled_at = inst["enabled_at"]

                    # üî∏ –£—á–∏—Ç—ã–≤–∞–µ–º enabled_at: —Ä–∞–Ω—å—à–µ –º–æ–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                    eff_start = start_dt
                    if enabled_at:
                        eff_start = max(eff_start, enabled_at.replace(tzinfo=None))

                    # üî∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ open_time
                    times = []
                    t = eff_start
                    step = timedelta(minutes=step_min)
                    while t <= end_dt:
                        times.append(t)
                        t += step
                    if not times:
                        continue

                    # üî∏ –û–∂–∏–¥–∞–µ–º—ã–µ param_name –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    expected = set(get_expected_param_names(indicator, params))

                    # üî∏ –ß—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
                    have = await existing_params_in_db(pg, iid, symbol, eff_start, end_dt)

                    # üî∏ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
                    gaps = []
                    for ot in times:
                        present = have.get(ot, set())
                        missing = expected - present
                        if missing:
                            for pname in missing:
                                gaps.append((iid, symbol, ot, pname))

                    # üî∏ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
                    if gaps:
                        inserted = await insert_gaps(pg, gaps)
                        total_found += inserted

                log.info(f"[AUDIT] {symbol}/{interval} –æ–∫–Ω–æ {start_dt}..{end_dt} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total_found}")

            # üî∏ ACK –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if to_ack:
                await redis.xack(stream, group, *to_ack)

        except Exception as e:
            log.error(f"IND_AUDITOR loop error: {e}", exc_info=True)
            await asyncio.sleep(2)