# position_emapattern_worker.py ‚Äî —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ–∑–∏—Ü–∏–π –¥–ª—è EMA-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—ç—Ç–∞–ø 2: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)

import asyncio
import logging

log = logging.getLogger("IND_EMA_PATTERN_DICT")

STREAM   = "signal_log_queue"
GROUP    = "ema_pattern_aggr_group"
CONSUMER = "ema_aggr_1"


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer group –¥–ª—è —Å—Ç—Ä–∏–º–∞
async def _ensure_group(redis):
    try:
        await redis.xgroup_create(STREAM, GROUP, id="$", mkstream=True)
        log.info(f"–°–æ–∑–¥–∞–Ω–∞ consumer group {GROUP} –¥–ª—è {STREAM}")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug(f"Consumer group {GROUP} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            log.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group")
            raise


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞: —á–∏—Ç–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º
async def run_position_emapattern_worker(pg, redis):
    await _ensure_group(redis)

    while True:
        try:
            resp = await redis.xreadgroup(
                groupname=GROUP,
                consumername=CONSUMER,
                streams={STREAM: ">"},
                count=50,
                block=2000
            )
            if not resp:
                continue

            to_ack = []
            for _, messages in resp:
                for msg_id, data in messages:
                    to_ack.append(msg_id)
                    try:
                        status = data.get("status")
                        if status != "closed":
                            continue

                        position_uid = data.get("position_uid")
                        strategy_id  = data.get("strategy_id")
                        direction    = data.get("direction")  # –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å ‚Äî –æ–∫
                        logged_at    = data.get("logged_at")

                        # –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è; –¥–∞–ª—å–Ω–µ–π—à–∏–µ —ç—Ç–∞–ø—ã –¥–æ–±–∞–≤–∏–º –ø–æ—Ç–æ–º
                        log.info(f"[CLOSED] position_uid={position_uid} strategy_id={strategy_id} direction={direction} logged_at={logged_at}")

                    except Exception:
                        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ stream signal_log_queue")

            if to_ack:
                await redis.xack(STREAM, GROUP, *to_ack)

        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ IND_EMA_PATTERN_DICT: {e}", exc_info=True)
            await asyncio.sleep(2)