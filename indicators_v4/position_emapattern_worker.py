# position_emapattern_worker.py ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö total preorders –¥–ª—è EMA/PRICE (4683 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)

import asyncio
import logging
import json
from typing import List, Set, Tuple
from itertools import permutations

log = logging.getLogger("IND_EMA_PATTERN_DICT")

EMA_LENGTHS = [9, 21, 50, 100, 200]
TOKENS = ["PRICE"] + [f"EMA{l}" for l in EMA_LENGTHS]
IDLE_SLEEP_SEC = 3600
BATCH = 2000


# üî∏ –ö–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
def _canonicalize_group(group: Set[str]) -> List[str]:
    ordered: List[str] = []
    if "PRICE" in group:
        ordered.append("PRICE")
    emas = [t for t in group if t.startswith("EMA")]
    emas_sorted = sorted(emas, key=lambda t: int(t[3:]))
    if "PRICE" not in group:
        ordered = emas_sorted
    else:
        ordered.extend(emas_sorted)
    return ordered


# üî∏ –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞
def _pattern_text_from_blocks(blocks: List[Set[str]]) -> str:
    parts = []
    for blk in blocks:
        inner = " = ".join(_canonicalize_group(blk))
        parts.append(inner)
    return " > ".join(parts)


# üî∏ –°–±–æ—Ä–∫–∞ json-—Ñ–æ—Ä–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞
def _pattern_json_from_blocks(blocks: List[Set[str]]) -> List[List[str]]:
    return [_canonicalize_group(blk) for blk in blocks]


# üî∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–∞–∑–±–∏–µ–Ω–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (Stirling S(n,k)) —Å –ø–æ–º–æ—â—å—é RGS
def _generate_set_partitions(items: List[str]) -> List[List[Set[str]]]:
    n = len(items)
    if n == 0:
        return [[]]
    results: List[List[Set[str]]] = []
    rgs = [0] * n

    def backtrack(i: int, max_label: int):
        if i == n:
            k = max_label + 1
            blocks = [set() for _ in range(k)]
            for idx, lbl in enumerate(rgs):
                blocks[lbl].add(items[idx])
            results.append(blocks)
            return
        for lbl in range(max_label + 2):
            rgs[i] = lbl
            if lbl == max_label + 1:
                backtrack(i + 1, max_label + 1)
            else:
                backtrack(i + 1, max_label)

    backtrack(0, 0)
    return results


# üî∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–∏–µ–Ω–∏–π (total preorders): –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
def _generate_ordered_partitions(items: List[str]) -> List[List[Set[str]]]:
    ordered: List[List[Set[str]]] = []
    partitions = _generate_set_partitions(items)
    for blocks in partitions:
        k = len(blocks)
        if k == 0:
            continue
        for perm in permutations(range(k)):
            ordered.append([blocks[i] for i in perm])
    return ordered


# üî∏ –í—Å—Ç–∞–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞—á–∫–æ–π –≤ –ë–î
async def _insert_patterns(pg, rows: List[Tuple[str, str]]):
    if not rows:
        return
    async with pg.acquire() as conn:
        async with conn.transaction():
            await conn.executemany(
                """
                INSERT INTO indicator_emapattern_dict (pattern_text, pattern_json)
                VALUES ($1, $2::jsonb)
                ON CONFLICT (pattern_text) DO NOTHING
                """,
                rows,
            )


# üî∏ –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
async def _generate_and_store_catalog(pg):
    log.info("–°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ EMA/PRICE (total preorders)")

    # –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
    async with pg.acquire() as conn:
        count = await conn.fetchval("SELECT COUNT(*) FROM indicator_emapattern_dict")
    if count and int(count) > 0:
        log.info(f"–°–ª–æ–≤–∞—Ä—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–∏–µ–Ω–∏–π
    opartitions = _generate_ordered_partitions(TOKENS)

    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –∏ json-—Ñ–æ—Ä–º—ã, –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    seen = set()
    rows: List[Tuple[str, str]] = []
    for blocks in opartitions:
        ptext = _pattern_text_from_blocks(blocks)
        if ptext in seen:
            continue
        seen.add(ptext)
        pjson = json.dumps(_pattern_json_from_blocks(blocks), ensure_ascii=False)
        rows.append((ptext, pjson))

    # –æ–∂–∏–¥–∞–Ω–∏–µ 4683 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    log.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(rows)}")

    # –≤—Å—Ç–∞–≤–∫–∞ –ø–∞—á–∫–∞–º–∏
    total = 0
    for i in range(0, len(rows), BATCH):
        chunk = rows[i : i + BATCH]
        await _insert_patterns(pg, chunk)
        total += len(chunk)
        log.debug(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {total}/{len(rows)} –∑–∞–ø–∏—Å–µ–π")

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    async with pg.acquire() as conn:
        final_count = await conn.fetchval("SELECT COUNT(*) FROM indicator_emapattern_dict")
    log.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {final_count} –∑–∞–ø–∏—Å–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ")


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è run_safe_loop
async def run_position_emapattern_worker(pg, redis):
    try:
        await _generate_and_store_catalog(pg)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    while True:
        await asyncio.sleep(IDLE_SLEEP_SEC)