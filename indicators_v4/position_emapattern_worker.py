# position_emapattern_worker.py ‚Äî —Ä–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ EMA/PRICE

import asyncio
import logging
import json
from typing import List, Set

log = logging.getLogger("IND_EMA_PATTERN_DICT")

EMA_LENGTHS = [9, 21, 50, 100, 200]
TOKENS = ["PRICE"] + [f"EMA{l}" for l in EMA_LENGTHS]
IDLE_SLEEP_SEC = 10800


# üî∏ –ö–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ (PRICE —Å–ª–µ–≤–∞, EMA –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã)
def _canonicalize_group(group: Set[str]) -> List[str]:
    ordered = []
    if "PRICE" in group:
        ordered.append("PRICE")
    emas = [t for t in group if t.startswith("EMA")]
    emas_sorted = sorted(emas, key=lambda t: int(t[3:]))
    ordered.extend(emas_sorted)
    return ordered


# üî∏ –°–±–æ—Ä–∫–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
def _pattern_text_from_blocks(blocks: List[Set[str]]) -> str:
    parts = []
    for blk in blocks:
        inner = " = ".join(_canonicalize_group(blk))  # —Ä–∞–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ '='
        parts.append(inner)
    return " > ".join(parts)  # –≥—Ä—É–ø–ø—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ ' > '


# üî∏ –°–±–æ—Ä–∫–∞ –º–∞—à–∏–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (json-ready)
def _pattern_json_from_blocks(blocks: List[Set[str]]) -> List[List[str]]:
    return [_canonicalize_group(blk) for blk in blocks]


# üî∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–∏–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤ (weak orderings)
def _generate_ordered_partitions(items: List[str]) -> List[List[Set[str]]]:
    results: List[List[Set[str]]] = []

    def rec(idx: int, blocks: List[Set[str]]):
        if idx == len(items):
            results.append([set(b) for b in blocks])  # –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            return

        token = items[idx]

        # –≤–∞—Ä–∏–∞–Ω—Ç: –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å–ø—Ä–∞–≤–∞
        rec(idx + 1, blocks + [set([token])])

        # –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤ (—Å–¥–µ–ª–∞—Ç—å —Ä–∞–≤–Ω—ã–º)
        for i in range(len(blocks)):
            blocks[i].add(token)
            rec(idx + 1, blocks)
            blocks[i].remove(token)

    rec(0, [])
    return results


# üî∏ –í—Å—Ç–∞–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞—á–∫–æ–π –≤ –ë–î
async def _insert_patterns(pg, rows: List[tuple]):
    if not rows:
        return
    async with pg.acquire() as conn:
        async with conn.transaction():
            await conn.executemany(
                """
                INSERT INTO indicator_emapattern_dict (pattern_text, pattern_json)
                VALUES ($1, $2::jsonb)
                ON CONFLICT (pattern_text) DO NOTHING
                """,
                rows,
            )


# üî∏ –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
async def _generate_and_store_catalog(pg):
    log.info("–°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ EMA/PRICE")

    # –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞
    async with pg.acquire() as conn:
        count = await conn.fetchval("SELECT COUNT(*) FROM indicator_emapattern_dict")
    if count and int(count) > 0:
        log.info(f"–°–ª–æ–≤–∞—Ä—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–∏–µ–Ω–∏–π 6 —Ç–æ–∫–µ–Ω–æ–≤
    blocks_list = _generate_ordered_partitions(TOKENS)

    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –∏ json-—Ñ–æ—Ä–º—ã; –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    seen = set()
    rows: List[tuple] = []
    for blocks in blocks_list:
        ptext = _pattern_text_from_blocks(blocks)
        if ptext in seen:
            continue
        seen.add(ptext)
        pjson = json.dumps(_pattern_json_from_blocks(blocks), ensure_ascii=False)
        rows.append((ptext, pjson))

    # –≤—Å—Ç–∞–≤–∫–∞ –ø–∞—á–∫–∞–º–∏
    BATCH = 2000
    total = 0
    for i in range(0, len(rows), BATCH):
        chunk = rows[i : i + BATCH]
        await _insert_patterns(pg, chunk)
        total += len(chunk)
        log.debug(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {total}/{len(rows)} –∑–∞–ø–∏—Å–µ–π")

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫
    async with pg.acquire() as conn:
        final_count = await conn.fetchval("SELECT COUNT(*) FROM indicator_emapattern_dict")
    log.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {final_count} –∑–∞–ø–∏—Å–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ")


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è run_safe_loop
async def run_position_emapattern_worker(pg, redis):
    try:
        await _generate_and_store_catalog(pg)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    # —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä ¬´–∂–∏–≤—ã–º¬ª, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    while True:
        await asyncio.sleep(IDLE_SLEEP_SEC)