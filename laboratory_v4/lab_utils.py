# lab_utils.py ‚Äî —É—Ç–∏–ª–∏—Ç—ã laboratory_v4: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–∞—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ Redis TS –≤ DataFrame

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from typing import Optional
import pandas as pd

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("LAB_UTILS")

# üî∏ –¢–∞–π–º—à–∞–≥–∏ TF (–º—Å)
STEP_MS = {"m5": 300_000, "m15": 900_000, "h1": 3_600_000}

# üî∏ –ü—Ä–µ—Ñ–∏–∫—Å—ã Redis
BB_TS_PREFIX = "bb:ts"  # bb:ts:{symbol}:{tf}:{field}

# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞
def floor_to_bar(ts_ms: int, tf: str) -> int:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ ts_ms –≤–Ω–∏–∑ –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞ TF.
    """
    step = STEP_MS.get(tf)
    if step is None:
        raise ValueError(f"unsupported timeframe: {tf}")
    return (int(ts_ms) // step) * step

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ Redis TS –∏ —Å–±–æ—Ä–∫–∞ pandas.DataFrame
async def load_ohlcv_df(redis, symbol: str, tf: str, end_ts_ms: int, bars: int = 800) -> Optional[pd.DataFrame]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç OHLCV —Ä—è–¥—ã –¥–ª—è {symbol, tf} –∏–∑ RedisTimeSeries –∫–ª—é—á–µ–π bb:ts:{symbol}:{tf}:{o|h|l|c|v}
    –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start_ts, end_ts_ms], –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ DataFrame —Å –∏–Ω–¥–µ–∫—Å–æ–º open_time.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
    """
    step = STEP_MS.get(tf)
    if step is None:
        log.warning("load_ohlcv_df: unsupported tf=%s", tf)
        return None

    # –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
    start_ts = int(end_ts_ms) - (bars - 1) * step

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–∏ TS
    fields = ["o", "h", "l", "c", "v"]
    keys = {f: f"{BB_TS_PREFIX}:{symbol}:{tf}:{f}" for f in fields}

    # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–∞—Ç—á –Ω–∞ 5 TS.RANGE
    tasks = {f: redis.execute_command("TS.RANGE", keys[f], start_ts, end_ts_ms) for f in fields}
    try:
        results = await asyncio.gather(*tasks.values(), return_exceptions=True)
    except Exception as e:
        log.warning("[TS] batch RANGE error %s/%s: %s", symbol, tf, e)
        return None

    # –ø–∞—Ä—Å–∏–Ω–≥ —Å–µ—Ä–∏–π
    series = {}
    for f, res in zip(tasks.keys(), results):
        if isinstance(res, Exception):
            log.warning("[TS] RANGE %s error: %s", keys[f], res)
            continue
        if res:
            try:
                # res: [[ts, value], ...] ‚Üí {ts:int -> float(value)}
                series[f] = {int(ts): float(val) for ts, val in res if val is not None}
            except Exception as e:
                log.warning("[TS] parse %s error: %s", keys[f], e)

    # –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∑–∞–∫—Ä—ã—Ç–∏—è
    if not series or "c" not in series or not series["c"]:
        return None

    # –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ —Ç–∞–π–º—Å—Ç–∞–º–ø–∞–º close
    idx = sorted(series["c"].keys())
    if not idx:
        return None

    # —Å–æ–±–∏—Ä–∞–µ–º DataFrame –ø–æ –æ–±—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É (outer join –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—è–º)
    df = None
    for f in fields:
        col_map = series.get(f, {})
        s = pd.Series({ts: col_map.get(ts) for ts in idx})
        s.index = pd.to_datetime(s.index, unit="ms")
        s.name = f
        df = s.to_frame() if df is None else df.join(s, how="outer")

    if df is None or df.empty:
        return None

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    df.index.name = "open_time"
    df = df.sort_index()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞—Ä—ã)
    if len(df) < min(bars // 2, 100):  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ–≤—Å–µ–º –∫—Ä–æ—Ö–∏
        log.debug("load_ohlcv_df: too few rows (%d) for %s/%s", len(df), symbol, tf)
        return None

    return df