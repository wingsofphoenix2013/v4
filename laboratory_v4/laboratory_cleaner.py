# üî∏ laboratory_cleaner.py ‚Äî –≤–æ—Ä–∫–µ—Ä –æ—á–∏—Å—Ç–∫–∏: –ø–æ —Å–æ–±—ã—Ç–∏—é PACK_LISTS READY —á–∏—Å—Ç–∏—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–¥—Ä–µ–∑–∞–µ—Ç decision_response (—Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import List

import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_CLEANER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRIGGER_STREAM = "oracle:pack_lists:reports_ready"
CLEANER_CONSUMER_GROUP = "LAB_CLEANER_GROUP"
CLEANER_CONSUMER_NAME  = "LAB_CLEANER_WORKER"

# —Ä–µ—Ç–µ–Ω—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
RETENTION_DAYS = 8                 # –¥–µ—Ä–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É/—Ö–∏–¥—ã/–ø–æ–∑–∏—Ü–∏–∏ N —Å—É—Ç–æ–∫
STREAM_RETENTION_HOURS = 24        # –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç—Ä–∏–º–µ –¥–µ—Ä–∂–∏–º N —á–∞—Å–æ–≤

# —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –∏ –≤–∑–∞–∏–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
COOLDOWN_KEY     = "lab:cleaner:cooldown"   # —Ñ–ª–∞–≥ ¬´–Ω–µ–¥–∞–≤–Ω–æ —á–∏—Å—Ç–∏–ª–∏¬ª
COOLDOWN_EX_SEC  = 3600                     # 1 —á–∞—Å
RUNNING_LOCK_KEY = "lab:cleaner:running"    # –∑–∞–º–æ–∫ ¬´–æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è¬ª
RUNNING_EX_SEC   = 3600                     # –º–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —á–∏—Å—Ç–∫–∏

# —á—Ç–æ —á–∏—Å—Ç–∏–º –≤ –ë–î (—Å–º. _cleanup_once):
# 1) laboratory_bl_analysis, laboratory_wl_analysis ‚Äî –ø–æ computed_at
# 2) laboratory_request_tf –ø–æ head.finished_at; –∑–∞—Ç–µ–º laboratory_request_head ‚Äî –ø–æ finished_at
# 3) laboratory_positions_stat ‚Äî –ø–æ updated_at
# —Å—Ç—Ä–∏–º laboratory:decision_response ‚Äî XTRIM MINID < now-24h


# üî∏ –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_laboratory_cleaner():
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
    if infra.pg_pool is None or infra.redis_client is None:
        log.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫ LAB_CLEANER: PG/Redis –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return

    # —Å–æ–∑–¥–∞—Ç—å consumer group (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        await infra.redis_client.xgroup_create(
            name=TRIGGER_STREAM,
            groupname=CLEANER_CONSUMER_GROUP,
            id="$",
            mkstream=True,
        )
        log.debug("üì° LAB_CLEANER: —Å–æ–∑–¥–∞–Ω–∞ consumer group –¥–ª—è %s", TRIGGER_STREAM)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            pass
        else:
            log.exception("‚ùå LAB_CLEANER: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group")
            return

    log.info(
        "üöÄ LAB_CLEANER: —Å–ª—É—à–∞—é %s (retention=%dd, stream=%dh, cooldown=%dm)",
        TRIGGER_STREAM, RETENTION_DAYS, STREAM_RETENTION_HOURS, COOLDOWN_EX_SEC // 60
    )

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            resp = await infra.redis_client.xreadgroup(
                groupname=CLEANER_CONSUMER_GROUP,
                consumername=CLEANER_CONSUMER_NAME,
                streams={TRIGGER_STREAM: ">"},
                count=64,
                block=30_000,
            )
            if not resp:
                continue

            acks: List[str] = []
            triggered = False

            for _, msgs in resp:
                for msg_id, _fields in msgs:
                    try:
                        # –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ —á–∏—Å—Ç–∫—É –Ω–∞ —ç—Ç–æ–º –±–∞—Ç—á–µ, –ø—Ä–æ—Å—Ç–æ ACK
                        if triggered:
                            acks.append(msg_id)
                            continue

                        # —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å cooldown (SET NX EX)
                        if not await _try_set_cooldown():
                            acks.append(msg_id)
                            continue

                        # –≤–∑–∞–∏–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å ¬´running¬ª-–∑–∞–º–æ–∫
                        got_lock = await _try_acquire_running()
                        if not got_lock:
                            acks.append(msg_id)
                            continue

                        # –≤—ã–ø–æ–ª–Ω—è–µ–º —á–∏—Å—Ç–∫—É
                        try:
                            await _cleanup_once()
                            triggered = True
                        finally:
                            await _release_running()

                        acks.append(msg_id)
                    except Exception:
                        log.exception("‚ùå LAB_CLEANER: —Å–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        acks.append(msg_id)

            # ACK –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if acks:
                try:
                    await infra.redis_client.xack(TRIGGER_STREAM, CLEANER_CONSUMER_GROUP, *acks)
                except Exception:
                    log.exception("‚ö†Ô∏è LAB_CLEANER: –æ—à–∏–±–∫–∞ ACK (ids=%s)", acks)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_CLEANER: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_CLEANER: –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ ‚Äî –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown –Ω–∞ 1 —á–∞—Å (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—Ç–æ—è–ª)
async def _try_set_cooldown() -> bool:
    try:
        ok = await infra.redis_client.set(COOLDOWN_KEY, "1", ex=COOLDOWN_EX_SEC, nx=True)
        if ok:
            log.debug("‚è≤Ô∏è LAB_CLEANER: cooldown —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %d —Å–µ–∫", COOLDOWN_EX_SEC)
            return True
        log.debug("‚è≤Ô∏è LAB_CLEANER: –ø—Ä–æ–ø—É—Å–∫ ‚Äî cooldown –∞–∫—Ç–∏–≤–µ–Ω")
        return False
    except Exception:
        log.exception("‚ö†Ô∏è LAB_CLEANER: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cooldown")
        return False


# –±–µ—Ä—ë–º ¬´running¬ª-–∑–∞–º–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
async def _try_acquire_running() -> bool:
    try:
        ok = await infra.redis_client.set(RUNNING_LOCK_KEY, "1", ex=RUNNING_EX_SEC, nx=True)
        if ok:
            log.debug("üîí LAB_CLEANER: running-lock —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (EX=%d)", RUNNING_EX_SEC)
            return True
        log.debug("üîí LAB_CLEANER: –ø—Ä–æ–ø—É—Å–∫ ‚Äî —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è —á–∏—Å—Ç–∫–∞")
        return False
    except Exception:
        log.exception("‚ö†Ô∏è LAB_CLEANER: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ running-lock")
        return False


# —Å–Ω–∏–º–∞–µ–º ¬´running¬ª-–∑–∞–º–æ–∫
async def _release_running():
    try:
        await infra.redis_client.delete(RUNNING_LOCK_KEY)
        log.debug("üîì LAB_CLEANER: running-lock —Å–Ω—è—Ç")
    except Exception:
        log.exception("‚ö†Ô∏è LAB_CLEANER: –æ—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è running-lock")


# üî∏ –û–¥–∏–Ω —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ (–ë–î + —Å—Ç—Ä–∏–º)
async def _cleanup_once():
    cutoff_dt = datetime.utcnow().replace(tzinfo=None) - timedelta(days=RETENTION_DAYS)

    # —á–∏—Å—Ç–∫–∞ –ë–î –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            bl_del   = await _exec_delete(conn, "DELETE FROM laboratory_bl_analysis WHERE computed_at < $1", cutoff_dt)
            wl_del   = await _exec_delete(conn, "DELETE FROM laboratory_wl_analysis WHERE computed_at < $1", cutoff_dt)
            tf_del   = await _exec_delete(
                conn,
                """
                DELETE FROM laboratory_request_tf tf
                USING laboratory_request_head h
                WHERE tf.req_id = h.req_id
                  AND h.finished_at < $1
                """,
                cutoff_dt
            )
            head_del = await _exec_delete(conn, "DELETE FROM laboratory_request_head WHERE finished_at < $1", cutoff_dt)
            pos_del  = await _exec_delete(conn, "DELETE FROM laboratory_positions_stat WHERE updated_at < $1", cutoff_dt)

    log.info(
        "üßπ LAB_CLEANER: DB cleanup done (older than %s) ‚Äî bl=%d wl=%d tf=%d head=%d pos=%d",
        cutoff_dt.isoformat(), bl_del, wl_del, tf_del, head_del, pos_del
    )

    # —á–∏—Å—Ç–∏–º —Å—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ MINID < now-24h
    await _trim_decision_response_stream()


# –≤—ã–ø–æ–ª–Ω—è–µ–º DELETE –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
async def _exec_delete(conn, sql: str, *args) -> int:
    res = await conn.execute(sql, *args)
    try:
        return int(res.split()[-1])
    except Exception:
        return 0


# –ø–æ–¥—Ä–µ–∑–∫–∞ —Å—Ç—Ä–∏–º–∞ laboratory:decision_response –ø–æ MINID < now-24h
async def _trim_decision_response_stream():
    stream = "laboratory:decision_response"
    now_ms = int(time.time() * 1000)
    cutoff_ms = now_ms - STREAM_RETENTION_HOURS * 3600 * 1000
    minid = f"{cutoff_ms}-0"

    trimmed = None
    try:
        trimmed = await infra.redis_client.xtrim(stream, minid=minid, approximate=True)
    except Exception:
        try:
            trimmed = await infra.redis_client.execute_command("XTRIM", stream, "MINID", "~", minid)
        except Exception:
            log.exception("‚ö†Ô∏è LAB_CLEANER: XTRIM MINID –Ω–µ —É–¥–∞–ª–æ—Å—å (stream=%s)", stream)
            return

    try:
        cnt = int(trimmed) if trimmed is not None else -1
    except Exception:
        cnt = -1
    log.info("üßΩ LAB_CLEANER: stream trimmed (stream=%s, MINID<%s, removed=%s)", stream, minid, cnt if cnt >= 0 else "unknown")