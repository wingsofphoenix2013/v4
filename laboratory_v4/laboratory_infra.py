# laboratory_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–∞ infra.py –∏–∑ v4: ENV-–ø–∞—Ç—Ç–µ—Ä–Ω, –ª–æ–≥–∏, PG/Redis, safe-loop)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import asyncpg
import redis.asyncio as aioredis
import asyncio

# üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã (–µ—Å–ª–∏ ENV –Ω–µ –∑–∞–¥–∞–Ω—ã)
# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
LAB_DB_URL_DEFAULT = None            # –Ω–∞–ø—Ä–∏–º–µ—Ä: "postgresql://user:pass@host:5432/db?sslmode=require"
LAB_REDIS_URL_DEFAULT = None         # –Ω–∞–ø—Ä–∏–º–µ—Ä: "rediss://:password@host:6379/0"
LAB_DEBUG_MODE_DEFAULT = "false"     # "true" / "false"

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å infra.py –∏–∑ indicators_v4)
DATABASE_URL = os.getenv("DATABASE_URL", LAB_DB_URL_DEFAULT or "")
REDIS_URL    = os.getenv("REDIS_URL",    LAB_REDIS_URL_DEFAULT or "")
DEBUG_MODE   = (os.getenv("DEBUG_MODE", LAB_DEBUG_MODE_DEFAULT).lower() == "true")

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def init_pg_pool():
    if not DATABASE_URL:
        raise RuntimeError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω: —É–∫–∞–∂–∏—Ç–µ ENV –∏–ª–∏ LAB_DB_URL_DEFAULT –≤ laboratory_infra.py")
    return await asyncpg.create_pool(DATABASE_URL)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (async + health-check)
async def init_redis_client():
    if not REDIS_URL:
        raise RuntimeError("REDIS_URL –Ω–µ –∑–∞–¥–∞–Ω: —É–∫–∞–∂–∏—Ç–µ ENV –∏–ª–∏ LAB_REDIS_URL_DEFAULT –≤ laboratory_infra.py")
    client = aioredis.from_url(
        REDIS_URL,
        decode_responses=True,
        encoding="utf-8",
        socket_connect_timeout=3,
        socket_keepalive=True,
    )
    # health-check —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(3):
        try:
            await client.ping()
            return client
        except Exception:
            if attempt == 2:
                raise
            await asyncio.sleep(1 + attempt)

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    log = logging.getLogger(name)
    while True:
        try:
            log.info("–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞")
            await coro_fn()
        except asyncio.CancelledError:
            log.info("–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (cancelled)")
            raise
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            log.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(retry_delay)

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )
    logging.getLogger("LAB_INFRA").info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (level=%s)", "DEBUG" if DEBUG_MODE else "INFO")