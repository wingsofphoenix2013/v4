# üî∏ laboratory_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ laboratory_v4: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, PG/Redis, –∫—ç—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (+winrate –∫–∞—Ä—Ç—ã –¥–ª—è WL/BL, –∞–∫—Ç–∏–≤–Ω—ã–µ BL-–ø–æ—Ä–æ–≥–∏)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import asyncpg
import redis.asyncio as aioredis
from typing import Dict, Set, Tuple, Optional, Any

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pg_pool = None
redis_client = None

# üî∏ –ö—ç—à–∏ laboratory_v4
# —Ç–∏–∫–µ—Ä—ã: symbol -> row_dict
lab_tickers: Dict[str, dict] = {}
# —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: id -> row_dict
lab_strategies: Dict[int, dict] = {}

# MW whitelist: –≤–µ—Ä—Å–∏—è -> {(sid, timeframe, direction) -> {(agg_base, agg_state), ...}}
lab_mw_wl: Dict[str, Dict[Tuple[int, str, str], Set[Tuple[str, str]]]] = {"v1": {}, "v2": {}}
# MW WL winrates: –≤–µ—Ä—Å–∏—è -> {(sid, tf, dir) -> {(agg_base, agg_state) -> wr}}
lab_mw_wl_wr: Dict[str, Dict[Tuple[int, str, str], Dict[Tuple[str, str], float]]] = {"v1": {}, "v2": {}}

# PACK lists:
#   whitelist: –≤–µ—Ä—Å–∏—è -> {(sid, tf, dir) -> {(pack_base, agg_key, agg_value), ...}}
#   blacklist: –≤–µ—Ä—Å–∏—è -> {(sid, tf, dir) -> {(pack_base, agg_key, agg_value), ...}}
lab_pack_wl: Dict[str, Dict[Tuple[int, str, str], Set[Tuple[str, str, str]]]] = {"v1": {}, "v2": {}}
lab_pack_bl: Dict[str, Dict[Tuple[int, str, str], Set[Tuple[str, str, str]]]] = {"v1": {}, "v2": {}}
# PACK WL/BL winrates: –≤–µ—Ä—Å–∏—è -> {(sid, tf, dir) -> {(pack_base, agg_key, agg_value) -> wr}}
lab_pack_wl_wr: Dict[str, Dict[Tuple[int, str, str], Dict[Tuple[str, str, str], float]]] = {"v1": {}, "v2": {}}
lab_pack_bl_wr: Dict[str, Dict[Tuple[int, str, str], Dict[Tuple[str, str, str], float]]] = {"v1": {}, "v2": {}}

# üî∏ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ BL (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –ë–î)
# –∫–ª—é—á: (master_sid, version, decision_mode, direction, tf)
# –∑–Ω–∞—á–µ–Ω–∏–µ: {"threshold": int, "best_roi": float, "roi_base": float, "positions_total": int,
#            "deposit_used": float, "computed_at": "ISO8601"}
lab_bl_active: Dict[Tuple[int, str, str, str, str], Dict[str, Any]] = {}

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_INFRA")


# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    log.debug("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (DEBUG_MODE=%s)", DEBUG_MODE)


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async def setup_pg():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")

    pool = await asyncpg.create_pool(
        dsn=db_url,
        min_size=2,
        max_size=10,
        timeout=30.0,
    )
    # health-check
    async with pool.acquire() as conn:
        await conn.execute("SELECT 1")

    globals()["pg_pool"] = pool
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
async def setup_redis_client():
    host = os.getenv("REDIS_HOST", "localhost")
    port = int(os.getenv("REDIS_PORT", 6379))
    password = os.getenv("REDIS_PASSWORD")
    use_tls = os.getenv("REDIS_USE_TLS", "false").lower() == "true"

    protocol = "rediss" if use_tls else "redis"
    redis_url = f"{protocol}://{host}:{port}"

    client = aioredis.from_url(
        redis_url,
        password=password,
        decode_responses=True,  # —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥
    )

    # health-check
    await client.ping()

    globals()["redis_client"] = client
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –ö—ç—à–∏: —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏–∫–æ–º

def set_lab_tickers(new_dict: Dict[str, dict]):
    """
    –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫—ç—à–∞ —Ç–∏–∫–µ—Ä–æ–≤.
    """
    global lab_tickers
    lab_tickers = new_dict or {}
    log.debug("–ö—ç—à —Ç–∏–∫–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω (%d)", len(lab_tickers))


def set_lab_strategies(new_dict: Dict[int, dict]):
    """
    –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫—ç—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    global lab_strategies
    lab_strategies = new_dict or {}
    log.debug("–ö—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω (%d)", len(lab_strategies))


def replace_mw_whitelist(
    version: str,
    new_map: Dict[Tuple[int, str, str], Set[Tuple[str, str]]],
    wr_map: Optional[Dict[Tuple[int, str, str], Dict[Tuple[str, str], float]]] = None,
):
    """
    –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ WL MW –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ('v1'|'v2') + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ä—Ç–∞ winrate.
    """
    v = str(version or "").lower()
    if v not in lab_mw_wl:
        lab_mw_wl[v] = {}
    if v not in lab_mw_wl_wr:
        lab_mw_wl_wr[v] = {}

    lab_mw_wl[v] = new_map or {}
    if wr_map is not None:
        lab_mw_wl_wr[v] = wr_map or {}

    log.debug("MW WL[%s] –æ–±–Ω–æ–≤–ª—ë–Ω: —Å—Ä–µ–∑–æ–≤=%d", v, len(lab_mw_wl[v]))


def replace_pack_list(
    list_tag: str,
    version: str,
    new_map: Dict[Tuple[int, str, str], Set[Tuple[str, str, str]]],
    wr_map: Optional[Dict[Tuple[int, str, str], Dict[Tuple[str, str, str], float]]] = None,
):
    """
    –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ PACK WL/BL –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ('v1'|'v2') –∏ —Å–ø–∏—Å–∫–∞ ('whitelist'|'blacklist') + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ä—Ç–∞ winrate.
    """
    v = str(version or "").lower()
    lt = str(list_tag or "").lower()

    target = lab_pack_wl if lt == "whitelist" else lab_pack_bl
    target_wr = lab_pack_wl_wr if lt == "whitelist" else lab_pack_bl_wr

    if v not in target:
        target[v] = {}
    if v not in target_wr:
        target_wr[v] = {}

    target[v] = new_map or {}
    if wr_map is not None:
        target_wr[v] = wr_map or {}

    log.debug("PACK %s[%s] –æ–±–Ω–æ–≤–ª—ë–Ω: —Å—Ä–µ–∑–æ–≤=%d", lt.upper(), v, len(target[v]))


# üî∏ –ö—ç—à–∏: —Ç–æ—á–µ—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

def update_mw_whitelist_for_strategy(
    version: str,
    strategy_id: int,
    slice_map: Dict[Tuple[str, str], Set[Tuple[str, str]]],
    wr_map: Optional[Dict[Tuple[int, str, str], Dict[Tuple[str, str], float]]] = None,
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å MW WL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏:
      slice_map: {(timeframe, direction) -> {(agg_base, agg_state), ...}}
      wr_map: {(sid, timeframe, direction) -> {(agg_base, agg_state) -> winrate}}
    """
    v = str(version or "").lower()
    if v not in lab_mw_wl:
        lab_mw_wl[v] = {}
    if v not in lab_mw_wl_wr:
        lab_mw_wl_wr[v] = {}

    sid = int(strategy_id)

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–µ –∫–ª—é—á–∏ –ø–æ sid
    for k in [k for k in list(lab_mw_wl[v].keys()) if k[0] == sid]:
        lab_mw_wl[v].pop(k, None)
    for k in [k for k in list(lab_mw_wl_wr[v].keys()) if k[0] == sid]:
        lab_mw_wl_wr[v].pop(k, None)

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ä–µ–∑—ã
    for (tf, direction), states in (slice_map or {}).items():
        lab_mw_wl[v][(sid, str(tf), str(direction))] = set(states or set())

    # –¥–æ–±–∞–≤–ª—è–µ–º winrate-–∫–∞—Ä—Ç—ã
    if wr_map:
        for sid_tf_dir, m in wr_map.items():
            lab_mw_wl_wr[v][sid_tf_dir] = dict(m or {})

    # –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ sid
    total_slices = 0
    total_entries = 0
    per_tf_entries = {"m5": 0, "m15": 0, "h1": 0}
    for (k_sid, tf, _dir), states in lab_mw_wl[v].items():
        if k_sid != sid:
            continue
        total_slices += 1
        cnt = len(states)
        total_entries += cnt
        if tf in per_tf_entries:
            per_tf_entries[tf] += cnt

    log.debug(
        "LAB: MW WL updated ‚Äî sid=%s version=%s slices=%d entries=%d (m5=%d m15=%d h1=%d)",
        sid, v, total_slices, total_entries,
        per_tf_entries["m5"], per_tf_entries["m15"], per_tf_entries["h1"]
    )


def update_pack_list_for_strategy(
    list_tag: str,
    version: str,
    strategy_id: int,
    slice_map: Dict[Tuple[str, str], Set[Tuple[str, str, str]]],
    wr_map: Optional[Dict[Tuple[int, str, str], Dict[Tuple[str, str, str], float]]] = None,
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å PACK WL/BL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏:
      slice_map: {(timeframe, direction) -> {(pack_base, agg_key, agg_value), ...}}
      wr_map: {(sid, timeframe, direction) -> {(pack_base, agg_key, agg_value) -> winrate}}
    """
    lt = str(list_tag or "").lower()
    v = str(version or "").lower()

    target = lab_pack_wl if lt == "whitelist" else lab_pack_bl
    target_wr = lab_pack_wl_wr if lt == "whitelist" else lab_pack_bl_wr

    if v not in target:
        target[v] = {}
    if v not in target_wr:
        target_wr[v] = {}

    sid = int(strategy_id)

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–µ –∫–ª—é—á–∏ –ø–æ sid
    for k in [k for k in list(target[v].keys()) if k[0] == sid]:
        target[v].pop(k, None)
    for k in [k for k in list(target_wr[v].keys()) if k[0] == sid]:
        target_wr[v].pop(k, None)

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ä–µ–∑—ã
    for (tf, direction), states in (slice_map or {}).items():
        target[v][(sid, str(tf), str(direction))] = set(states or set())

    # –¥–æ–±–∞–≤–ª—è–µ–º winrate-–∫–∞—Ä—Ç—ã
    if wr_map:
        for sid_tf_dir, m in wr_map.items():
            target_wr[v][sid_tf_dir] = dict(m or {})

    # –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ sid
    total_slices = 0
    total_entries = 0
    per_tf_entries = {"m5": 0, "m15": 0, "h1": 0}
    for (k_sid, tf, _dir), states in target[v].items():
        if k_sid != sid:
            continue
        total_slices += 1
        cnt = len(states)
        total_entries += cnt
        if tf in per_tf_entries:
            per_tf_entries[tf] += cnt

    log.debug(
        "LAB: PACK %s updated ‚Äî sid=%s version=%s slices=%d entries=%d (m5=%d m15=%d h1=%d)",
        lt.upper(), sid, v, total_slices, total_entries,
        per_tf_entries["m5"], per_tf_entries["m15"], per_tf_entries["h1"]
    )


# üî∏ BL Active: –º–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Ç–æ—á–µ—á–Ω—ã–π upsert –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä–æ–≥—É

def set_bl_active_bulk(new_map: Dict[Tuple[int, str, str, str, str], Dict[str, Any]]):
    """
    –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ in-memory –∫—ç—à–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ BL.
    new_map: {(master_sid, version, decision_mode, direction, tf) -> {...—Å–º. lab_bl_active value...}}
    """
    global lab_bl_active
    lab_bl_active = new_map or {}
    log.info("LAB: BL active cache replaced (records=%d)", len(lab_bl_active))


def upsert_bl_active(
    master_sid: int,
    version: str,
    decision_mode: str,
    direction: str,
    tf: str,
    threshold: int,
    *,
    best_roi: float = 0.0,
    roi_base: float = 0.0,
    positions_total: int = 0,
    deposit_used: float = 0.0,
    computed_at: Optional[str] = None,
):
    """
    –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ BL –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ UPSERT –≤ –ë–î).
    """
    key = (int(master_sid), str(version), str(decision_mode), str(direction), str(tf))
    rec = {
        "threshold": int(threshold),
        "best_roi": float(best_roi),
        "roi_base": float(roi_base),
        "positions_total": int(positions_total),
        "deposit_used": float(deposit_used),
        "computed_at": computed_at or "",
    }
    lab_bl_active[key] = rec
    log.debug("LAB: BL active upsert %s -> T=%s ROI=%.6f (base=%.6f, n=%d)", key, rec["threshold"], rec["best_roi"], rec["roi_base"], rec["positions_total"])


def get_bl_threshold(
    master_sid: int,
    version: str,
    decision_mode: str,
    direction: str,
    tf: str,
    default: int = 0,
) -> int:
    """
    –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ—Ä–æ–≥—É BL. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default (–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏, 0).
    """
    key = (int(master_sid), str(version), str(decision_mode), str(direction), str(tf))
    rec = lab_bl_active.get(key)
    if not rec:
        return int(default)
    return int(rec.get("threshold", default))