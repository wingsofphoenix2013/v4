# laboratory_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–ª–æ–≥–∏, PG/Redis, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import asyncpg
import redis.asyncio as aioredis

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ ENV): –∑–∞–¥–∞—é—Ç—Å—è –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª–µ
LAB_DB_URL: str = "postgresql://user:password@hostname:5432/database"   # ‚Üê —É–∫–∞–∂–∏ —Å–≤–æ–π DSN
LAB_REDIS_URL: str = "redis://localhost:6379/0"                          # ‚Üê —É–∫–∞–∂–∏ —Å–≤–æ–π Redis URL
LAB_DEBUG_MODE: bool = False                                             # True ‚Üí DEBUG, False ‚Üí INFO

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if LAB_DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    log = logging.getLogger("LAB_INFRA")
    log.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (level=%s)", "DEBUG" if LAB_DEBUG_MODE else "INFO")

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (read-only –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏)
async def init_pg_pool():
    log = logging.getLogger("LAB_INFRA")
    pool = await asyncpg.create_pool(LAB_DB_URL)
    # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    async with pool.acquire() as conn:
        await conn.fetch("SELECT 1")
    log.info("PG: –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
    return pool

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (async + health-check)
async def init_redis_client():
    log = logging.getLogger("LAB_INFRA")
    client = aioredis.from_url(
        LAB_REDIS_URL,
        decode_responses=True,
        encoding="utf-8",
        socket_connect_timeout=3,
        socket_keepalive=True,
    )
    # health-check —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(3):
        try:
            pong = await client.ping()
            if pong:
                log.info("Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, PING ok")
                return client
        except Exception as e:
            if attempt == 2:
                log.error("Redis: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: %s", e, exc_info=True)
                raise
            # –∑–∞–¥–µ—Ä–∂–∫–∞ 1s, –∑–∞—Ç–µ–º 2s
            await asyncio.sleep(1 + attempt)

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    log = logging.getLogger(name)
    while True:
        try:
            log.info("–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞")
            await coro_fn()
        except asyncio.CancelledError:
            # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            log.info("–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (cancelled)")
            raise
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞: %s", e, exc_info=True)
            log.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥...", retry_delay)
            await asyncio.sleep(retry_delay)