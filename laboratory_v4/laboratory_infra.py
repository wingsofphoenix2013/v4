# laboratory_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ laboratory_v4: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, PG/Redis, –∫—ç—à–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ WL, —à—Ç–æ—Ä–∫–∏/–ª–æ–∫–∏ (–¥–≤–µ –≤–µ—Ä—Å–∏–∏ WL)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
from typing import Dict, List, Any, Tuple

import asyncpg
import redis.asyncio as aioredis
import asyncio

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_VERSION = "v1"

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
pg_pool: asyncpg.Pool | None = None
redis_client: aioredis.Redis | None = None

# üî∏ –ö—ç—à –∫–æ–Ω—Ñ–∏–≥–æ–≤ (–ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫)
enabled_tickers: Dict[str, Dict[str, Any]] = {}       # {symbol -> row_dict (*–≤—Å–µ –ø–æ–ª—è*)}
enabled_strategies: Dict[int, Dict[str, Any]] = {}    # {strategy_id -> row_dict (*–≤—Å–µ –ø–æ–ª—è*)}

# üî∏ –ö—ç—à–∏ whitelist –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º (–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ)
#     –°—Ç—Ä—É–∫—Ç—É—Ä–∞: pack_wl_by_strategy_ver[sid][version] -> {"rows": [...], "meta": {...}}
#                mw_wl_by_strategy_ver[sid][version]   -> {"rows": [...], "meta": {...}}
pack_wl_by_strategy_ver: Dict[int, Dict[str, Dict[str, Any]]] = {}
mw_wl_by_strategy_ver: Dict[int, Dict[str, Dict[str, Any]]] = {}

# üî∏ –®—Ç–æ—Ä–∫–∏ (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö) –∏ –ª–æ–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) –ø–æ (strategy_id, version)
_pack_ready_events: Dict[Tuple[int, str], asyncio.Event] = {}
_mw_ready_events: Dict[Tuple[int, str], asyncio.Event] = {}
_pack_update_locks: Dict[Tuple[int, str], asyncio.Lock] = {}
_mw_update_locks: Dict[Tuple[int, str], asyncio.Lock] = {}

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"
REDIS_USE_TLS = os.getenv("REDIS_USE_TLS", "false").lower() == "true"

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_INFRA")


# üî∏ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
def _norm_version(version: str | None) -> str:
    v = (version or DEFAULT_VERSION).strip().lower()
    return v or DEFAULT_VERSION


def _k(sid: int, version: str | None) -> Tuple[int, str]:
    return int(sid), _norm_version(version)


# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    log.debug("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (DEBUG_MODE=%s)", DEBUG_MODE)


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async def setup_pg():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")

    pool = await asyncpg.create_pool(
        dsn=db_url,
        min_size=2,
        max_size=10,
        timeout=30.0,
    )
    # –±—ã—Å—Ç—Ä—ã–π health-check
    async with pool.acquire() as conn:
        await conn.execute("SELECT 1")

    globals()["pg_pool"] = pool
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
async def setup_redis_client():
    host = os.getenv("REDIS_HOST", "localhost")
    port = int(os.getenv("REDIS_PORT", 6379))
    password = os.getenv("REDIS_PASSWORD")

    protocol = "rediss" if REDIS_USE_TLS else "redis"
    redis_url = f"{protocol}://{host}:{port}"

    client = aioredis.from_url(
        redis_url,
        password=password,
        decode_responses=True,  # —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥
    )

    # health-check
    await client.ping()

    globals()["redis_client"] = client
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# üî∏ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫—ç—à–∞ —Ç–∏–∫–µ—Ä–æ–≤ (–ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑; –∫–ª—é—á ‚Äî symbol)
def set_enabled_tickers(new_dict: Dict[str, Dict[str, Any]]):
    global enabled_tickers
    enabled_tickers = new_dict or {}
    log.info("‚úÖ –ö—ç—à —Ç–∏–∫–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω (–≤—Å–µ–≥–æ: %d)", len(enabled_tickers))


# üî∏ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫—ç—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑; –∫–ª—é—á ‚Äî id)
def set_enabled_strategies(new_dict: Dict[int, Dict[str, Any]]):
    global enabled_strategies
    enabled_strategies = new_dict or {}
    log.info("‚úÖ –ö—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (enabled=true) –æ–±–Ω–æ–≤–ª—ë–Ω (–≤—Å–µ–≥–æ: %d)", len(enabled_strategies))


# üî∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —à—Ç–æ—Ä–æ–∫ –∏ –ª–æ–∫–æ–≤ (PACK)
def _ensure_pack_sync_primitives(sid: int, version: str):
    k = _k(sid, version)
    if k not in _pack_ready_events:
        _pack_ready_events[k] = asyncio.Event()
        _pack_ready_events[k].set()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬´–≥–æ—Ç–æ–≤–æ¬ª, –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if k not in _pack_update_locks:
        _pack_update_locks[k] = asyncio.Lock()


# üî∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —à—Ç–æ—Ä–æ–∫ –∏ –ª–æ–∫–æ–≤ (MW)
def _ensure_mw_sync_primitives(sid: int, version: str):
    k = _k(sid, version)
    if k not in _mw_ready_events:
        _mw_ready_events[k] = asyncio.Event()
        _mw_ready_events[k].set()
    if k not in _mw_update_locks:
        _mw_update_locks[k] = asyncio.Lock()


# üî∏ –°—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PACK –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—à—Ç–æ—Ä–∫–∞+–ª–æ–∫)
async def start_pack_update(sid: int, version: str):
    _ensure_pack_sync_primitives(sid, version)
    k = _k(sid, version)
    # –æ–ø—É—Å–∫–∞–µ–º —à—Ç–æ—Ä–∫—É ‚Äî —á–∏—Ç–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∂–¥–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    _pack_ready_events[k].clear()
    await _pack_update_locks[k].acquire()
    log.info("üîß PACK –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ (strategy_id=%s, ver=%s)", sid, _norm_version(version))


def finish_pack_update(sid: int, version: str):
    k = _k(sid, version)
    # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ä–µ–∑–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ –≤—ã–∑–æ–≤–∞
    if k in _pack_update_locks and _pack_update_locks[k].locked():
        _pack_update_locks[k].release()
    if k in _pack_ready_events:
        _pack_ready_events[k].set()
    log.info("‚úÖ PACK –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (strategy_id=%s, ver=%s)", sid, _norm_version(version))


# üî∏ –°—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MW –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—à—Ç–æ—Ä–∫–∞+–ª–æ–∫)
async def start_mw_update(sid: int, version: str):
    _ensure_mw_sync_primitives(sid, version)
    k = _k(sid, version)
    _mw_ready_events[k].clear()
    await _mw_update_locks[k].acquire()
    log.info("üîß MW –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ (strategy_id=%s, ver=%s)", sid, _norm_version(version))


def finish_mw_update(sid: int, version: str):
    k = _k(sid, version)
    if k in _mw_update_locks and _mw_update_locks[k].locked():
        _mw_update_locks[k].release()
    if k in _mw_ready_events:
        _mw_ready_events[k].set()
    log.info("‚úÖ MW –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (strategy_id=%s, ver=%s)", sid, _norm_version(version))


# üî∏ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (—á–∏—Ç–∞—Ç–µ–ª–∏) ‚Äî PACK
async def wait_pack_ready(sid: int, version: str, timeout_sec: float | None = 5.0) -> bool:
    _ensure_pack_sync_primitives(sid, version)
    try:
        await asyncio.wait_for(_pack_ready_events[_k(sid, version)].wait(), timeout=timeout_sec)
        return True
    except asyncio.TimeoutError:
        log.info("‚è≥ PACK –æ–∂–∏–¥–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ (strategy_id=%s, ver=%s, timeout=%.1fs)",
                 sid, _norm_version(version), timeout_sec or -1)
        return False


# üî∏ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (—á–∏—Ç–∞—Ç–µ–ª–∏) ‚Äî MW
async def wait_mw_ready(sid: int, version: str, timeout_sec: float | None = 5.0) -> bool:
    _ensure_mw_sync_primitives(sid, version)
    try:
        await asyncio.wait_for(_mw_ready_events[_k(sid, version)].wait(), timeout=timeout_sec)
        return True
    except asyncio.TimeoutError:
        log.info("‚è≥ MW –æ–∂–∏–¥–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ (strategy_id=%s, ver=%s, timeout=%.1fs)",
                 sid, _norm_version(version), timeout_sec or -1)
        return False


# üî∏ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ WL-—Å—Ä–µ–∑–∞ (PACK) –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏
def set_pack_whitelist_for_strategy(
    sid: int,
    rows: List[Dict[str, Any]] | None,
    meta: Dict[str, Any] | None,
    version: str,
):
    ver = _norm_version(version)
    d = pack_wl_by_strategy_ver.setdefault(int(sid), {})
    d[ver] = {
        "rows": rows or [],
        "meta": {**(meta or {}), "version": ver},
    }
    log.info("üì¶ PACK WL –æ–±–Ω–æ–≤–ª—ë–Ω (strategy_id=%s, ver=%s, rows=%d)", sid, ver, len(d[ver]["rows"]))


# üî∏ –û—á–∏—Å—Ç–∫–∞ WL-—Å—Ä–µ–∑–∞ (PACK) –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏
def clear_pack_whitelist_for_strategy(sid: int, version: str):
    ver = _norm_version(version)
    d = pack_wl_by_strategy_ver.setdefault(int(sid), {})
    d[ver] = {
        "rows": [],
        "meta": {"note": "cleared", "version": ver},
    }
    log.info("üßπ PACK WL –æ—á–∏—â—ë–Ω (strategy_id=%s, ver=%s)", sid, ver)


# üî∏ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ WL-—Å—Ä–µ–∑–∞ (MW) –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏
def set_mw_whitelist_for_strategy(
    sid: int,
    rows: List[Dict[str, Any]] | None,
    meta: Dict[str, Any] | None,
    version: str,
):
    ver = _norm_version(version)
    d = mw_wl_by_strategy_ver.setdefault(int(sid), {})
    d[ver] = {
        "rows": rows or [],
        "meta": {**(meta or {}), "version": ver},
    }
    log.info("üì¶ MW WL –æ–±–Ω–æ–≤–ª—ë–Ω (strategy_id=%s, ver=%s, rows=%d)", sid, ver, len(d[ver]["rows"]))


# üî∏ –û—á–∏—Å—Ç–∫–∞ WL-—Å—Ä–µ–∑–∞ (MW) –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏
def clear_mw_whitelist_for_strategy(sid: int, version: str):
    ver = _norm_version(version)
    d = mw_wl_by_strategy_ver.setdefault(int(sid), {})
    d[ver] = {
        "rows": [],
        "meta": {"note": "cleared", "version": ver},
    }
    log.info("üßπ MW WL –æ—á–∏—â—ë–Ω (strategy_id=%s, ver=%s)", sid, ver)