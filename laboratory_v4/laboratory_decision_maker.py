# laboratory_decision_maker.py ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ—à–µ–Ω–∏–π (allow/deny) –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: —á—Ç–µ–Ω–∏–µ –∏–∑ Stream, MW‚Üí(PACK), –æ—Ç–≤–µ—Ç –∏ –∞—É–¥–∏—Ç

import asyncio
import json
import logging
import time
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

# üî∏ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_DECISION")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ—Ç–æ–∫–æ–≤ –∏ —à–ª—é–∑–æ–≤
DECISION_REQ_STREAM = "laboratory:decision_request"
DECISION_RESP_STREAM = "laboratory:decision_response"

GATEWAY_REQ_STREAM = "indicator_gateway_request"
# –ü—É–±–ª–∏—á–Ω—ã–µ KV –∫–ª—é—á–∏ gateway (—Å–º. —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é indicator_gateway)
# –î–ª—è MW: <indicator>_pack:{symbol}:{tf}:{base}  (base == indicator)
# –î–ª—è PACK: —Å–º. map PACK_PUBLIC_PREFIX –Ω–∏–∂–µ

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ)
XREAD_BLOCK_MS = 2000
XREAD_COUNT = 50
MAX_IN_FLIGHT_DECISIONS = 32
MAX_CONCURRENT_GATEWAY_CALLS = 32
COALESCE_TTL_SEC = 3
SAFETY_DEADLINE_MS = 60_000  # –æ–±—â–∏–π ¬´–ø–æ—Ç–æ–ª–æ–∫¬ª –Ω–∞ –∑–∞–ø—Ä–æ—Å

# üî∏ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ TF –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
TF_ORDER = ("m5", "m15", "h1")

# üî∏ –ü—Ä–µ—Ñ–∏–∫—Å—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è PACK
PACK_PUBLIC_PREFIX = {
    "bb": "bbpos_pack",
    "lr": "lrpos_pack",
    "atr": "atr_pack",
    "adx_dmi": "adx_dmi_pack",
    "macd": "macd_pack",
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: f"{indicator}_pack"
}

# üî∏ –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
_decisions_sem = asyncio.Semaphore(MAX_IN_FLIGHT_DECISIONS)
_gateway_sem = asyncio.Semaphore(MAX_CONCURRENT_GATEWAY_CALLS)

# üî∏ –ö–æ–∞–ª–µ—Å—Ü–µ–Ω—Å (in-process) ‚Äî –∫–ª—é—á ‚Üí Future (–∂–∏–≤—ë—Ç COALESCE_TTL_SEC)
_coalesce: Dict[str, Tuple[float, asyncio.Future]] = {}


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
def _parse_timeframes(tf_str: str) -> List[str]:
    items = [x.strip().lower() for x in (tf_str or "").split(",") if x.strip()]
    # –ø–æ—Ä—è–¥–æ–∫ —Ñ–∏–∫—Å–∏—Ä—É–µ–º: m5 ‚Üí m15 ‚Üí h1; —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    seen = set()
    ordered = []
    for tf in TF_ORDER:
        if tf in items and tf not in seen:
            seen.add(tf)
            ordered.append(tf)
    return ordered


def _parse_pack_base(base: str) -> Tuple[str, Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (indicator, params) –ø–æ —Å—Ç—Ä–æ–∫–µ pack_base.
    –ü—Ä–∏–º–µ—Ä—ã:
      'ema21' -> ('ema', {'length': 21})
      'macd12' -> ('macd', {'fast': 12})
      'bb20_2_0' -> ('bb', {'length': 20, 'std': 2.0})
      'adx_dmi14' -> ('adx_dmi', {'length': 14})
      'lr100' -> ('lr', {'length': 100})
      'atr14' -> ('atr', {'length': 14})
      'rsi14' -> ('rsi', {'length': 14})
      'mfi14' -> ('mfi', {'length': 14})
    """
    s = base.strip().lower()
    if s.startswith("bb"):
        # bb{length}_{std_with_underscore}
        rest = s[2:]
        parts = rest.split("_", 2)
        L = int(parts[0])
        # std –º–æ–∂–µ—Ç –±—ã—Ç—å "2_0" ‚Üí 2.0
        std = float(parts[1].replace("_", ".", 1)) if len(parts) > 1 else 2.0
        return "bb", {"length": L, "std": std}
    if s.startswith("macd"):
        F = int(s[4:])
        return "macd", {"fast": F}
    if s.startswith("adx_dmi"):
        L = int(s[7:])
        return "adx_dmi", {"length": L}
    if s.startswith("ema"):
        L = int(s[3:])
        return "ema", {"length": L}
    if s.startswith("rsi"):
        L = int(s[3:])
        return "rsi", {"length": L}
    if s.startswith("mfi"):
        L = int(s[3:])
        return "mfi", {"length": L}
    if s.startswith("lr"):
        L = int(s[2:])
        return "lr", {"length": L}
    if s.startswith("atr"):
        L = int(s[3:])
        return "atr", {"length": L}
    # fallback ‚Äî –∫–∞–∫ –µ—Å—Ç—å
    return s, {}


def _public_pack_key(indicator: str, symbol: str, tf: str, base: str) -> str:
    pref = PACK_PUBLIC_PREFIX.get(indicator, f"{indicator}_pack")
    return f"{pref}:{symbol}:{tf}:{base}"


def _public_mw_key(kind: str, symbol: str, tf: str) -> str:
    # –î–ª—è MW base == indicator (trend/volatility/momentum/extremes)
    return f"{kind}_pack:{symbol}:{tf}:{kind}"


def _json_or_none(s: Optional[str]) -> Optional[dict]:
    if not s:
        return None
    try:
        return json.loads(s)
    except Exception:
        return None


def _now_monotonic_ms() -> int:
    return int(time.monotonic() * 1000)


# üî∏ –ß—Ç–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫—ç—à–∞ gateway (MGET –ø–∞—á–∫–æ–π)
async def _mget_json(keys: List[str]) -> Dict[str, Optional[dict]]:
    if not keys:
        return {}
    # pipeline MGET
    values = await infra.redis_client.mget(*keys)
    out: Dict[str, Optional[dict]] = {}
    for k, v in zip(keys, values):
        out[k] = _json_or_none(v)
    return out


# üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ indicator_gateway + –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
async def _ensure_pack_available(
    symbol: str,
    tf: str,
    indicator: str,
    base: str,
    gw_params: Dict[str, Any],
    precision: int,
    deadline_ms: int,
) -> Optional[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç pack-json –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ KV, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ:
      1) –ø—Ä–æ–±—É–µ—Ç public KV,
      2) –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî XADD –≤ gateway, –∑–∞—Ç–µ–º –∂–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è public KV.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–∞–ª–µ—Å—Ü–µ–Ω—Å –∏ –ª–∏–º–∏—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ _gateway_sem.
    """
    key = _public_pack_key(indicator, symbol, tf, base)
    # –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ –∫—ç—à–∞
    cached = await infra.redis_client.get(key)
    if cached:
        obj = _json_or_none(cached)
        if obj:
            return obj

    # –∫–æ–∞–ª–µ—Å—Ü–µ–Ω—Å: –æ–¥–∏–Ω –ø–æ–ª—ë—Ç –Ω–∞ –∫–ª—é—á
    co_key = f"COAL::pack::{key}"
    now = _now_monotonic_ms()
    future: Optional[asyncio.Future] = None
    rec = _coalesce.get(co_key)
    if rec and now < rec[0]:
        future = rec[1]
    if future:
        log.info("[PACK] ‚è≥ –ö–æ–∞–ª–µ—Å—Ü–µ–Ω—Å –æ–∂–∏–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ key=%s", key)
        try:
            return await asyncio.wait_for(future, timeout=max(0.1, (deadline_ms - _now_monotonic_ms()) / 1000))
        except Exception:
            return None

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é future –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–æ–∞–ª–µ—Å—Ü–µ–Ω—Å
    loop = asyncio.get_running_loop()
    future = loop.create_future()
    _coalesce[co_key] = (now + COALESCE_TTL_SEC * 1000, future)

    # –∑–∞—â–∏—â–∞–µ–º –≤—ã–∑–æ–≤ —à–ª—é–∑–∞ –æ–±—â–∏–º —Å–µ–º–∞—Ñ–æ—Ä–æ–º
    async with _gateway_sem:
        try:
            # —Å–æ–±–µ—Ä—ë–º –ø–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞
            req = {
                "symbol": symbol,
                "timeframe": tf,
                "indicator": indicator,
                "mode": "pack",
            }
            # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª–∏–Ω –∏ std
            if indicator in ("ema", "rsi", "mfi", "lr", "atr", "adx_dmi"):
                L = int(gw_params.get("length", 0))
                if L:
                    req["length"] = str(L)
            elif indicator == "macd":
                F = int(gw_params.get("fast", 0))
                if F:
                    req["length"] = str(F)  # –¥–ª—è gateway length —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ fast
            elif indicator == "bb":
                L = int(gw_params.get("length", 0))
                S = float(gw_params.get("std", 2.0))
                req["length"] = str(L)
                req["std"] = f"{S:.2f}"

            # XADD –≤ gateway
            # –æ—Ç–≤–µ—Ç –±—É–¥–µ–º –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (gateway –∫–ª–∞–¥—ë—Ç public KV)
            req_id = await infra.redis_client.xadd(GATEWAY_REQ_STREAM, req)
            log.info("[PACK] üì§ GW –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ind=%s base=%s req_id=%s key=%s", indicator, base, req_id, key)

            # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è public KV –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            poll_sleep = 0.1
            while _now_monotonic_ms() < deadline_ms:
                cached = await infra.redis_client.get(key)
                if cached:
                    obj = _json_or_none(cached)
                    if obj:
                        if not future.done():
                            future.set_result(obj)
                        return obj
                await asyncio.sleep(poll_sleep)
                # —Å–ª–µ–≥–∫–∞ —Ä–∞—Å—Ç—è–Ω–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 200–º—Å
                if poll_sleep < 0.2:
                    poll_sleep = 0.2

            log.info("[PACK] ‚õî –ò—Å—Ç—ë–∫ –¥–µ–¥–ª–∞–π–Ω –æ–∂–∏–¥–∞–Ω–∏—è public KV ind=%s base=%s", indicator, base)
            if not future.done():
                future.set_result(None)
            return None

        except Exception:
            log.exception("[PACK] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ gateway (ind=%s base=%s)", indicator, base)
            if not future.done():
                future.set_result(None)
            return None
        finally:
            # —á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–æ–∞–ª–µ—Å—Ü–µ–Ω—Å–∞
            now2 = _now_monotonic_ms()
            for ck, (exp, fut) in list(_coalesce.items()):
                if now2 > exp or (fut.done() and _json_or_none(fut.result()) is None):
                    _coalesce.pop(ck, None)


# üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ MW —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ç—Ä–µ–±—É–µ–º—ã–µ –±–∞–∑—ã)
async def _get_mw_states(
    symbol: str,
    tf: str,
    bases: List[str],
    precision: int,
    deadline_ms: int,
) -> Dict[str, Optional[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {base -> state} –ø–æ MW, –∏—Å–ø–æ–ª—å–∑—É—è cache-first –∏ gateway.
    base ‚àà {'trend','volatility','extremes','momentum'}
    """
    out: Dict[str, Optional[str]] = {}
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –ø–∞—á–∫–æ–π
    keys = [_public_mw_key(b, symbol, tf) for b in bases]
    kv = await _mget_json(keys)
    # –ø—Ä–æ–π–¥—ë–º—Å—è –ø–æ –±–∞–∑–∞–º
    for base in bases:
        state: Optional[str] = None
        # –ø–æ–ø—ã—Ç–∫–∞ –∏–∑ –∫—ç—à–∞
        k = _public_mw_key(base, symbol, tf)
        obj = kv.get(k)
        if obj and isinstance(obj, dict):
            pack = obj.get("pack") or {}
            st = pack.get("state")
            if isinstance(st, str) and st:
                state = st

        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –∑–∞–ø—Ä–æ—Å –≤ gateway
        if state is None:
            obj = await _ensure_pack_available(
                symbol=symbol,
                tf=tf,
                indicator=base,  # base == indicator for MW
                base=base,
                gw_params={},
                precision=precision,
                deadline_ms=deadline_ms,
            )
            if obj:
                pack = obj.get("pack") or {}
                st = pack.get("state")
                if isinstance(st, str) and st:
                    state = st

        out[base] = state
        log.info("[MW] üß© %s %s/%s state=%s", base, symbol, tf, state)

    return out


# üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ¬´—Ñ–∞–∫—Ç–æ–≤¬ª –¥–ª—è MW –∏ –º–∞—Ç—á–∏–Ω–≥ —Å whitelist
def _mw_match_and_required_confirmation(
    mw_rows: List[Dict[str, Any]],
    states: Dict[str, Optional[str]],
) -> Tuple[bool, Optional[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (matched, required_confirmation):
      - matched == False ‚Üí –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      - matched == True  ‚Üí required_confirmation ‚àà {0,1,2}, –≥–¥–µ:
          0 ‚Üí TF –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É,
          1/2 ‚Üí —Ç—Ä–µ–±—É–µ—Ç—Å—è PACK-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å—Ä–µ–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π).
    –õ–æ–≥–∏–∫–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏: winrate –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º; —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.
    """
    if not mw_rows:
        return False, None

    matched_confirmations: List[int] = []

    for r in mw_rows:
        agg_base = (r.get("agg_base") or "").strip().lower()
        agg_state = (r.get("agg_state") or "").strip().lower()
        if not agg_base or not agg_state:
            continue

        # –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Ä—è–¥–æ–∫ –±–∞–∑ –∏–∑ agg_base
        bases = agg_base.split("_")
        # —Å–æ–±–µ—Ä—ë–º –∫–ª—é—á —Ñ–∞–∫—Ç–∞
        if len(bases) == 1:
            base = bases[0]
            cur_state = states.get(base)
            if not cur_state:
                continue
            fact = cur_state.strip().lower()
        else:
            parts = []
            ok = True
            for b in bases:
                st = states.get(b)
                if not st:
                    ok = False
                    break
                parts.append(f"{b}:{st.strip().lower()}")
            if not ok:
                continue
            fact = "|".join(parts)

        if fact == agg_state:
            # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –∑–∞–±–∏—Ä–∞–µ–º confirmation
            conf = r.get("confirmation")
            try:
                conf_i = int(conf)
            except Exception:
                continue
            matched_confirmations.append(conf_i)

    if not matched_confirmations:
        return False, None

    # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω—É–ª–µ–≤–æ–π ‚Äî –ø—Ä–æ—Ö–æ–¥ —Å—Ä–∞–∑—É
    if any(c == 0 for c in matched_confirmations):
        return True, 0

    # –∏–Ω–∞—á–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (1 –∏–ª–∏ 2)
    req = min([c for c in matched_confirmations if c in (1, 2)], default=None)
    if req is None:
        # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π
        return False, None
    return True, req


# üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ PACK —Ñ–∞–∫—Ç–æ–≤ –ø–æ –Ω—É–∂–Ω—ã–º base (cache-first + gateway)
async def _get_pack_objects_for_bases(
    symbol: str,
    tf: str,
    bases: List[str],
    precision: int,
    deadline_ms: int,
) -> Dict[str, Optional[dict]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {pack_base -> pack_json_or_None}, –≥–¥–µ pack_json ‚Äî –æ–±—ä–µ–∫—Ç –∫–∞–∫ –≤ –ø—É–±–ª–∏—á–Ω–æ–º KV gateway.
    """
    results: Dict[str, Optional[dict]] = {}
    # —Å–Ω–∞—á–∞–ª–∞ –æ–¥–Ω–∞ MGET –ø–∞—á–∫–æ–π
    keys = []
    for base in bases:
        ind, _params = _parse_pack_base(base)
        keys.append(_public_pack_key(ind, symbol, tf, base))
    got = await _mget_json(keys)

    # —Ç–µ–ø–µ—Ä—å –¥–æ–≥–æ–Ω–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–µ—Ä–µ–∑ gateway
    for base in bases:
        ind, params = _parse_pack_base(base)
        k = _public_pack_key(ind, symbol, tf, base)
        obj = got.get(k)
        if obj is None:
            obj = await _ensure_pack_available(
                symbol=symbol,
                tf=tf,
                indicator=ind,
                base=base,
                gw_params=params,
                precision=precision,
                deadline_ms=deadline_ms,
            )
        results[base] = obj
        log.info("[PACK] üì¶ base=%s %s/%s present=%s", base, symbol, tf, bool(obj))

    return results


# üî∏ –ú–∞—Ç—á–∏–Ω–≥ PACK: blacklist ‚Üí whitelist count
def _pack_bl_wl_stats(
    pack_rows: List[Dict[str, Any]],
    pack_objs: Dict[str, Optional[dict]],
) -> Tuple[bool, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (blacklist_hit, whitelist_hits_count) –Ω–∞ —Ç–µ–∫—É—â–µ–º TF.
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ–µ –ø–æ (agg_key, agg_value) –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ pack_base.
    """
    bl_hit = False
    wl_hits = 0

    for r in pack_rows:
        base = (r.get("pack_base") or "").strip().lower()
        if not base:
            continue
        pack_obj = pack_objs.get(base)
        if not pack_obj:
            continue  # pack –Ω–µ –ø–æ–ª—É—á–µ–Ω ‚Üí –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º

        pack = pack_obj.get("pack") or {}
        list_type = (r.get("list") or "").strip().lower()  # whitelist | blacklist
        agg_key = (r.get("agg_key") or "").strip().lower()
        agg_val = (r.get("agg_value") or "").strip().lower()
        if not agg_key or not agg_val:
            continue

        keys = [k.strip() for k in agg_key.split("|") if k.strip()]
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º "fact" ‚Üí field:value|... –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
        parts = []
        ok = True
        for k in keys:
            v = pack.get(k)
            if v is None:
                ok = False
                break
            parts.append(f"{k}:{str(v).strip().lower()}")
        if not ok:
            continue
        fact = "|".join(parts)

        if fact == agg_val:
            if list_type == "blacklist":
                bl_hit = True
            elif list_type == "whitelist":
                wl_hits += 1

    return bl_hit, wl_hits


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ TF (MW ‚Üí PACK –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async def _process_tf(
    sid: int,
    symbol: str,
    direction: str,
    tf: str,
    trace: bool,
    deadline_ms: int,
    telemetry: Dict[str, int],
) -> Tuple[bool, Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (tf_ok, trace_obj)
    """
    tf_trace: Dict[str, Any] = {"tf": tf}

    # 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ WL –ø–æ TF
    mw_rows_all = (infra.mw_wl_by_strategy.get(sid) or {}).get("rows", [])
    pack_rows_all = (infra.pack_wl_by_strategy.get(sid) or {}).get("rows", [])

    mw_rows = [r for r in mw_rows_all if (r.get("timeframe") == tf and r.get("direction") == direction)]
    pack_rows = [r for r in pack_rows_all if (r.get("timeframe") == tf and r.get("direction") == direction)]

    log.info("[TF:%s] üîé WL —Å—Ä–µ–∑—ã: MW=%d PACK=%d (sid=%s %s %s)", tf, len(mw_rows), len(pack_rows), sid, symbol, direction)

    # –µ—Å–ª–∏ MW –ø—É—Å—Ç ‚Äî —ç—Ç–æ ¬´–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π¬ª (–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏)
    if not mw_rows:
        tf_trace["mw"] = {"matched": False}
        log.info("[TF:%s] ‚ùå MW: –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –≤ WL ‚Äî –æ—Ç–∫–∞–∑", tf)
        return False, tf_trace

    # 2) MW: –∫–∞–∫–∏–µ –±–∞–∑—ã –Ω—É–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å
    needed_bases: List[str] = []
    for r in mw_rows:
        base = (r.get("agg_base") or "").strip().lower()
        if not base:
            continue
        for b in base.split("_"):
            if b in ("trend", "volatility", "extremes", "momentum") and b not in needed_bases:
                needed_bases.append(b)

    # 3) –ü–æ–ª—É—á–∞–µ–º MW —Å–æ—Å—Ç–æ—è–Ω–∏—è
    precision = int(infra.enabled_tickers.get(symbol, {}).get("precision_price", 7))
    states = await _get_mw_states(symbol, tf, needed_bases, precision, deadline_ms)

    # 4) –ú–∞—Ç—á–∏–Ω–≥ MW ‚Üí required_confirmation
    matched, required_conf = _mw_match_and_required_confirmation(mw_rows, states)
    if trace:
        tf_trace["mw"] = {"matched": matched}
        if matched:
            tf_trace["mw"]["confirmation"] = required_conf
    if not matched:
        log.info("[TF:%s] ‚ùå MW: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –æ—Ç–∫–∞–∑", tf)
        return False, tf_trace

    if required_conf == 0:
        log.info("[TF:%s] ‚úÖ MW: confirmation=0 ‚Äî TF –ø—Ä–æ–π–¥–µ–Ω –±–µ–∑ PACK", tf)
        return True, tf_trace

    # 5) PACK: –Ω—É–∂–µ–Ω confirmation 1 –∏–ª–∏ 2
    # —Å–Ω–∞—á–∞–ª–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö pack_base –∏–∑ WL (–∏ BL/WL)
    bases: List[str] = []
    for r in pack_rows:
        base = (r.get("pack_base") or "").strip().lower()
        if base and base not in bases:
            bases.append(base)

    # –µ—Å–ª–∏ –ø–æ PACK –≤–æ–æ–±—â–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ ‚Äî –∑–Ω–∞—á–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –Ω–µ—á–µ–º ‚Üí –æ—Ç–∫–∞–∑
    if not bases:
        tf_trace["pack"] = {"bl_hits": 0, "wl_hits": 0, "required": required_conf}
        log.info("[TF:%s] ‚ùå PACK: WL –ø—É—Å—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ—Ç (need=%s)", tf, required_conf)
        return False, tf_trace

    # 6) –ü–æ–ª—É—á–∞–µ–º PACK –æ–±—ä–µ–∫—Ç—ã –ø–æ –Ω—É–∂–Ω—ã–º base (cache-first/gateway)
    pack_objs = await _get_pack_objects_for_bases(symbol, tf, bases, precision, deadline_ms)

    # 7) –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Üí –ë–µ–ª—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    bl_hit, wl_hits = _pack_bl_wl_stats(pack_rows, pack_objs)
    if trace:
        tf_trace["pack"] = {"bl_hits": int(bl_hit), "wl_hits": wl_hits, "required": required_conf}

    if bl_hit:
        log.info("[TF:%s] ‚ùå PACK: blacklist hit ‚Äî –æ—Ç–∫–∞–∑", tf)
        return False, tf_trace

    if wl_hits >= (required_conf or 0):
        log.info("[TF:%s] ‚úÖ PACK: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (need=%s got=%s)", tf, required_conf, wl_hits)
        return True, tf_trace

    log.info("[TF:%s] ‚ùå PACK: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (need=%s got=%s)", tf, required_conf, wl_hits)
    return False, tf_trace


# üî∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î (best-effort, –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)
async def _persist_decision(
    req_id: str,
    log_uid: str,
    strategy_id: int,
    symbol: str,
    direction: str,
    tfr_req: str,
    tfr_proc: str,
    allow: bool,
    reason: Optional[str],
    tf_results_json: Optional[str],
    received_at_dt: datetime,
    finished_at_dt: datetime,
    duration_ms: int,
    cache_hits: int,
    gateway_requests: int,
):
    query = """
    INSERT INTO public.signal_laboratory_entries
    (req_id, log_uid, strategy_id, direction, symbol,
     timeframes_requested, timeframes_processed, protocol_version,
     allow, reason, tf_results, errors,
     received_at, finished_at, duration_ms, cache_hits, gateway_requests)
    VALUES ($1,$2,$3,$4,$5,
            $6,$7,'v1',
            $8,$9, COALESCE($10::jsonb, NULL), NULL,
            $11,$12,$13,$14,$15)
    ON CONFLICT (log_uid, strategy_id) DO UPDATE
      SET req_id=$1, direction=$4, symbol=$5,
          timeframes_requested=$6, timeframes_processed=$7,
          allow=$8, reason=$9, tf_results=COALESCE($10::jsonb, signal_laboratory_entries.tf_results),
          finished_at=$12, duration_ms=$13, cache_hits=$14, gateway_requests=$15
    """
    async with infra.pg_pool.acquire() as conn:
        await conn.execute(
            query,
            req_id, log_uid, strategy_id, direction, symbol,
            tfr_req, tfr_proc,
            allow, reason, tf_results_json,
            received_at_dt, finished_at_dt, duration_ms, cache_hits, gateway_requests
        )
    log.info("[AUDIT] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ log_uid=%s sid=%s allow=%s", log_uid, strategy_id, allow)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Stream
async def _process_request(msg_id: str, fields: Dict[str, str]):
    async with _decisions_sem:
        t0 = _now_monotonic_ms()
        received_at_dt = datetime.utcnow()  # ‚úÖ datetime –¥–ª—è PG

        # –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
        log_uid = fields.get("log_uid") or ""
        strategy_id_s = fields.get("strategy_id") or ""
        direction = (fields.get("direction") or "").strip().lower()
        symbol = (fields.get("symbol") or "").strip().upper()
        tfs_raw = fields.get("timeframes") or ""
        trace_flag = (fields.get("trace") or "false").lower() == "true"
        deadline_ms_req = None
        try:
            if "deadline_ms" in fields:
                deadline_ms_req = int(fields["deadline_ms"])
        except Exception:
            deadline_ms_req = None

        if not log_uid or not strategy_id_s.isdigit() or direction not in ("long", "short") or not symbol or not tfs_raw:
            await infra.redis_client.xadd(DECISION_RESP_STREAM, {
                "req_id": msg_id, "status": "error", "error": "bad_request", "message": "missing or invalid fields"
            })
            log.info("[REQ] ‚ùå bad_request fields=%s", fields)
            return

        sid = int(strategy_id_s)
        tfs = _parse_timeframes(tfs_raw)
        if not tfs:
            await infra.redis_client.xadd(DECISION_RESP_STREAM, {
                "req_id": msg_id, "status": "error", "error": "bad_request", "message": "timeframes invalid"
            })
            log.info("[REQ] ‚ùå bad_request timeframes=%s", tfs_raw)
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if symbol not in infra.enabled_tickers:
            await infra.redis_client.xadd(DECISION_RESP_STREAM, {
                "req_id": msg_id, "status": "error", "error": "symbol_not_active", "message": f"{symbol}"
            })
            log.info("[REQ] ‚ùå symbol_not_active %s", symbol)
            return

        if sid not in infra.enabled_strategies:
            await infra.redis_client.xadd(DECISION_RESP_STREAM, {
                "req_id": msg_id, "status": "error", "error": "strategy_not_enabled", "message": f"{sid}"
            })
            log.info("[REQ] ‚ùå strategy_not_enabled %s", sid)
            return

        log.info("[REQ] üì• log_uid=%s sid=%s %s %s tfs=%s", log_uid, sid, symbol, direction, ",".join(tfs))

        # –æ–∂–∏–¥–∞–µ–º ¬´—à—Ç–æ—Ä–∫–∏¬ª WL (–∫–æ—Ä–æ—Ç–∫–æ), —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–≤–µ–∂–∏–º–∏
        await infra.wait_mw_ready(sid, timeout_sec=5.0)
        await infra.wait_pack_ready(sid, timeout_sec=5.0)

        # –æ–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω
        deadline_ms = t0 + (deadline_ms_req or SAFETY_DEADLINE_MS)

        # —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
        telemetry = {"cache_hits": 0, "gateway_requests": 0}
        tf_results: List[Dict[str, Any]] = []
        allow = True
        reason: Optional[str] = None

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ TF –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∑–∞–º—ã–∫–∞–Ω–∏–µ–º
        for tf in tfs:
            tf_ok, tf_trace = await _process_tf(
                sid=sid,
                symbol=symbol,
                direction=direction,
                tf=tf,
                trace=trace_flag,
                deadline_ms=deadline_ms,
                telemetry=telemetry,
            )
            if trace_flag:
                tf_results.append(tf_trace)

            if not tf_ok:
                allow = False
                # –ø—Ä–æ—Å—Ç–∞–≤–∏–º reason –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
                if "mw" in tf_trace and not tf_trace["mw"].get("matched", True):
                    reason = f"mw_no_match@{tf}"
                elif "pack" in tf_trace and tf_trace["pack"].get("bl_hits", 0) > 0:
                    reason = f"pack_blacklist_hit@{tf}"
                elif "pack" in tf_trace:
                    need = tf_trace["pack"].get("required")
                    got = tf_trace["pack"].get("wl_hits")
                    reason = f"pack_not_enough_confirm@{tf}: need={need} got={got}"
                else:
                    reason = f"deny@{tf}"
                log.info("[TF:%s] ‚õî –û—Å—Ç–∞–Ω–æ–≤ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: %s", tf, reason)
                break
            else:
                log.info("[TF:%s] ‚úÖ TF –ø—Ä–æ–π–¥–µ–Ω", tf)

        # –æ—Ç–≤–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        finished_at_dt = datetime.utcnow()  # ‚úÖ datetime –¥–ª—è PG
        duration_ms = _now_monotonic_ms() - t0
        resp = {
            "req_id": msg_id,
            "status": "ok",
            "allow": "true" if allow else "false",
            "log_uid": log_uid,
            "strategy_id": str(sid),
            "symbol": symbol,
            "direction": direction,
            "timeframes": ",".join(tfs),
        }
        if not allow and reason:
            resp["reason"] = reason
        if trace_flag:
            try:
                resp["tf_results"] = json.dumps(tf_results, ensure_ascii=False)
            except Exception:
                pass

        await infra.redis_client.xadd(DECISION_RESP_STREAM, resp)
        log.info("[RESP] üì§ log_uid=%s sid=%s allow=%s dur=%dms", log_uid, sid, allow, duration_ms)

        # –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî best effort –∑–∞–ø–∏—Å—å –≤ –ë–î
        try:
            tf_results_json = json.dumps(tf_results, ensure_ascii=False) if trace_flag else None
            await _persist_decision(
                req_id=msg_id,
                log_uid=log_uid,
                strategy_id=sid,
                symbol=symbol,
                direction=direction,
                tfr_req=tfs_raw,
                tfr_proc=",".join(tfs),
                allow=allow,
                reason=reason,
                tf_results_json=tf_results_json,
                received_at_dt=received_at_dt,     # ‚úÖ datetime
                finished_at_dt=finished_at_dt,     # ‚úÖ datetime
                duration_ms=duration_ms,
                cache_hits=telemetry.get("cache_hits", 0),
                gateway_requests=telemetry.get("gateway_requests", 0),
            )
        except Exception:
            log.exception("[AUDIT] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ log_uid=%s sid=%s", log_uid, sid)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å decision_request
async def run_laboratory_decision_maker():
    """
    –°–ª—É—à–∞–µ—Ç laboratory:decision_request –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ laboratory:decision_response.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—Ç —Å —Ö–≤–æ—Å—Ç–∞ '$').
    """
    log.info("üõ∞Ô∏è LAB_DECISION —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω (BLOCK=%d COUNT=%d MAX=%d)",
             XREAD_BLOCK_MS, XREAD_COUNT, MAX_IN_FLIGHT_DECISIONS)

    last_id = "$"  # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
    redis = infra.redis_client

    while True:
        try:
            resp = await redis.xread(
                streams={DECISION_REQ_STREAM: last_id},
                count=XREAD_COUNT,
                block=XREAD_BLOCK_MS
            )
            if not resp:
                continue

            # resp: List[ (stream_name, [(msg_id, fields), ...]) ]
            for _, messages in resp:
                for msg_id, fields in messages:
                    last_id = msg_id  # –¥–≤–∏–≥–∞–µ–º —Ö–≤–æ—Å—Ç
                    asyncio.create_task(_process_request(msg_id, fields))

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è LAB_DECISION –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_DECISION –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")
            await asyncio.sleep(1.0)