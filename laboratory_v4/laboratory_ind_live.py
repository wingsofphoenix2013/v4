# laboratory_ind_live.py ‚Äî –≤–æ—Ä–∫–µ—Ä laboratory_v4: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è IND-—Å–Ω–∞–ø—à–æ—Ç–æ–≤ –≤ Redis (lab_live:ind:...) –±–µ–∑ –ë–î/—Å—Ç—Ä–∏–º–æ–≤

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
from typing import Dict, Tuple, Optional

from lab_utils import floor_to_bar, load_ohlcv_df
from compute_only import compute_snapshot_values_async

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_IND_LIVE")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞
TF_SET = ("m5", "m15", "h1")          # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º–∏ TF
LAB_PREFIX = "lab_live"               # –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
LAB_TTL_SEC = 45                      # TTL –¥–ª—è –≤—Å–µ—Ö lab_live –∫–ª—é—á–µ–π
TICK_INTERVAL_SEC = 30                # –ø–µ—Ä–∏–æ–¥ —Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
MAX_CONCURRENCY = 64                  # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ (symbol, tf)

# üî∏ –ü—É—Ç—å KV-–∫–ª—é—á–∞ –¥–ª—è IND
def _ind_key(symbol: str, tf: str, param_name: str) -> str:
    return f"{LAB_PREFIX}:ind:{symbol}:{tf}:{param_name}"

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞—Ä—ã (symbol, tf) –Ω–∞ –≤–∏–±—Ä–∞–Ω–Ω–æ–º open_ms
async def _process_pair(
    redis,
    symbol: str,
    tf: str,
    open_ms: int,
    precision: int,
    get_instances_by_tf,
) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (published_params, skipped_params).
    skipped –≤–∫–ª—é—á–∞–µ—Ç —Å–ª—É—á–∞–∏: –Ω–µ—Ç DF / –Ω–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ / –ø—É—Å—Ç–æ–π —Ä–∞—Å—á—ë—Ç.
    """
    # –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV (–¥–æ 800 –±–∞—Ä–æ–≤ –∫ open_ms)
    df = await load_ohlcv_df(redis, symbol, tf, open_ms, bars=800)
    if df is None or df.empty:
        return (0, 1)

    # —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –ø–æ TF (enabled=true —É–∂–µ –≤ –∫–µ—à–µ)
    instances = get_instances_by_tf(tf)
    if not instances:
        return (0, 1)

    published = 0
    skipped = 0

    # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞–º (DF –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ)
    for inst in instances:
        try:
            values = await compute_snapshot_values_async(inst, symbol, df, precision)
        except Exception as e:
            log.warning("calc error %s/%s id=%s: %s", symbol, tf, inst.get("id"), e)
            skipped += 1
            continue

        if not values:
            skipped += 1
            continue

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è KV —Å TTL (45 —Å–µ–∫)
        tasks = []
        for param_name, str_value in values.items():
            key = _ind_key(symbol, tf, param_name)
            # Redis —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫–∏ ‚Äî —Ñ–æ—Ä–º–∞—Ç —É–∂–µ —Å–¥–µ–ª–∞–Ω –≤ compute_only
            tasks.append(redis.set(key, str_value, ex=LAB_TTL_SEC))
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
            published += len(tasks)

    return (published, skipped)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç IND-—Å–Ω–∞–ø—à–æ—Ç—ã –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ä–∞–º –∏ TF
async def run_lab_ind_live(
    pg,
    redis,
    get_instances_by_tf,     # callable(tf) -> list[instance]
    get_precision,           # callable(symbol) -> int|None
    get_active_symbols,      # callable() -> list[str]
    get_last_bar,            # callable(symbol, tf) -> int|None
    tf_set: Tuple[str, ...] = TF_SET,
    tick_interval_sec: int = TICK_INTERVAL_SEC,
):
    # —Å–µ–º–∞—Ñ–æ—Ä –Ω–∞ (symbol, tf)
    sem = asyncio.Semaphore(MAX_CONCURRENCY)

    while True:
        t0 = time.monotonic()
        now_ms = int(time.time() * 1000)

        symbols = get_active_symbols()
        if not symbols:
            await asyncio.sleep(tick_interval_sec)
            continue

        # –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
        total_pairs = 0
        total_published = 0
        total_skipped = 0

        async def run_one(sym: str, tf: str):
            nonlocal total_published, total_skipped, total_pairs
            async with sem:
                # –≤—ã–±–æ—Ä open_ms: –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Ä –∏–∑ –∫–µ—à–∞ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ —Ç–µ–∫—É—â–∏–π floored
                last = get_last_bar(sym, tf)
                open_ms = last if last is not None else floor_to_bar(now_ms, tf)
                # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Å–∏–º–≤–æ–ª—É (–¥–µ—Ñ–æ–ª—Ç 8)
                prec = get_precision(sym) or 8
                try:
                    pub, sk = await _process_pair(redis, sym, tf, open_ms, prec, get_instances_by_tf)
                except Exception as e:
                    log.warning("pair error %s/%s: %s", sym, tf, e)
                    pub, sk = 0, 1
                total_pairs += 1
                total_published += pub
                total_skipped += sk

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Å–µ–º (symbol, tf)
        tasks = [
            asyncio.create_task(run_one(sym, tf))
            for sym in symbols
            for tf in tf_set
        ]
        # –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=False)

        t1 = time.monotonic()
        elapsed_ms = int((t1 - t0) * 1000)

        # –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ —Ç–∏–∫–∞
        log.info(
            "LAB IND: tick done pairs=%d params=%d skipped=%d elapsed_ms=%d",
            total_pairs, total_published, total_skipped, elapsed_ms
        )

        # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞
        # (–Ω–∞ —Å–ª—É—á–∞–π –¥–æ–ª–≥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ–π sleep –±–µ–∑ —É—á—ë—Ç–∞ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
        await asyncio.sleep(tick_interval_sec)