# laboratory_decision_postproc.py ‚Äî –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–∫—Ä—ã—Ç–∏–π: –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤ LPS –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import json
import logging
from datetime import datetime
from decimal import Decimal
from typing import Any, Dict, Optional

# üî∏ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_DECISION_POSTPROC")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Streams/—Ç–∞–±–ª–∏—Ü
SIGNAL_LOG_QUEUE = "signal_log_queue"                    # —Å–æ–±—ã—Ç–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º/–ø–æ–∑–∏—Ü–∏—è–º (–≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å –ø–∏—à–µ—Ç —Å—é–¥–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)
LPS_TABLE = "public.laboratoty_position_stat"
POS_TABLE = "public.positions_v4"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è Streams
XREAD_BLOCK_MS = 1_000
XREAD_COUNT = 50


# üî∏ –£—Ç–∏–ª–∏—Ç–∞: –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø–∞—Ä—Å —á–∏—Å–µ–ª –∏–∑ asyncpg status
def _rows_affected(status: str) -> int:
    # —Ñ–æ—Ä–º–∞—Ç asyncpg: "UPDATE 3" / "INSERT 0" / "DELETE 1"
    if not status:
        return 0
    parts = status.split()
    try:
        return int(parts[-1])
    except Exception:
        return 0


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ ‚Üí –∞–ø–¥–µ–π—Ç LPS –ø–æ –≤—Å–µ–º TF
async def _process_closed_event(position_uid: str, csid_s: str, log_uid: str):
    # –ø–∞—Ä—Å client_strategy_id
    try:
        client_strategy_id = int(csid_s)
    except Exception:
        client_strategy_id = None

    if not position_uid or not client_strategy_id or not log_uid:
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        log.info("[POSTPROC] ‚ö†Ô∏è –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: position_uid=%s csid=%s log_uid=%s",
                 position_uid or "-", csid_s or "-", log_uid or "-")
        return

    # —á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ë–î (–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è pnl/closed_at/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Å–∏–º–≤–æ–ª–∞)
    async with infra.pg_pool.acquire() as conn:
        pos = await conn.fetchrow(
            f"""
            SELECT position_uid, strategy_id, symbol, direction, pnl, closed_at, status, log_uid
              FROM {POS_TABLE}
             WHERE position_uid = $1
            """,
            position_uid,
        )

        if not pos:
            # –ø–æ–∑–∏—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
            log.info("[POSTPROC] ‚ö†Ô∏è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ position_uid=%s csid=%s log_uid=%s", position_uid, client_strategy_id, log_uid)
            return

        # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
        symbol: str = pos["symbol"]
        direction: Optional[str] = pos["direction"]
        pnl: Optional[Decimal] = pos["pnl"]
        closed_at: Optional[datetime] = pos["closed_at"]
        status: Optional[str] = pos["status"]

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if status != "closed":
            log.info("[POSTPROC] ‚ö†Ô∏è –ø–æ–∑–∏—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ (status=%s) position_uid=%s csid=%s", status or "-", position_uid, client_strategy_id)

        # –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: win = pnl > 0, –∏–Ω–∞—á–µ lose (False)
        result_bool: bool = bool(pnl is not None and pnl > 0)

        # –∞–ø–¥–µ–π—Ç –í–°–ï–• —Å—Ç—Ä–æ–∫ LPS –ø–æ (log_uid, client_strategy_id, symbol [, optional direction])
        # direction –≤ LPS —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ö–æ–¥–∞; –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ where –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if direction in ("long", "short"):
            upd_status = await conn.execute(
                f"""
                UPDATE {LPS_TABLE}
                   SET position_uid = $1,
                       pnl = $2,
                       "result" = $3,
                       closed_at = $4,
                       updated_at = NOW()
                 WHERE log_uid = $5
                   AND client_strategy_id = $6
                   AND symbol = $7
                   AND direction = $8
                """,
                position_uid, pnl, result_bool, closed_at, log_uid, client_strategy_id, symbol, direction
            )
        else:
            # –±–µ–∑ direction
            upd_status = await conn.execute(
                f"""
                UPDATE {LPS_TABLE}
                   SET position_uid = $1,
                       pnl = $2,
                       "result" = $3,
                       closed_at = $4,
                       updated_at = NOW()
                 WHERE log_uid = $5
                   AND client_strategy_id = $6
                   AND symbol = $7
                """,
                position_uid, pnl, result_bool, closed_at, log_uid, client_strategy_id, symbol
            )

        updated_rows = _rows_affected(upd_status)

    # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–∫ –æ—à–∏–±–∫–æ–π)
    log.info(
        "[POSTPROC] ‚úÖ closed propagated: position_uid=%s csid=%s log_uid=%s %s dir=%s pnl=%s result=%s rows=%d",
        position_uid, client_strategy_id, log_uid, symbol, (direction or "-"),
        (str(pnl) if pnl is not None else "NULL"),
        ("win" if result_bool else "loose"),
        updated_rows
    )


# üî∏ –ì–ª–∞–≤–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ LPS –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ stream signal_log_queue)
async def run_laboratory_decision_postproc():
    """
    –°–ª—É—à–∞–µ—Ç signal_log_queue, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Å–æ status='closed'
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç laboratoty_position_stat (LPS) –ø–æ –≤—Å–µ–º TF –¥–ª—è –ø–∞—Ä—ã (log_uid, client_strategy_id).
    –í–æ—Ä–∫—ç—Ä –ù–ï –º–µ—à–∞–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º —Å—Ç—Ä–∏–º–∞: –Ω–µ —Ç—Ä–∏–º–º–∏—Ç/–Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ.
    """
    log.debug("üõ∞Ô∏è LAB_DECISION_POSTPROC —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω (BLOCK=%d COUNT=%d)", XREAD_BLOCK_MS, XREAD_COUNT)

    last_id = "$"  # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    redis = infra.redis_client

    while True:
        try:
            resp = await redis.xread(
                streams={SIGNAL_LOG_QUEUE: last_id},
                count=XREAD_COUNT,
                block=XREAD_BLOCK_MS,
            )
            if not resp:
                continue

            for _, messages in resp:
                for msg_id, fields in messages:
                    last_id = msg_id

                    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
                    status = (fields.get("status") or "").strip().lower()
                    if status != "closed":
                        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                        continue

                    position_uid = (fields.get("position_uid") or "").strip()
                    log_uid = (fields.get("log_uid") or "").strip()
                    csid_s = (fields.get("strategy_id") or "").strip()  # —ç—Ç–æ –∏–º–µ–Ω–Ω–æ client_strategy_id –≤ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏

                    if not position_uid or not log_uid or not csid_s:
                        # –≤–æ–∑–º–æ–∂–µ–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON –ø–æ–¥ key=data
                        data_raw = fields.get("data")
                        if isinstance(data_raw, str):
                            try:
                                data = json.loads(data_raw)
                                status = (data.get("status") or status).strip().lower()
                                position_uid = (data.get("position_uid") or position_uid).strip()
                                log_uid = (data.get("log_uid") or log_uid).strip()
                                csid_s = (data.get("strategy_id") or csid_s).strip()
                            except Exception:
                                pass

                    if status != "closed" or not position_uid or not log_uid or not csid_s:
                        # –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ/–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                        log.info("[POSTPROC] ‚ö†Ô∏è –ø—Ä–æ–ø—É—Å–∫ msg=%s: status=%s position_uid=%s log_uid=%s csid=%s",
                                 msg_id, status or "-", position_uid or "-", log_uid or "-", csid_s or "-")
                        continue

                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                    try:
                        await _process_closed_event(position_uid=position_uid, csid_s=csid_s, log_uid=log_uid)
                    except Exception:
                        log.exception("[POSTPROC] ‚ùå –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è position_uid=%s csid=%s", position_uid, csid_s)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_DECISION_POSTPROC –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_DECISION_POSTPROC –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")
            await asyncio.sleep(1.0)