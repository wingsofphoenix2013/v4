# laboratory_bl_analyzer.py ‚Äî –æ—Ñ—Ñ–ª–∞–π–Ω-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ BL: ROI(K) –ø–æ –æ–∫–Ω—É 7√ó24—á, –≤—ã–±–æ—Ä best_k, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ KV

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Tuple, Optional

# üî∏ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_BL_ANALYZER")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
WINDOW_HOURS = 168          # 7 * 24
RUN_EVERY_SEC = 3600        # —Ä–∞–∑ –≤ —á–∞—Å
START_DELAY_SEC = 90        # –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞

# üî∏ –¢–∞–±–ª–∏—Ü—ã
LPS_TABLE = "public.laboratoty_position_stat"
POS_TABLE = "public.positions_v4"
STRAT_TABLE = "public.strategies_v4"
SCAN_TABLE = "public.laboratory_bl_scan"
SUMMARY_TABLE = "public.laboratory_bl_summary"
ACTIVE_TABLE = "public.laboratory_bl_summary_active"

# üî∏ –ö–ª—é—á–∏ Redis –¥–ª—è ¬´–∞–∫—Ç–∏–≤–Ω—ã—Ö¬ª –ø–æ—Ä–æ–≥–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
def _kv_key(master_sid: int, tf: str) -> str:
    return f"laboratory:bl:k:{master_sid}:{tf}"


# üî∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—è–¥–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
class Row:
    __slots__ = ("csid", "master_sid", "tf", "direction", "bl_hits", "pnl", "deposit")
    def __init__(self, csid: int, master_sid: int, tf: str, direction: str, bl_hits: int, pnl: Decimal, deposit: Decimal):
        self.csid = csid
        self.master_sid = master_sid
        self.tf = tf
        self.direction = direction
        self.bl_hits = bl_hits
        self.pnl = pnl
        self.deposit = deposit


# üî∏ –ó–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∫–Ω–æ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º ‚Üí —Ä—è–¥—ã —É—Ä–æ–≤–Ω—è LPS (–ø–æ TF), —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å blacklist_watcher=true
async def _fetch_rows(window_start: datetime, window_end: datetime) -> List[Row]:
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(
            f"""
            SELECT
                lps.client_strategy_id AS csid,
                lps.strategy_id        AS master_sid,
                lps.tf,
                lps.direction,
                COALESCE(lps.pack_bl_match_count, 0) AS bl_hits,
                COALESCE(lps.pnl, p.pnl)              AS pnl,
                s.deposit                              AS deposit
            FROM {LPS_TABLE} lps
            JOIN {POS_TABLE} p
              ON p.log_uid = lps.log_uid
             AND p.strategy_id = lps.client_strategy_id
            JOIN {STRAT_TABLE} s
              ON s.id = lps.client_strategy_id
             AND s.blacklist_watcher = TRUE
            WHERE p.status = 'closed'
              AND p.closed_at >  $1
              AND p.closed_at <= $2
              AND COALESCE(lps.pnl, p.pnl) IS NOT NULL
            """,
            window_start, window_end
        )
    out: List[Row] = []
    for r in rows:
        try:
            dep = Decimal(r["deposit"])
            if dep <= 0:
                continue
            out.append(
                Row(
                    csid=int(r["csid"]),
                    master_sid=int(r["master_sid"]),
                    tf=str(r["tf"]),
                    direction=str(r["direction"]),
                    bl_hits=int(r["bl_hits"]),
                    pnl=Decimal(r["pnl"]),
                    deposit=dep,
                )
            )
        except Exception:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
    return out


# üî∏ –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ñ–∏–ª—è ROI(K) + –≤—ã–±–æ—Ä best_k (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ROI, baseline K=0 —É—á–∞—Å—Ç–≤—É–µ—Ç)
def _compute_profile(rows: List[Row], deposit: Decimal) -> Tuple[Dict[int, Dict], Dict]:
    # rows ‚Äî –≤—Å–µ —Å–¥–µ–ª–∫–∏ (LPS-—Å—Ç—Ä–æ–∫–∏) –≤ –≥—Ä—É–ø–ø–µ csid√óTF√ódirection
    if not rows or deposit is None or deposit <= 0:
        return {}, {}

    n_total = len(rows)
    pnl_total = sum((r.pnl for r in rows), Decimal("0"))
    roi_base = (pnl_total / deposit)

    # —Å–µ—Ç–∫–∞ –ø–æ—Ä–æ–≥–æ–≤: 1..Kmax (K=0 —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ baseline)
    kmax = max((max(1, r.bl_hits) for r in rows), default=1)
    profile: Dict[int, Dict] = {}

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª—É—á—à–∏–π ‚Äî K=0 (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
    best_k = 0
    best_roi = roi_base
    best_allowed = n_total
    best_blocked = 0

    for k in range(1, kmax + 1):
        allowed = [r for r in rows if r.bl_hits < k]
        blocked = n_total - len(allowed)
        pnl_allowed = sum((r.pnl for r in allowed), Decimal("0"))
        roi_k = (pnl_allowed / deposit)

        profile[k] = {
            "threshold_k": k,
            "n_total": n_total,
            "n_blocked": blocked,
            "n_allowed": len(allowed),
            "pnl_total": pnl_total,
            "pnl_allowed": pnl_allowed,
            "deposit": deposit,
            "roi_base": roi_base,
            "roi_k": roi_k,
        }

        # –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º ROI –±–µ–∑ –¥–æ–ø. –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if roi_k > best_roi:
            best_roi = roi_k
            best_k = k
            best_allowed = len(allowed)
            best_blocked = blocked

    summary = {
        "n_total": n_total,
        "roi_base": roi_base,
        "roi_bin": profile.get(1, {}).get("roi_k", roi_base),  # K=1
        "best_k": best_k,                   # –º–æ–∂–µ—Ç –±—ã—Ç—å 0 (–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å)
        "roi_best": best_roi,
        "n_allowed_best": best_allowed,
        "n_blocked_best": best_blocked,
        "uplift_abs": (best_roi - roi_base),
        "uplift_rel_pct": ((best_roi - roi_base) / (abs(roi_base) if roi_base != 0 else Decimal("1"))),
        "criteria_note": "criterion=max_roi",
    }
    return profile, summary


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö KV –≤ Redis: per (master_sid, tf) ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ str(best_k)
async def _publish_active_kv(items: List[Tuple[int, str, int, Decimal]]):
    # items: [(master_sid, tf, best_k, roi_best)]
    if not items:
        log.info("[BL] ‚ÑπÔ∏è KV: –Ω–µ—Ç –ø–∞—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return

    # –≤—ã–±–µ—Ä–µ–º –ø–æ (master, tf) –∑–∞–ø–∏—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º roi_best (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö csid –ø–æ–¥ –æ–¥–Ω–∏–º master)
    chosen: Dict[Tuple[int, str], Tuple[int, Decimal]] = {}
    masters: Dict[int, set] = {}

    for master_sid, tf, best_k, roi_best in items:
        key = (master_sid, tf)
        masters.setdefault(master_sid, set()).add(tf)
        prev = chosen.get(key)
        if prev is None or roi_best > prev[1]:
            chosen[key] = (best_k, roi_best)

    # —Å–Ω–∞—á–∞–ª–∞ –∑–∞—á–∏—Å—Ç–∏–º –∫–ª—é—á–∏ –ø–æ –∫–∞–∂–¥–æ–º—É master_sid –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö TF, –∑–∞—Ç–µ–º –≤—ã—Å—Ç–∞–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
    tfs_all = ("m5", "m15", "h1")
    deleted = 0
    set_count = 0

    for master_sid in masters.keys():
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –ø–æ –≤—Å–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º TF
        for tf in tfs_all:
            del_key = _kv_key(master_sid, tf)
            try:
                res = await infra.redis_client.delete(del_key)
                deleted += int(res or 0)
            except Exception:
                # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                pass

    for (master_sid, tf), (best_k, _roi) in chosen.items():
        key = _kv_key(master_sid, tf)
        val = str(int(best_k))  # "0" ‚Äî —Ñ–∏–ª—å—Ç—Ä off
        await infra.redis_client.set(key, val)
        set_count += 1

    log.info("[BL] ‚úÖ KV published: masters=%d keys_set=%d keys_deleted=%d",
             len(masters), set_count, deleted)


# üî∏ –û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω: –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º csid√óTF√ódirection –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ã + –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å KV
async def _run_once(window_hours: int):
    window_end = datetime.utcnow().replace(tzinfo=None)
    window_start = window_end - timedelta(hours=window_hours)

    # –ª–æ–≥–∏—á–Ω–æ–µ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ TF –≤ –∏—Ç–æ–≥–æ–≤–æ–º –ª–æ–≥–µ
    tf_order = {"m5": 0, "m15": 1, "h1": 2}

    rows = await _fetch_rows(window_start, window_end)
    if not rows:
        log.info("[BL] ‚ÑπÔ∏è –æ–∫–Ω–æ[%s..%s]: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", window_start.isoformat(), window_end.isoformat())
        return

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ csid√óTF√ódirection (–º–∞—Å—Ç–µ—Ä_id –ø—Ä–æ—Ç–∞—â–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
    groups: Dict[Tuple[int, str, str], List[Row]] = {}
    master_of_group: Dict[Tuple[int, str, str], int] = {}
    for r in rows:
        key = (r.csid, r.tf, r.direction)
        groups.setdefault(key, []).append(r)
        master_of_group[key] = r.master_sid  # –ø–æ –≥—Ä—É–ø–ø–µ –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω master

    scan_rows: List[Tuple] = []     # –¥–ª—è laboratory_bl_scan
    summary_rows: List[Tuple] = []  # –¥–ª—è laboratory_bl_summary
    active_rows: List[Tuple] = []   # –¥–ª—è laboratory_bl_summary_active
    kv_items: List[Tuple[int, str, int, Decimal]] = []  # (master_sid, tf, best_k, roi_best)

    processed = 0

    for (csid, tf, direction), vec in groups.items():
        # –¥–µ–ø–æ–∑–∏—Ç –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞ (–æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤ –≥—Ä—É–ø–ø–µ, —Ç.–∫. csid –æ–¥–∏–Ω)
        deposit = vec[0].deposit if vec and vec[0].deposit is not None else None
        if deposit is None or deposit <= 0:
            log.info("[BL] ‚ö†Ô∏è –ø—Ä–æ–ø—É—Å–∫ csid=%s tf=%s dir=%s: deposit –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/<=0", csid, tf, direction)
            continue

        profile, summary = _compute_profile(vec, deposit)
        if not profile:
            continue

        # –ø—Ä–æ—Ñ–∏–ª—å –ø–æ K ‚Äî –≤ SCAN
        for k, p in profile.items():
            scan_rows.append((
                window_start, window_end, csid, tf, direction,            # –∫–ª—é—á
                p["threshold_k"], p["n_total"], p["n_blocked"], p["n_allowed"],
                p["pnl_total"], p["pnl_allowed"], p["deposit"],
                p["roi_base"], p["roi_k"]
            ))

        # —Å–≤–æ–¥–∫–∞ (best_k + –±–∞–∑–æ–≤—ã–µ) ‚Äî –≤ SUMMARY
        summary_rows.append((
            window_start, window_end, csid, tf, direction,
            deposit, summary["n_total"],
            summary["roi_base"], summary["roi_bin"],
            summary["best_k"], summary["roi_best"],
            summary["n_blocked_best"], summary["n_allowed_best"],
            summary["uplift_abs"], summary["uplift_rel_pct"],
            summary["criteria_note"]
        ))

        # –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑ (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Ü–µ–ª–∏–∫–æ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
        active_rows.append((
            csid, tf, direction,
            WINDOW_HOURS, window_start, window_end, deposit, summary["n_total"],
            summary["roi_base"], summary["roi_bin"],
            summary["best_k"], summary["roi_best"],
            summary["n_blocked_best"], summary["n_allowed_best"],
            summary["uplift_abs"], summary["uplift_rel_pct"],
            summary["criteria_note"]
        ))

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ KV: per master_sid√óTF ‚Üí best_k
        master_sid = master_of_group[(csid, tf, direction)]
        kv_items.append((master_sid, tf, int(summary["best_k"]), summary["roi_best"]))

        processed += 1

    if not scan_rows:
        log.info("[BL] ‚ÑπÔ∏è –æ–∫–Ω–æ[%s..%s]: –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç", window_start.isoformat(), window_end.isoformat())
        return

    # –∑–∞–ø–∏—Å—å –≤ –ë–î + –ø—É–±–ª–∏–∫–∞—Ü–∏—è KV
    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # upsert SCAN
            await conn.executemany(
                f"""
                INSERT INTO {SCAN_TABLE} (
                    window_start, window_end, client_strategy_id, tf, direction,
                    threshold_k, n_total, n_blocked, n_allowed,
                    pnl_total, pnl_allowed, deposit,
                    roi_base, roi_k
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14
                )
                ON CONFLICT (window_end, client_strategy_id, tf, direction, threshold_k)
                DO UPDATE SET
                    window_start = EXCLUDED.window_start,
                    n_total      = EXCLUDED.n_total,
                    n_blocked    = EXCLUDED.n_blocked,
                    n_allowed    = EXCLUDED.n_allowed,
                    pnl_total    = EXCLUDED.pnl_total,
                    pnl_allowed  = EXCLUDED.pnl_allowed,
                    deposit      = EXCLUDED.deposit,
                    roi_base     = EXCLUDED.roi_base,
                    roi_k        = EXCLUDED.roi_k,
                    created_at   = NOW()
                """,
                scan_rows
            )

            # upsert SUMMARY (–∏—Å—Ç–æ—Ä–∏—è —á–∞—Å–∞)
            await conn.executemany(
                f"""
                INSERT INTO {SUMMARY_TABLE} (
                    window_start, window_end, client_strategy_id, tf, direction,
                    deposit, n_total, roi_base, roi_bin,
                    best_k, roi_best, n_blocked_best, n_allowed_best,
                    uplift_abs, uplift_rel_pct, criteria_note
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16
                )
                ON CONFLICT (window_end, client_strategy_id, tf, direction)
                DO UPDATE SET
                    window_start   = EXCLUDED.window_start,
                    deposit        = EXCLUDED.deposit,
                    n_total        = EXCLUDED.n_total,
                    roi_base       = EXCLUDED.roi_base,
                    roi_bin        = EXCLUDED.roi_bin,
                    best_k         = EXCLUDED.best_k,
                    roi_best       = EXCLUDED.roi_best,
                    n_blocked_best = EXCLUDED.n_blocked_best,
                    n_allowed_best = EXCLUDED.n_allowed_best,
                    uplift_abs     = EXCLUDED.uplift_abs,
                    uplift_rel_pct = EXCLUDED.uplift_rel_pct,
                    criteria_note  = EXCLUDED.criteria_note,
                    created_at     = NOW()
                """,
                summary_rows
            )

            # –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑: –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–∞—Ç–æ–º–∞—Ä–Ω–æ)
            await conn.execute(f"TRUNCATE {ACTIVE_TABLE}")
            await conn.executemany(
                f"""
                INSERT INTO {ACTIVE_TABLE} (
                    client_strategy_id, tf, direction,
                    window_hours, window_start, window_end, deposit, n_total,
                    roi_base, roi_bin, best_k, roi_best,
                    n_blocked_best, n_allowed_best, uplift_abs, uplift_rel_pct,
                    criteria_note
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17
                )
                """,
                active_rows
            )

    # –ø—É–±–ª–∏–∫–∞—Ü–∏—è KV (–ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ë–î)
    await _publish_active_kv(kv_items)

    # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≥–æ–Ω–∞
    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–≤–æ–¥–∫—É TF
    tf_seen = sorted({tf for _, tf, _, _ in kv_items}, key=lambda x: tf_order.get(x, 9))
    log.info(
        "[BL] ‚úÖ –æ–∫–Ω–æ[%s..%s] –≥—Ä—É–ø–ø=%d scan_rows=%d summary_rows=%d active_rows=%d kv_pairs=%d tfs=%s",
        window_start.isoformat(), window_end.isoformat(),
        processed, len(scan_rows), len(summary_rows), len(active_rows), len(kv_items),
        ",".join(tf_seen) if tf_seen else "-"
    )


# üî∏ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–µ–∂–µ—á–∞—Å–Ω–æ, —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π 90s)
async def run_laboratory_bl_analyzer():
    """
    –ï–∂–µ—á–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è blacklist –ø–æ –æ–∫–Ω—É 7√ó24—á –Ω–∞ —É—Ä–æ–≤–Ω–µ csid√óTF√ódirection:
    - —Å—Ç—Ä–æ–∏—Ç ROI-–ø—Ä–æ—Ñ–∏–ª—å –ø–æ –ø–æ—Ä–æ–≥–∞–º K (scan),
    - –≤—ã–±–∏—Ä–∞–µ—Ç best_k –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é max ROI (baseline K=0 —É—á–∞—Å—Ç–≤—É–µ—Ç),
    - –ø–∏—à–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Å–∞ (summary), –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑ (summary_active),
    - –ø—É–±–ª–∏–∫—É–µ—Ç –≤ Redis –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ KV-–∫–ª—é—á–∏: laboratory:bl:k:{master_sid}:{tf} = "<best_k>".
    –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≥–¥–µ strategies_v4.blacklist_watcher = true.
    """
    log.debug("üõ∞Ô∏è LAB_BL_ANALYZER –∑–∞–ø—É—â–µ–Ω: WINDOW=%dh, EVERY=%ds", WINDOW_HOURS, RUN_EVERY_SEC)
    log.info("‚è≥ LAB_BL_ANALYZER: —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ %ds (grace period –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)", START_DELAY_SEC)
    await asyncio.sleep(START_DELAY_SEC)

    while True:
        try:
            await _run_once(WINDOW_HOURS)
        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_BL_ANALYZER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_BL_ANAL–ê–õYZER –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–æ–Ω–∞")
        # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        await asyncio.sleep(RUN_EVERY_SEC)