# laboratory_bl_analyzer.py ‚Äî –æ—Ñ—Ñ–ª–∞–π–Ω-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ BL: ROI(K) –ø–æ –æ–∫–Ω—É 7√ó24—á, best_k –∏ ¬´–∞–∫—Ç–∏–≤–Ω—ã–π¬ª —Å—Ä–µ–∑

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from decimal import Decimal
from typing import Dict, List, Tuple, Optional, Iterable

# üî∏ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_BL_ANALYZER")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞/–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
WINDOW_HOURS = 168          # 7 * 24
RUN_EVERY_SEC = 3600        # —Ä–∞–∑ –≤ —á–∞—Å
N_MIN_ALLOWED = 30          # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞
DELTA_MIN_ROI = Decimal("0.02")  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç ROI (2 –ø.–ø.)

# üî∏ –¢–∞–±–ª–∏—Ü—ã
LPS_TABLE = "public.laboratoty_position_stat"
POS_TABLE = "public.positions_v4"
STRAT_TABLE = "public.strategies_v4"
SCAN_TABLE = "public.laboratory_bl_scan"
SUMMARY_TABLE = "public.laboratory_bl_summary"
ACTIVE_TABLE = "public.laboratory_bl_summary_active"


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—è–¥–∞
class Row:
    __slots__ = ("csid", "tf", "direction", "bl_hits", "pnl")
    def __init__(self, csid: int, tf: str, direction: str, bl_hits: int, pnl: Decimal):
        self.csid = csid
        self.tf = tf
        self.direction = direction
        self.bl_hits = bl_hits
        self.pnl = pnl


# üî∏ –ó–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∫–Ω–æ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º ‚Üí —Ä—è–¥—ã —É—Ä–æ–≤–Ω—è LPS (–ø–æ TF)
async def _fetch_rows(window_start: datetime, window_end: datetime) -> List[Row]:
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(
            f"""
            SELECT
                lps.client_strategy_id AS csid,
                lps.tf,
                lps.direction,
                COALESCE(lps.pack_bl_match_count, 0) AS bl_hits,
                COALESCE(lps.pnl, p.pnl) AS pnl
            FROM {LPS_TABLE} lps
            JOIN {POS_TABLE} p
              ON p.log_uid = lps.log_uid
             AND p.strategy_id = lps.client_strategy_id
            WHERE p.status = 'closed'
              AND p.closed_at > $1 AND p.closed_at <= $2
              AND COALESCE(lps.pnl, p.pnl) IS NOT NULL
            """,
            window_start, window_end
        )
    out: List[Row] = []
    for r in rows:
        try:
            out.append(Row(int(r["csid"]), str(r["tf"]), str(r["direction"]), int(r["bl_hits"]), Decimal(r["pnl"])))
        except Exception:
            # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
    return out


# üî∏ –ü–æ–ª—É—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ csid (client_strategy_id)
async def _fetch_deposits(csids: Iterable[int]) -> Dict[int, Decimal]:
    uniq = sorted({int(x) for x in csids if x is not None})
    if not uniq:
        return {}
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(
            f"SELECT id, deposit FROM {STRAT_TABLE} WHERE id = ANY($1::int[])",
            uniq
        )
    out: Dict[int, Decimal] = {}
    for r in rows:
        dep = r["deposit"]
        if dep is None:
            continue
        try:
            out[int(r["id"])] = Decimal(dep)
        except Exception:
            continue
    return out


# üî∏ –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ñ–∏–ª—è ROI(K) + –≤—ã–±–æ—Ä best_k –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã csid√óTF√ódirection
def _compute_profile(rows: List[Row], deposit: Decimal) -> Tuple[Dict[int, Dict], Dict]:
    # rows: –≤—Å–µ —Å–¥–µ–ª–∫–∏ (LPS-—Å—Ç—Ä–æ–∫–∏) –≤ –≥—Ä—É–ø–ø–µ
    if not rows or deposit is None or deposit <= 0:
        return {}, {}

    n_total = len(rows)
    pnl_total = sum((r.pnl for r in rows), Decimal("0"))
    roi_base = (pnl_total / deposit) if deposit else Decimal("0")

    kmax = max((max(1, r.bl_hits) for r in rows), default=1)  # —Ö–æ—Ç—è –±—ã 1
    profile: Dict[int, Dict] = {}

    best_k = 1
    best_roi = roi_base
    best_allowed = n_total
    best_blocked = 0

    for k in range(1, kmax + 1):
        allowed = [r for r in rows if r.bl_hits < k]
        blocked = n_total - len(allowed)
        pnl_allowed = sum((r.pnl for r in allowed), Decimal("0"))
        roi_k = (pnl_allowed / deposit) if deposit else Decimal("0")

        profile[k] = {
            "threshold_k": k,
            "n_total": n_total,
            "n_blocked": blocked,
            "n_allowed": len(allowed),
            "pnl_total": pnl_total,
            "pnl_allowed": pnl_allowed,
            "deposit": deposit,
            "roi_base": roi_base,
            "roi_k": roi_k,
        }

        # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
        if len(allowed) >= N_MIN_ALLOWED and (roi_k - roi_base) >= DELTA_MIN_ROI:
            if roi_k > best_roi:
                best_roi = roi_k
                best_k = k
                best_allowed = len(allowed)
                best_blocked = blocked

    summary = {
        "n_total": n_total,
        "roi_base": roi_base,
        "roi_bin": profile.get(1, {}).get("roi_k", roi_base),  # K=1
        "best_k": best_k,
        "roi_best": best_roi,
        "n_allowed_best": best_allowed,
        "n_blocked_best": best_blocked,
        "uplift_abs": (best_roi - roi_base),
        "uplift_rel_pct": ((best_roi - roi_base) / (abs(roi_base) if roi_base != 0 else Decimal("1"))),
    }

    return profile, summary


# üî∏ –û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω: –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º csid√óTF√ódirection –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ã
async def _run_once(window_hours: int):
    now_utc = datetime.utcnow().replace(tzinfo=None)
    window_end = now_utc
    window_start = window_end - timedelta(hours=window_hours)

    rows = await _fetch_rows(window_start, window_end)
    if not rows:
        log.info("[BL] ‚ÑπÔ∏è –æ–∫–Ω–æ[%s..%s]: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", window_start.isoformat(), window_end.isoformat())
        return

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ csid√óTF√ódirection
    groups: Dict[Tuple[int, str, str], List[Row]] = {}
    for r in rows:
        groups.setdefault((r.csid, r.tf, r.direction), []).append(r)

    deposits = await _fetch_deposits(csid for csid, _, _ in groups.keys())

    scan_rows: List[Tuple] = []     # –¥–ª—è laboratory_bl_scan
    summary_rows: List[Tuple] = []  # –¥–ª—è laboratory_bl_summary
    active_rows: List[Tuple] = []   # –¥–ª—è laboratory_bl_summary_active

    processed = 0

    for (csid, tf, direction), vec in groups.items():
        dep = deposits.get(csid)
        if dep is None or dep <= 0:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞
            log.info("[BL] ‚ö†Ô∏è –ø—Ä–æ–ø—É—Å–∫ csid=%s tf=%s dir=%s: deposit –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/<=0", csid, tf, direction)
            continue

        profile, summary = _compute_profile(vec, dep)
        if not profile:
            continue

        # –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –≤—Å–µ–º K ‚Äî —Å–∫–ª–∞–¥—ã–≤–∞–µ–º
        for k, p in profile.items():
            scan_rows.append((
                window_start, window_end, csid, tf, direction,            # –∫–ª—é—á
                p["threshold_k"], p["n_total"], p["n_blocked"], p["n_allowed"],
                p["pnl_total"], p["pnl_allowed"], p["deposit"],
                p["roi_base"], p["roi_k"]
            ))

        # —Å–≤–æ–¥–∫–∞ (best_k + –±–∞–∑–æ–≤—ã–µ)
        summary_rows.append((
            window_start, window_end, csid, tf, direction,
            dep, summary["n_total"],
            summary["roi_base"], summary["roi_bin"],
            summary["best_k"], summary["roi_best"],
            summary["n_blocked_best"], summary["n_allowed_best"],
            summary["uplift_abs"], summary["uplift_rel_pct"],
            f"Nmin={N_MIN_ALLOWED};Œîmin={str(DELTA_MIN_ROI)}"
        ))

        # –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑
        active_rows.append((
            csid, tf, direction,
            WINDOW_HOURS, window_start, window_end, dep, summary["n_total"],
            summary["roi_base"], summary["roi_bin"],
            summary["best_k"], summary["roi_best"],
            summary["n_blocked_best"], summary["n_allowed_best"],
            summary["uplift_abs"], summary["uplift_rel_pct"],
            f"Nmin={N_MIN_ALLOWED};Œîmin={str(DELTA_MIN_ROI)}"
        ))

        processed += 1

    if not scan_rows:
        log.info("[BL] ‚ÑπÔ∏è –æ–∫–Ω–æ[%s..%s]: –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç", window_start.isoformat(), window_end.isoformat())
        return

    # –∑–∞–ø–∏—Å—å –≤ –ë–î: –ø—Ä–æ—Ñ–∏–ª—å, —Å–≤–æ–¥–∫–∞ –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑
    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # upsert SCAN
            await conn.executemany(
                f"""
                INSERT INTO {SCAN_TABLE} (
                    window_start, window_end, client_strategy_id, tf, direction,
                    threshold_k, n_total, n_blocked, n_allowed,
                    pnl_total, pnl_allowed, deposit,
                    roi_base, roi_k
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14
                )
                ON CONFLICT (window_end, client_strategy_id, tf, direction, threshold_k)
                DO UPDATE SET
                    window_start = EXCLUDED.window_start,
                    n_total      = EXCLUDED.n_total,
                    n_blocked    = EXCLUDED.n_blocked,
                    n_allowed    = EXCLUDED.n_allowed,
                    pnl_total    = EXCLUDED.pnl_total,
                    pnl_allowed  = EXCLUDED.pnl_allowed,
                    deposit      = EXCLUDED.deposit,
                    roi_base     = EXCLUDED.roi_base,
                    roi_k        = EXCLUDED.roi_k,
                    created_at   = NOW()
                """,
                scan_rows
            )

            # upsert SUMMARY (–∏—Å—Ç–æ—Ä–∏—è —á–∞—Å–∞)
            await conn.executemany(
                f"""
                INSERT INTO {SUMMARY_TABLE} (
                    window_start, window_end, client_strategy_id, tf, direction,
                    deposit, n_total, roi_base, roi_bin,
                    best_k, roi_best, n_blocked_best, n_allowed_best,
                    uplift_abs, uplift_rel_pct, criteria_note
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16
                )
                ON CONFLICT (window_end, client_strategy_id, tf, direction)
                DO UPDATE SET
                    window_start   = EXCLUDED.window_start,
                    deposit        = EXCLUDED.deposit,
                    n_total        = EXCLUDED.n_total,
                    roi_base       = EXCLUDED.roi_base,
                    roi_bin        = EXCLUDED.roi_bin,
                    best_k         = EXCLUDED.best_k,
                    roi_best       = EXCLUDED.roi_best,
                    n_blocked_best = EXCLUDED.n_blocked_best,
                    n_allowed_best = EXCLUDED.n_allowed_best,
                    uplift_abs     = EXCLUDED.uplift_abs,
                    uplift_rel_pct = EXCLUDED.uplift_rel_pct,
                    criteria_note  = EXCLUDED.criteria_note,
                    created_at     = NOW()
                """,
                summary_rows
            )

            # –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑: –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–∞—Ç–æ–º–∞—Ä–Ω–æ)
            await conn.execute(f"TRUNCATE {ACTIVE_TABLE}")
            await conn.executemany(
                f"""
                INSERT INTO {ACTIVE_TABLE} (
                    client_strategy_id, tf, direction,
                    window_hours, window_start, window_end, deposit, n_total,
                    roi_base, roi_bin, best_k, roi_best,
                    n_blocked_best, n_allowed_best, uplift_abs, uplift_rel_pct,
                    criteria_note
                ) VALUES (
                    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17
                )
                """,
                active_rows
            )

    # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≥–æ–Ω–∞
    log.info(
        "[BL] ‚úÖ –æ–∫–Ω–æ[%s..%s] –≥—Ä—É–ø–ø=%d scan_rows=%d summary_rows=%d active_rows=%d",
        window_start.isoformat(), window_end.isoformat(),
        processed, len(scan_rows), len(summary_rows), len(active_rows)
    )


# üî∏ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (—Ä–∞–∑ –≤ —á–∞—Å, —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ 7√ó24—á) —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π 90s
async def run_laboratory_bl_analyzer():
    """
    –ï–∂–µ—á–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è blacklist –ø–æ –æ–∫–Ω—É 7√ó24—á –Ω–∞ —É—Ä–æ–≤–Ω–µ csid√óTF√ódirection:
    - —Å—Ç—Ä–æ–∏—Ç ROI-–ø—Ä–æ—Ñ–∏–ª—å –ø–æ –ø–æ—Ä–æ–≥–∞–º K (scan),
    - –≤—ã–±–∏—Ä–∞–µ—Ç best_k –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏,
    - –ø–∏—à–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Å–∞ (summary) –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ä–µ–∑ (summary_active).
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 90 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–∞.
    """
    log.debug("üõ∞Ô∏è LAB_BL_ANALYZER –∑–∞–ø—É—â–µ–Ω: WINDOW=%dh, EVERY=%ds", WINDOW_HOURS, RUN_EVERY_SEC)

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π grace period
    start_delay_sec = 90
    log.info("‚è≥ LAB_BL_ANALYZER: —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ %ds (grace period –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)", start_delay_sec)
    await asyncio.sleep(start_delay_sec)

    while True:
        try:
            await _run_once(WINDOW_HOURS)
        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_BL_ANALYZER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_BL_ANALYZER –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–æ–Ω–∞")
        # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        await asyncio.sleep(RUN_EVERY_SEC)