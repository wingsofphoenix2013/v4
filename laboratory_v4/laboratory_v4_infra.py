# laboratory_v4_infra.py ‚Äî –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Laboratory v4 (PG/Redis, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, safe-loop)

import os
import logging
import asyncio
import asyncpg
import redis.asyncio as aioredis

# üî∏ –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_URL    = os.getenv("REDIS_URL")
LAB_DEBUG    = os.getenv("LAB_DEBUG", "false").lower() == "true"

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if LAB_DEBUG else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (pool)
async def init_pg_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (async) —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏
async def init_redis_client():
    client = aioredis.from_url(
        REDIS_URL,
        decode_responses=True,
        encoding="utf-8",
        socket_connect_timeout=3,
        socket_keepalive=True,
    )
    for attempt in range(3):
        try:
            await client.ping()
            return client
        except Exception:
            if attempt == 2:
                raise
            await asyncio.sleep(1 + attempt)

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≤ —Ü–∏–∫–ª–µ
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    log = logging.getLogger(name)
    while True:
        try:
            log.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro_fn()
        except asyncio.CancelledError:
            log.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏")
            raise
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
            log.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} —Å...")
            await asyncio.sleep(retry_delay)