# laboratory_mw_live.py ‚Äî –≤–æ—Ä–∫–µ—Ä laboratory_v4: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è MW-—Å–æ—Å—Ç–æ—è–Ω–∏–π (trend/volatility/momentum/extremes) –≤ Redis lab_live:mw:...

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
import json
from datetime import datetime
from typing import Tuple, Dict, Optional

from lab_utils import floor_to_bar
from compute_only import compute_snapshot_values_async  # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –∫–∞–∫ compute_fn –≤ –ø–∞–∫–µ—Ç—ã

# üî∏ –ü–∞–∫–µ—Ç–Ω—ã–µ –±–∏–ª–¥–µ—Ä—ã MW (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ, —É—á–∏—Ç—ã–≤–∞—é—Ç hysteresis+dwell —á–µ—Ä–µ–∑ laboratory_mw_shared)
from packs.trend_pack import build_trend_pack
from packs.volatility_pack import build_volatility_pack
from packs.momentum_pack import build_momentum_pack
from packs.extremes_pack import build_extremes_pack

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_MW_LIVE")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞
TF_SET = ("m5", "m15", "h1")        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ TF
LAB_PREFIX = "lab_live"             # –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
LAB_TTL_SEC = 60                    # TTL KV-–∑–∞–ø–∏—Å–µ–π
TICK_INTERVAL_SEC = 15              # –ø–µ—Ä–∏–æ–¥ —Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
MAX_CONCURRENCY = 64                # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã (symbol, tf)
KIND_CONCURRENCY = 4                # –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –ø–æ –≤–∏–¥–∞–º MW –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã (—É –Ω–∞—Å –∏—Ö 4)

# üî∏ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ kind ‚Üí builder
BUILDERS = {
    "trend": build_trend_pack,
    "volatility": build_volatility_pack,
    "momentum": build_momentum_pack,
    "extremes": build_extremes_pack,
}

# üî∏ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å KV-–∫–ª—é—á MW
def _mw_key(symbol: str, tf: str, kind: str) -> str:
    return f"{LAB_PREFIX}:mw:{symbol}:{tf}:{kind}"

# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–∏—Ç—å streak, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ streak_preview)
def _normalize_details(details: Dict) -> Dict:
    if not isinstance(details, dict):
        return {}
    # –ø–µ—Ä–µ–Ω–æ—Å–∏–º streak_preview ‚Üí streak (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ prev_streak)
    sp = details.get("streak_preview")
    if sp is not None and "streak" not in details:
        try:
            details["streak"] = int(sp)
        except Exception:
            pass
    return details

# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ MW-–ø–∞–∫–µ—Ç–∞ –≤ KV lab_live:mw:... —Å TTL
async def _persist_mw(redis, symbol: str, tf: str, kind: str, pack_obj: Dict) -> bool:
    try:
        pack = pack_obj.get("pack", {})
        state = pack.get("state")
        if state is None:
            return False

        open_time = pack.get("open_time")
        if open_time is None:
            # –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª, fallback: —Å–µ–π—á–∞—Å
            open_time = datetime.utcnow().isoformat()

        details = _normalize_details(dict(pack))  # –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫
        payload = {
            "state": state,
            "version": 1,
            "open_time": open_time,
            "computed_at": datetime.utcnow().isoformat(),
            "details": details,
        }
        key = _mw_key(symbol, tf, kind)
        await redis.set(key, json.dumps(payload), ex=LAB_TTL_SEC)
        return True
    except Exception as e:
        log.warning("persist error %s/%s kind=%s: %s", symbol, tf, kind, e)
        return False

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞—Ä—ã (symbol, tf): —Ä–∞—Å—á—ë—Ç 4 MW-–ø–∞–∫–µ—Ç–æ–≤ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
async def _process_pair(
    redis,
    symbol: str,
    tf: str,
    open_ms: int,
    precision: int,
) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (published_states, skipped_states)
    """
    published = 0
    skipped = 0

    # –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –ø–æ –≤–∏–¥–∞–º MW
    kind_sem = asyncio.Semaphore(KIND_CONCURRENCY)

    async def _build_and_publish(kind: str) -> Tuple[int, int]:
        async with kind_sem:
            try:
                builder = BUILDERS.get(kind)
                if builder is None:
                    return (0, 1)
                # –ø–∞–∫–µ—Ç—ã –æ–∂–∏–¥–∞—é—Ç now_ms –∏ —Å–∞–º–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç –∫ open_time (floor_to_bar)
                pack_obj = await builder(symbol, tf, open_ms, precision, redis, compute_snapshot_values_async)
                if not pack_obj:
                    return (0, 1)
                ok = await _persist_mw(redis, symbol, tf, kind, pack_obj)
                return (1 if ok else 0, 0 if ok else 1)
            except Exception as e:
                log.warning("mw build error %s/%s kind=%s: %s", symbol, tf, kind, e)
                return (0, 1)

    results = await asyncio.gather(
        *[asyncio.create_task(_build_and_publish(kind)) for kind in BUILDERS.keys()],
        return_exceptions=False,
    )

    for pub, sk in results:
        published += pub
        skipped += sk

    return (published, skipped)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä: –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç MW-—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ä–∞–º –∏ TF
async def run_lab_mw_live(
    pg,
    redis,
    get_active_symbols,      # callable() -> list[str]
    get_precision,           # callable(symbol) -> int|None
    get_last_bar,            # callable(symbol, tf) -> int|None
    tf_set: Tuple[str, ...] = TF_SET,
    tick_interval_sec: int = TICK_INTERVAL_SEC,
):
    sem = asyncio.Semaphore(MAX_CONCURRENCY)

    while True:
        t0 = time.monotonic()
        now_ms = int(time.time() * 1000)

        symbols = get_active_symbols()
        if not symbols:
            await asyncio.sleep(tick_interval_sec)
            continue

        total_pairs = 0
        total_published = 0   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∏–∑ 4 –Ω–∞ –ø–∞—Ä—É)
        total_skipped = 0

        async def run_one(sym: str, tf: str):
            nonlocal total_pairs, total_published, total_skipped
            async with sem:
                last = get_last_bar(sym, tf)
                # –¥–ª—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–º –±–∞—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∫–∞; –∏–Ω–∞—á–µ ‚Äî –Ω–∞ —Ç–µ–∫—É—â–µ–º floored
                open_ms = last if last is not None else floor_to_bar(now_ms, tf)
                prec = get_precision(sym) or 8
                try:
                    pub, sk = await _process_pair(redis, sym, tf, open_ms, prec)
                except Exception as e:
                    log.warning("pair error %s/%s: %s", sym, tf, e)
                    pub, sk = 0, 4
                total_pairs += 1
                total_published += pub
                total_skipped += sk

        tasks = [
            asyncio.create_task(run_one(sym, tf))
            for sym in symbols
            for tf in tf_set
        ]
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=False)

        t1 = time.monotonic()
        elapsed_ms = int((t1 - t0) * 1000)

        # –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ —Ç–∏–∫–∞
        log.info(
            "LAB MW: tick done pairs=%d states=%d skipped=%d elapsed_ms=%d",
            total_pairs, total_published, total_skipped, elapsed_ms
        )

        await asyncio.sleep(tick_interval_sec)