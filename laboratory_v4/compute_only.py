# compute_only.py ‚Äî —á–∏—Å—Ç—ã–π —Ä–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ Redis/–ë–î): snapshot-–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ v4

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import asyncio
import math
from typing import Dict

# üî∏ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ –∏–∑ laboratory_v4/indicators)
from indicators import ema, atr, lr, mfi, rsi, adx_dmi, macd, bb, kama

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("SNAPSHOT")

# üî∏ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
INDICATOR_DISPATCH: Dict[str, callable] = {
    "ema": ema.compute,
    "atr": atr.compute,
    "lr": lr.compute,
    "mfi": mfi.compute,
    "rsi": rsi.compute,
    "adx_dmi": adx_dmi.compute,
    "macd": macd.compute,
    "bb": bb.compute,
    "kama": kama.compute,
}

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ
def _is_finite_number(x) -> bool:
    try:
        return x is not None and isinstance(x, (int, float)) and math.isfinite(float(x))
    except Exception:
        return False

# üî∏ –ß–∏—Å—Ç—ã–π —Ä–∞—Å—á—ë—Ç (–∫–∞–∫ –≤ v4): –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ, –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω, —Å—Ç—Ä–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ precision
def compute_snapshot_values(instance: dict, symbol: str, df, precision: int) -> Dict[str, str]:
    """
    instance = {
        "indicator": <str>,
        "params":    <dict>,   # —Å—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞ –∫–∞–∫ –≤ indicator_parameters_v4
        "timeframe": <str>,
        ...
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {param_name: str(value)} c —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ –≤ v4:
      - –∫–ª—é—á–∏ *_angle –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è –¥–æ 5 –∑–Ω–∞–∫–æ–≤ –∏ –≤—ã–≤–æ–¥—è—Ç—Å—è —Å '.5f';
      - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ <precision> –∑–Ω–∞–∫–æ–≤ –∏ –≤—ã–≤–æ–¥—è—Ç—Å—è —Å f".{precision}f";
      - –±–∞–∑–æ–≤–æ–µ –∏–º—è: macd{fast} | {indicator}{length} | {indicator};
      - 'value' ‚Üí base; –∏–Ω—ã–µ ‚Üí base_param (–µ—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å base_).
    """
    indicator = instance.get("indicator")
    params = instance.get("params") or {}

    # –ø–æ–ª—É—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞
    compute_fn = INDICATOR_DISPATCH.get(str(indicator))
    if compute_fn is None:
        log.warning(f"‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
        return {}

    # —Å—Ç—Ä–∞—Ö—É–µ–º precision (0..12 —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
    try:
        precision = int(precision)
    except Exception:
        precision = 8
    precision = max(0, min(precision, 12))

    # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç
    try:
        raw = compute_fn(df, params)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ {indicator}: {e}")
        return {}

    if not isinstance(raw, dict) or not raw:
        return {}

    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ v4)
    rounded: Dict[str, float] = {}
    for k, v in raw.items():
        if not _is_finite_number(v):
            continue
        try:
            fv = float(v)
            if "angle" in str(k):
                rounded[k] = round(fv, 5)
            else:
                rounded[k] = round(fv, precision)
        except Exception as e:
            log.warning(f"[{indicator}] {symbol}: –æ—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è {k}={v} ‚Üí {e}")

    if not rounded:
        return {}

    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ base (–∫–∞–∫ –≤ v4)
    try:
        if indicator == "macd":
            base = f"{indicator}{params['fast']}"
        elif "length" in params:
            base = f"{indicator}{params['length']}"
        else:
            base = str(indicator)
    except Exception:
        # –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∏–≤—ã—Ö params ‚Äî fallback
        base = str(indicator)

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∏–º—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–∏
    out: Dict[str, str] = {}
    for param, value in rounded.items():
        # –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è
        if str(param).startswith(f"{base}_") or str(param) == base:
            param_name = str(param)
        else:
            param_name = base if str(param) == "value" else f"{base}_{param}"

        # —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if "angle" in param_name:
            out[param_name] = f"{float(value):.5f}"
        else:
            out[param_name] = f"{float(value):.{precision}f}"

    return out

# üî∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞: —Ä–∞—Å—á—ë—Ç –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop)
async def compute_snapshot_values_async(instance: dict, symbol: str, df, precision: int) -> Dict[str, str]:
    return await asyncio.to_thread(compute_snapshot_values, instance, symbol, df, precision)