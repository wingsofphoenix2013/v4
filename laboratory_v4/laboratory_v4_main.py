# laboratory_v4_main.py ‚Äî Laboratory v4: –±–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å, –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ç–∏–∫–µ—Ä–æ–≤

import asyncio
import logging

from laboratory_v4_infra import setup_logging, init_pg_pool, init_redis_client, run_safe_loop
from laboratory_v4_config import LAB_START_DELAY_SEC, LAB_REFRESH_SEC
from laboratory_v4_repo import load_active_strategies, load_active_tickers
from lab_seeder_adx import seed as seed_adx

log = logging.getLogger("LAB_MAIN")

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–µ—à–∏
active_strategies = []   # list[dict]: {id, enabled, market_watcher}
active_tickers    = []   # list[dict]: {symbol, precision_price}

# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ—Ä–µ—à –∫–µ—à–µ–π (–ª–æ–≥ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫–∞)
async def refresher(pg):
    if LAB_START_DELAY_SEC > 0:
        log.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ {LAB_START_DELAY_SEC} —Å")
        await asyncio.sleep(LAB_START_DELAY_SEC)

    while True:
        try:
            strategies = await load_active_strategies(pg)
            tickers    = await load_active_tickers(pg)

            active_strategies.clear()
            active_strategies.extend(strategies)

            active_tickers.clear()
            active_tickers.extend(tickers)

            log.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(active_strategies)} | —Ç–∏–∫–µ—Ä–æ–≤: {len(active_tickers)}")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–π: {e}", exc_info=True)

        await asyncio.sleep(LAB_REFRESH_SEC)

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Laboratory v4
async def main():
    setup_logging()
    log.info("üì¶ Laboratory v4: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    pg    = await init_pg_pool()
    _redis = await init_redis_client()  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ä–∂–∏–º –∂–∏–≤—ã–º; –Ω–∞ –±—É–¥—É—â–µ–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è

    # üî∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–æ–≥–æ–Ω—è–µ–º —Å–∏–¥–µ—Ä ADX (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    try:
        log.info("üß© ADX seeder: –∑–∞–ø—É—Å–∫")
        await seed_adx(pg)
        log.info("üß© ADX seeder: –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        log.error(f"‚ùå ADX seeder error: {e}", exc_info=True)

    # –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏/—Ä–∞–Ω–Ω–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤
    await asyncio.gather(
        run_safe_loop(lambda: refresher(pg), "CONFIG_LOADER"),
        # r

if __name__ == "__main__":
    asyncio.run(main())