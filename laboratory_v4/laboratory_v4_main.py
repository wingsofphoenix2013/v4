# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–∞–Ω—ã (–ø–æ 10), –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (–ø–æ 500), —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

import os
import asyncio
import logging
from datetime import datetime, timezone

import laboratory_v4_infra as infra
import laboratory_v4_loader as loader

log = logging.getLogger("LAB_MAIN")

LAB_LOOP_SLEEP_SEC = int(os.getenv("LAB_LOOP_SLEEP_SEC", "3600"))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª ¬´—Å–æ–Ω/–ø—Ä–æ—Å—ã–ø–∞–Ω–∏–µ¬ª


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–Ω–∞ (lab_id √ó strategy_id)
async def process_run(lab: dict, strategy_id: int):
    lab_id = int(lab["lab_id"])
    run_id = await infra.create_run(lab_id, strategy_id)
    lock_key = f"lab:run:lock:{lab_id}:{strategy_id}"

    try:
        async with infra.redis_lock(lock_key, ttl_sec=infra.LOCK_TTL_SEC):
            await infra.mark_run_started(run_id)

            # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ (–¥–ª—è –ø–æ—Ä—è–¥–∫–∞, ADX/BB –∏ —Ç. –ø. –±—É–¥—É—Ç —á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö)
            params = await loader.load_lab_parameters(lab_id)
            log.debug("–°—Ç–∞—Ä—Ç —Ä–∞–Ωa lab_id=%s strategy_id=%s run_id=%s components=%d", lab_id, strategy_id, run_id, len(params))

            cutoff = datetime.now(timezone.utc)
            processed = approved = filtered = skipped = 0
            batch_uids: list[str] = []

            # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—á–∫–∏
            async def process_batch(uids: list[str]):
                nonlocal processed, approved, filtered, skipped
                if not uids:
                    return
                # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º:
                # 1) –ø–æ–¥—Ç—è–Ω—É—Ç—å PIS –¥–ª—è uids (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)
                # 2) –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏—è (approved/filtered/skipped_no_data) –≤ Python
                # 3) –∑–∞–ø–∏—Å–∞—Ç—å batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ laboratory_results_v4
                # –ü–æ–∫–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.
                processed += len(uids)

            # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –ø–∞—á–∫–∞–º–∏ (batch=infra.POSITIONS_BATCH)
            async for uid in loader.iter_closed_positions_uids(strategy_id, cutoff, infra.POSITIONS_BATCH):
                batch_uids.append(uid)
                if len(batch_uids) >= infra.POSITIONS_BATCH:
                    await process_batch(batch_uids)
                    batch_uids.clear()

                # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if processed % 100 == 0:
                    await infra.update_progress_json(run_id, {
                        "cutoff_at": cutoff.isoformat(),
                        "processed": processed,
                        "approved": approved,
                        "filtered": filtered,
                        "skipped_no_data": skipped,
                    })

            # ¬´—Ö–≤–æ—Å—Ç¬ª –Ω–µ–ø–æ–ª–Ω–æ–π –ø–∞—á–∫–∏
            if batch_uids:
                await process_batch(batch_uids)
                batch_uids.clear()

            await infra.update_progress_json(run_id, {
                "cutoff_at": cutoff.isoformat(),
                "processed": processed,
                "approved": approved,
                "filtered": filtered,
                "skipped_no_data": skipped,
            })

            await infra.mark_run_finished(run_id)
            await infra.send_finish_signal(lab_id, strategy_id, run_id)
            log.info("RUN DONE lab=%s strategy=%s run_id=%s processed=%s", lab_id, strategy_id, run_id, processed)

    except asyncio.CancelledError:
        log.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–Ωa lab=%s strategy=%s run_id=%s –ø–æ —Å–∏–≥–Ω–∞–ª—É", lab_id, strategy_id, run_id)
        raise
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —Ä–∞–Ωa lab=%s strategy=%s run_id=%s: %s", lab_id, strategy_id, run_id, e)
        await infra.mark_run_failed(run_id, reason=str(e))


# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–µ–º–∞—Ñ–æ—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–Ωo–≤)
async def run_guarded(lab: dict, sid: int):
    await infra.concurrency_sem.acquire()
    try:
        await process_run(lab, sid)
    finally:
        infra.concurrency_sem.release()


# üî∏ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ—Ä–µ—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤/—Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
async def scheduler_loop():
    while True:
        try:
            plan = await loader.build_run_plan()
            tasks: list[asyncio.Task] = []

            for lab_id, sid in plan:
                lab_dict = {"lab_id": lab_id}  # –∫–æ–º–ø–∞–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ
                tasks.append(asyncio.create_task(run_guarded(lab_dict, sid)))

            if tasks:
                await asyncio.gather(*tasks)

        except asyncio.CancelledError:
            log.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception:
            log.exception("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        await asyncio.sleep(LAB_LOOP_SLEEP_SEC)


# üî∏ main
async def main():
    infra.setup_logging()
    log.info("–ó–∞–ø—É—Å–∫ laboratory_v4 Background Worker")

    await infra.setup_pg()
    await infra.setup_redis_client()

    await scheduler_loop()


if __name__ == "__main__":
    asyncio.run(main())