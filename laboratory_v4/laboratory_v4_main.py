# laboratory_v4_main.py ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ laboratory_v4 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∫–µ—à–∏, Pub/Sub, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: —Ç–æ–ª—å–∫–æ IND m5)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging

from laboratory_infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    run_safe_loop,
)
from laboratory_config import (
    bootstrap_caches,             # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    get_cache_stats,              # –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
    get_instances_by_tf,          # –≥–µ—Ç—Ç–µ—Ä—ã –∫–µ—à–µ–π
    get_precision,
    get_active_symbols,
    get_last_bar,
    run_watch_tickers_events,     # Pub/Sub: tickers_v4_events
    run_watch_indicators_events,  # Pub/Sub: indicators_v4_events
    run_watch_ohlcv_ready_channel # Pub/Sub: bb:ohlcv_channel ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç last_bar
)
from laboratory_ind_live import run_lab_ind_live  # IND-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è lab_live:ind:*

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–∏—Å–∞ (–ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ ENV)
LAB_SETTINGS = {
    # Pub/Sub –∫–∞–Ω–∞–ª—ã
    "CHANNEL_TICKERS": "tickers_v4_events",
    "CHANNEL_INDICATORS": "indicators_v4_events",
    "CHANNEL_OHLCV_READY": "bb:ohlcv_channel",

    # –ó–∞–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä—Ç–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π (—Å–µ–∫)
    "DELAY_TICKERS": 0.5,
    "DELAY_INDICATORS": 0.5,
    "DELAY_OHLCV_CHANNEL": 2.0,

    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ IND –ø–æ m5
    "IND_ONLY_TF_SET": ("m5",),  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º m15/h1
    "IND_START_DELAY": 60,       # —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    "IND_TICK_SEC": 3,           # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ 3 —Å–µ–∫—É–Ω–¥—ã
}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_MAIN")

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –∑–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def _run_with_delay(coro_factory, delay: float):
    if delay and delay > 0:
        await asyncio.sleep(delay)
    await coro_factory()

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ IND-only –≤–æ—Ä–∫–µ—Ä–∞
async def main():
    setup_logging()
    log.info("LAB: –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (experiment: IND-only m5)")

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î/Redis
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    await bootstrap_caches(pg=pg, redis=redis, tf_set=("m5", "m15", "h1"))

    # –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    stats = get_cache_stats()
    log.info("LAB INIT: tickers=%d indicators=%d", stats.get("symbols", 0), stats.get("indicators", 0))

    # –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π Pub/Sub –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ IND-live –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ m5
    await asyncio.gather(
        # Pub/Sub: —Ç–∏–∫–µ—Ä—ã
        run_safe_loop(
            lambda: run_watch_tickers_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_TICKERS"],
                initial_delay=LAB_SETTINGS["DELAY_TICKERS"],
            ),
            "LAB_TICKERS",
        ),
        # Pub/Sub: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        run_safe_loop(
            lambda: run_watch_indicators_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_INDICATORS"],
                initial_delay=LAB_SETTINGS["DELAY_INDICATORS"],
                tf_set=("m5", "m15", "h1"),
            ),
            "LAB_INDICATORS",
        ),
        # Pub/Sub: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π
        run_safe_loop(
            lambda: run_watch_ohlcv_ready_channel(
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_OHLCV_READY"],
                initial_delay=LAB_SETTINGS["DELAY_OHLCV_CHANNEL"],
            ),
            "LAB_OHLCV_READY",
        ),
        # IND-only m5: —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–∏–æ–¥ 3 —Å–µ–∫—É–Ω–¥—ã
        run_safe_loop(
            lambda: _run_with_delay(
                lambda: run_lab_ind_live(
                    pg=pg,
                    redis=redis,
                    get_instances_by_tf=get_instances_by_tf,
                    get_precision=get_precision,
                    get_active_symbols=get_active_symbols,
                    get_last_bar=get_last_bar,
                    tf_set=LAB_SETTINGS["IND_ONLY_TF_SET"],       # ("m5",)
                    tick_interval_sec=LAB_SETTINGS["IND_TICK_SEC"] # 3 —Å–µ–∫—É–Ω–¥—ã
                ),
                LAB_SETTINGS["IND_START_DELAY"],
            ),
            "LAB_IND_LIVE_m5",
        ),
    )

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())