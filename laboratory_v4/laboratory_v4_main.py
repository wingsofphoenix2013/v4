# laboratory_v4_main.py ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ laboratory_v4 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∫–µ—à–∏, –≤–æ—Ä–∫–µ—Ä—ã-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from datetime import datetime, timezone

from laboratory_infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    run_safe_loop,
)
from laboratory_config import (
    bootstrap_caches,            # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã) –∏ –ª–æ–≥ –∏—Ç–æ–≥–æ–≤
    get_cache_stats,             # –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–µ–π –¥–ª—è heartbeat
    run_watch_tickers_events,    # –ø–æ–¥–ø–∏—Å—á–∏–∫ Pub/Sub: tickers_v4_events
    run_watch_indicators_events, # –ø–æ–¥–ø–∏—Å—á–∏–∫ Pub/Sub: indicators_v4_events
    run_watch_signals_events,    # –ø–æ–¥–ø–∏—Å—á–∏–∫ Pub/Sub: signals_v4_events (–ª–æ–≥)
    run_watch_strategies_events, # –ø–æ–¥–ø–∏—Å—á–∏–∫ Pub/Sub: strategies_v4_events (–ª–æ–≥)
    run_watch_signals_stream,    # –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å Stream: signals_stream (–ª–æ–≥)
    run_watch_ohlcv_ready_stream # –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å Stream: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç last_bar
)

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–∏—Å–∞ (–≤–º–µ—Å—Ç–æ ENV)
LAB_SETTINGS = {
    # TF —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å m5/m15/h1
    "TF_SET": ("m5", "m15", "h1"),

    # Redis –∫–∞–Ω–∞–ª—ã/—Å—Ç—Ä–∏–º—ã
    "CHANNEL_TICKERS": "tickers_v4_events",
    "CHANNEL_INDICATORS": "indicators_v4_events",
    "CHANNEL_SIGNALS": "signals_v4_events",
    "CHANNEL_STRATEGIES": "strategies_v4_events",
    "STREAM_SIGNALS": "signals_stream",
    "STREAM_OHLCV_READY": "bb:ohlcv_channel",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ Stream –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—á–µ–π

    # –ò–º–µ–Ω–∞ consumer-–≥—Ä—É–ø–ø/–∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤ (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å v4)
    "GROUP_SIGNALS": "labv4_signals_group",
    "CONSUMER_SIGNALS": "labv4_signals_1",
    "GROUP_OHLCV": "labv4_ohlcv_group",
    "CONSUMER_OHLCV": "labv4_ohlcv_1",

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–∞—É–∑—ã –Ω–∞ –≤–æ—Ä–∫–µ—Ä—ã (—Å–µ–∫)
    "DELAY_TICKERS": 0.5,
    "DELAY_INDICATORS": 0.5,
    "DELAY_SIGNALS_PUBSUB": 2.0,
    "DELAY_STRATEGIES_PUBSUB": 2.0,
    "DELAY_SIGNALS_STREAM": 2.0,
    "DELAY_OHLCV_STREAM": 4.0,

    # –ö–∞–¥–µ–Ω—Å heartbeat (—Å–µ–∫)
    "HEARTBEAT_SEC": 30,
}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_MAIN")


# üî∏ –í–æ—Ä–∫–µ—Ä heartbeat (–º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–µ–π –∏ ‚Äú–∂–∏–≤–æ—Å—Ç—å‚Äù)
async def run_heartbeat(pg, redis, every_sec: int):
    # –ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ –∫–µ—à–∞–º
    while True:
        try:
            stats = get_cache_stats()
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é –æ—Ç–º–µ—Ç–∫—É
            now_iso = datetime.now(timezone.utc).replace(tzinfo=None).isoformat()
            # –ª–æ–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
            log.info(
                "LAB HEARTBEAT: symbols=%d indicators=%d last_bars=%d at=%s",
                stats.get("symbols", 0),
                stats.get("indicators", 0),
                stats.get("last_bars", 0),
                now_iso,
            )
        except Exception as e:
            log.error(f"HEARTBEAT error: {e}", exc_info=True)
        await asyncio.sleep(every_sec)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async def main():
    setup_logging()
    log.info("LAB: –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î/Redis
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    await bootstrap_caches(
        pg=pg,
        redis=redis,
        tf_set=LAB_SETTINGS["TF_SET"],
    )

    # –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    stats = get_cache_stats()
    log.info(
        "LAB INIT: tickers=%d indicators=%d",
        stats.get("symbols", 0),
        stats.get("indicators", 0),
    )

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –ø–∞—É–∑–∞–º–∏ —Å—Ç–∞—Ä—Ç–∞
    await asyncio.gather(
        # Pub/Sub: —Ç–∏–∫–µ—Ä—ã
        run_safe_loop(
            lambda: run_watch_tickers_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_TICKERS"],
                initial_delay=LAB_SETTINGS["DELAY_TICKERS"],
            ),
            "LAB_TICKERS",
        ),
        # Pub/Sub: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        run_safe_loop(
            lambda: run_watch_indicators_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_INDICATORS"],
                initial_delay=LAB_SETTINGS["DELAY_INDICATORS"],
                tf_set=LAB_SETTINGS["TF_SET"],
            ),
            "LAB_INDICATORS",
        ),
        # Pub/Sub: —Å–∏–≥–Ω–∞–ª—ã (–ª–æ–≥–∏—Ä—É–µ–º)
        run_safe_loop(
            lambda: run_watch_signals_events(
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_SIGNALS"],
                initial_delay=LAB_SETTINGS["DELAY_SIGNALS_PUBSUB"],
            ),
            "LAB_SIGNALS_PUBSUB",
        ),
        # Pub/Sub: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ª–æ–≥–∏—Ä—É–µ–º)
        run_safe_loop(
            lambda: run_watch_strategies_events(
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_STRATEGIES"],
                initial_delay=LAB_SETTINGS["DELAY_STRATEGIES_PUBSUB"],
            ),
            "LAB_STRATEGIES_PUBSUB",
        ),
        # Stream: –≤—Ö–æ–¥—è—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–ª–æ–≥–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–∞–º–∏)
        run_safe_loop(
            lambda: run_watch_signals_stream(
                redis=redis,
                stream=LAB_SETTINGS["STREAM_SIGNALS"],
                group=LAB_SETTINGS["GROUP_SIGNALS"],
                consumer=LAB_SETTINGS["CONSUMER_SIGNALS"],
                initial_delay=LAB_SETTINGS["DELAY_SIGNALS_STREAM"],
            ),
            "LAB_SIGNALS_STREAM",
        ),
        # Stream: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à last_bar)
        run_safe_loop(
            lambda: run_watch_ohlcv_ready_stream(
                redis=redis,
                stream=LAB_SETTINGS["STREAM_OHLCV_READY"],
                group=LAB_SETTINGS["GROUP_OHLCV"],
                consumer=LAB_SETTINGS["CONSUMER_OHLCV"],
                initial_delay=LAB_SETTINGS["DELAY_OHLCV_STREAM"],
            ),
            "LAB_OHLCV_READY",
        ),
        # Heartbeat
        run_safe_loop(
            lambda: run_heartbeat(
                pg=pg, redis=redis, every_sec=LAB_SETTINGS["HEARTBEAT_SEC"]
            ),
            "LAB_HEARTBEAT",
        ),
    )


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())