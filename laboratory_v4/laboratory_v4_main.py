# laboratory_v4_main.py ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ laboratory_v4 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∫–µ—à–∏, Pub/Sub, IND/MW/PACK per-TF —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging

from laboratory_infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    run_safe_loop,
)
from laboratory_config import (
    bootstrap_caches,             # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    get_cache_stats,              # –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
    get_instances_by_tf,          # –≥–µ—Ç—Ç–µ—Ä—ã –∫–µ—à–µ–π
    get_precision,
    get_active_symbols,
    get_last_bar,
    run_watch_tickers_events,     # Pub/Sub: tickers_v4_events
    run_watch_indicators_events,  # Pub/Sub: indicators_v4_events
    run_watch_ohlcv_ready_channel # Pub/Sub: bb:ohlcv_channel ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç last_bar
)
from laboratory_ind_live import run_lab_ind_live        # IND-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è lab_live:ind:*
from laboratory_mw_live import run_lab_mw_live          # MW-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è lab_live:mw:*
from laboratory_pack_live import run_lab_pack_live      # PACK-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è lab_live:pack:*

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–∏—Å–∞ (–ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ ENV)
LAB_SETTINGS = {
    # Pub/Sub –∫–∞–Ω–∞–ª—ã
    "CHANNEL_TICKERS": "tickers_v4_events",
    "CHANNEL_INDICATORS": "indicators_v4_events",
    "CHANNEL_OHLCV_READY": "bb:ohlcv_channel",

    # –ó–∞–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä—Ç–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π (—Å–µ–∫)
    "DELAY_TICKERS": 0.5,
    "DELAY_INDICATORS": 0.5,
    "DELAY_OHLCV_CHANNEL": 2.0,
}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_MAIN")

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –∑–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def _run_with_delay(coro_factory, delay: float):
    if delay and delay > 0:
        await asyncio.sleep(delay)
    await coro_factory()

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ per-TF –≤–æ—Ä–∫–µ—Ä–æ–≤
async def main():
    setup_logging()
    log.info("LAB: –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î/Redis
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    await bootstrap_caches(pg=pg, redis=redis, tf_set=("m5", "m15", "h1"))

    # –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    stats = get_cache_stats()
    log.info("LAB INIT: tickers=%d indicators=%d", stats.get("symbols", 0), stats.get("indicators", 0))

    # üî∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ per-TF (–∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥ —Ç–∏–∫–∞)
    #    –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: m5 ‚Üí 20s (—Å—Ç–∞—Ä—Ç 60‚Äì65s), m15 ‚Üí 60s (—Å—Ç–∞—Ä—Ç 75‚Äì80s), h1 ‚Üí 90s (—Å—Ç–∞—Ä—Ç 90‚Äì95s)
    IND_SCHEDULE = [
        (("m5",),  20,  62),   # (tf_set, interval_sec, initial_delay_sec)
        (("m15",), 60,  78),
        (("h1",),  90,  92),
    ]
    MW_SCHEDULE = [
        (("m5",),  20,  63),
        (("m15",), 60,  79),
        (("h1",),  90,  94),
    ]
    PACK_SCHEDULE = [
        (("m5",),  20,  65),
        (("m15",), 60,  80),
        (("h1",),  90,  95),
    ]

    # üî∏ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏ per-TF –≤–æ—Ä–∫–µ—Ä–æ–≤
    tasks = [
        # —Å–ª—É—à–∞—Ç–µ–ª–∏ Pub/Sub
        run_safe_loop(lambda: run_watch_tickers_events(pg=pg, redis=redis,
                          channel=LAB_SETTINGS["CHANNEL_TICKERS"],
                          initial_delay=LAB_SETTINGS["DELAY_TICKERS"]), "LAB_TICKERS"),
        run_safe_loop(lambda: run_watch_indicators_events(pg=pg, redis=redis,
                          channel=LAB_SETTINGS["CHANNEL_INDICATORS"],
                          initial_delay=LAB_SETTINGS["DELAY_INDICATORS"],
                          tf_set=("m5", "m15", "h1")), "LAB_INDICATORS"),
        run_safe_loop(lambda: run_watch_ohlcv_ready_channel(redis=redis,
                          channel=LAB_SETTINGS["CHANNEL_OHLCV_READY"],
                          initial_delay=LAB_SETTINGS["DELAY_OHLCV_CHANNEL"]), "LAB_OHLCV_READY"),
    ]

    # IND per-TF
    for tf_set, interval, delay in IND_SCHEDULE:
        tasks.append(
            run_safe_loop(
                lambda tf_set=tf_set, interval=interval, delay=delay: _run_with_delay(
                    lambda: run_lab_ind_live(
                        pg=pg, redis=redis,
                        get_instances_by_tf=get_instances_by_tf,
                        get_precision=get_precision,
                        get_active_symbols=get_active_symbols,
                        get_last_bar=get_last_bar,
                        tf_set=tf_set,
                        tick_interval_sec=interval,
                    ),
                    delay,
                ),
                f"LAB_IND_LIVE_{'_'.join(tf_set)}",
            )
        )

    # MW per-TF
    for tf_set, interval, delay in MW_SCHEDULE:
        tasks.append(
            run_safe_loop(
                lambda tf_set=tf_set, interval=interval, delay=delay: _run_with_delay(
                    lambda: run_lab_mw_live(
                        pg=pg, redis=redis,
                        get_active_symbols=get_active_symbols,
                        get_precision=get_precision,
                        get_last_bar=get_last_bar,
                        tf_set=tf_set,
                        tick_interval_sec=interval,
                    ),
                    delay,
                ),
                f"LAB_MW_LIVE_{'_'.join(tf_set)}",
            )
        )

    # PACK per-TF
    for tf_set, interval, delay in PACK_SCHEDULE:
        tasks.append(
            run_safe_loop(
                lambda tf_set=tf_set, interval=interval, delay=delay: _run_with_delay(
                    lambda: run_lab_pack_live(
                        pg=pg, redis=redis,
                        get_active_symbols=get_active_symbols,
                        get_precision=get_precision,
                        get_instances_by_tf=get_instances_by_tf,
                        get_last_bar=get_last_bar,
                        tf_set=tf_set,
                        tick_interval_sec=interval,
                    ),
                    delay,
                ),
                f"LAB_PACK_LIVE_{'_'.join(tf_set)}",
            )
        )

    await asyncio.gather(*tasks)

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())