# laboratory_v4_main.py ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ laboratory_v4 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∫–µ—à–∏, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ Pub/Sub, IND/MW-live –≤–æ—Ä–∫–µ—Ä—ã)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging

from laboratory_infra import (
    setup_logging,
    init_pg_pool,
    init_redis_client,
    run_safe_loop,
)
from laboratory_config import (
    bootstrap_caches,             # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    get_cache_stats,              # –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
    get_instances_by_tf,          # –≥–µ—Ç—Ç–µ—Ä—ã –∫–µ—à–µ–π –¥–ª—è IND-–≤–æ—Ä–∫–µ—Ä–∞
    get_precision,
    get_active_symbols,
    get_last_bar,
    run_watch_tickers_events,     # Pub/Sub: tickers_v4_events
    run_watch_indicators_events,  # Pub/Sub: indicators_v4_events
    run_watch_ohlcv_ready_channel # Pub/Sub: bb:ohlcv_channel ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç last_bar
)
from laboratory_ind_live import run_lab_ind_live        # IND-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ lab_live:ind:*
from laboratory_mw_live import run_lab_mw_live          # MW-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ lab_live:mw:*

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–∏—Å–∞ (–ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ ENV)
LAB_SETTINGS = {
    # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å m5/m15/h1
    "TF_SET": ("m5", "m15", "h1"),

    # Redis Pub/Sub –∫–∞–Ω–∞–ª—ã
    "CHANNEL_TICKERS": "tickers_v4_events",
    "CHANNEL_INDICATORS": "indicators_v4_events",
    "CHANNEL_OHLCV_READY": "bb:ohlcv_channel",

    # –ü–∞—É–∑—ã —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ (—Å–µ–∫)
    "DELAY_TICKERS": 0.5,
    "DELAY_INDICATORS": 0.5,
    "DELAY_OHLCV_CHANNEL": 2.0,
}

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_MAIN")


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
async def main():
    setup_logging()
    log.info("LAB: –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î/Redis
    pg = await init_pg_pool()
    redis = await init_redis_client()

    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–µ–π (—Ç–∏–∫–µ—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    await bootstrap_caches(
        pg=pg,
        redis=redis,
        tf_set=LAB_SETTINGS["TF_SET"],
    )

    # –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    stats = get_cache_stats()
    log.info(
        "LAB INIT: tickers=%d indicators=%d",
        stats.get("symbols", 0),
        stats.get("indicators", 0),
    )

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ live-–≤–æ—Ä–∫–µ—Ä–æ–≤
    await asyncio.gather(
        # Pub/Sub: —Ç–∏–∫–µ—Ä—ã
        run_safe_loop(
            lambda: run_watch_tickers_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_TICKERS"],
                initial_delay=LAB_SETTINGS["DELAY_TICKERS"],
            ),
            "LAB_TICKERS",
        ),
        # Pub/Sub: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        run_safe_loop(
            lambda: run_watch_indicators_events(
                pg=pg,
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_INDICATORS"],
                initial_delay=LAB_SETTINGS["DELAY_INDICATORS"],
                tf_set=LAB_SETTINGS["TF_SET"],
            ),
            "LAB_INDICATORS",
        ),
        # Pub/Sub: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à last_bar)
        run_safe_loop(
            lambda: run_watch_ohlcv_ready_channel(
                redis=redis,
                channel=LAB_SETTINGS["CHANNEL_OHLCV_READY"],
                initial_delay=LAB_SETTINGS["DELAY_OHLCV_CHANNEL"],
            ),
            "LAB_OHLCV_READY",
        ),
        # IND-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç lab_live:ind:* —Å TTL 45s)
        run_safe_loop(
            lambda: run_lab_ind_live(
                pg=pg,
                redis=redis,
                get_instances_by_tf=get_instances_by_tf,
                get_precision=get_precision,
                get_active_symbols=get_active_symbols,
                get_last_bar=get_last_bar,
                tf_set=LAB_SETTINGS["TF_SET"],
            ),
            "LAB_IND_LIVE",
        ),
        # MW-live –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç lab_live:mw:* —Å TTL 45s)
        run_safe_loop(
            lambda: run_lab_mw_live(
                pg=pg,
                redis=redis,
                get_active_symbols=get_active_symbols,
                get_precision=get_precision,
                get_last_bar=get_last_bar,
                tf_set=LAB_SETTINGS["TF_SET"],
            ),
            "LAB_MW_LIVE",
        ),
    )


# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())