# laboratory_v4_main.py ‚Äî entrypoint laboratory_v4: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤, –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π

import asyncio
import logging

import infra
from infra import (
    setup_logging,
    setup_pg,
    setup_redis_client,
)
from config import (
    load_enabled_tickers,
    load_enabled_strategies,
    load_pack_whitelist,
    load_mw_whitelist,
    config_event_listener,
    whitelist_stream_listener,
)

log = logging.getLogger("LAB_MAIN")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def run_safe_loop(coro, label: str):
    while True:
        try:
            log.info(f"[{label}] üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro()
        except asyncio.CancelledError:
            log.info(f"[{label}] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    log.info("üì¶ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ laboratory_v4")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    try:
        await setup_pg()
        await setup_redis_client()
        log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return

    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        await load_enabled_tickers()
        await load_enabled_strategies()
        await load_pack_whitelist()
        await load_mw_whitelist()
        log.info("üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–∏–∫–µ—Ä—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, whitelist")
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    log.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π")

    await asyncio.gather(
        run_safe_loop(config_event_listener, "CONFIG_EVENT_LISTENER"),
        run_safe_loop(whitelist_stream_listener, "WL_STREAM_LISTENER"),
    )


if __name__ == "__main__":
    asyncio.run(main())