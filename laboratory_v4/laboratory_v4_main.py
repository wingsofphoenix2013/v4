# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–∞–Ω—ã (–ø–æ 10), –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (–ø–æ 500), —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

import os
import asyncio
import logging
from datetime import datetime

import laboratory_v4_infra as infra
import laboratory_v4_loader as loader

log = logging.getLogger("LAB_MAIN")

LAB_LOOP_SLEEP_SEC = int(os.getenv("LAB_LOOP_SLEEP_SEC", "3600"))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª ¬´—Å–æ–Ω/–ø—Ä–æ—Å—ã–ø–∞–Ω–∏–µ¬ª


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–Ω–∞ (lab_id √ó strategy_id)
async def process_run(lab: dict, strategy_id: int):
    lab_id = int(lab["lab_id"])
    lock_key = f"lab:run:lock:{lab_id}:{strategy_id}"

    try:
        # –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª–æ–∫
        try:
            async with infra.redis_lock(lock_key, ttl_sec=infra.LOCK_TTL_SEC):
                # –õ–æ–∫ –ø–æ–ª—É—á–µ–Ω ‚Äî —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º run
                run_id = await infra.create_run(lab_id, strategy_id)
                await infra.mark_run_started(run_id)

                params = await loader.load_lab_parameters(lab_id)
                log.debug(
                    "–°—Ç–∞—Ä—Ç —Ä–∞–Ωa lab_id=%s strategy_id=%s run_id=%s components=%d",
                    lab_id, strategy_id, run_id, len(params)
                )

                cutoff = datetime.now()

                processed = approved = filtered = skipped = 0
                batch_uids: list[str] = []

                async def process_batch(uids: list[str]):
                    nonlocal processed, approved, filtered, skipped
                    if not uids:
                        return
                    processed += len(uids)
                    # TODO: —á—Ç–µ–Ω–∏–µ PIS, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π, –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—á–∫–æ–π

                async for uid in loader.iter_closed_positions_uids(strategy_id, cutoff, infra.POSITIONS_BATCH):
                    batch_uids.append(uid)
                    if len(batch_uids) >= infra.POSITIONS_BATCH:
                        await process_batch(batch_uids)
                        batch_uids.clear()

                    if processed and processed % 100 == 0:
                        await infra.update_progress_json(run_id, {
                            "cutoff_at": cutoff.isoformat(),
                            "processed": processed,
                            "approved": approved,
                            "filtered": filtered,
                            "skipped_no_data": skipped,
                        })

                if batch_uids:
                    await process_batch(batch_uids)
                    batch_uids.clear()

                await infra.update_progress_json(run_id, {
                    "cutoff_at": cutoff.isoformat(),
                    "processed": processed,
                    "approved": approved,
                    "filtered": filtered,
                    "skipped_no_data": skipped,
                })

                await infra.mark_run_finished(run_id)
                await infra.send_finish_signal(lab_id, strategy_id, run_id)
                log.info("RUN DONE lab=%s strategy=%s run_id=%s processed=%s", lab_id, strategy_id, run_id, processed)

        except RuntimeError as e:
            # –ï—Å–ª–∏ –ª–æ–∫ –∑–∞–Ω—è—Ç ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º (—ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏, –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–≥–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞/–∏–Ω—Å—Ç–∞–Ω—Å —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            if str(e).startswith("lock_busy:"):
                log.debug("–ü—Ä–æ–ø—É—Å–∫: –ª–æ–∫ –∑–∞–Ω—è—Ç –¥–ª—è lab=%s strategy=%s (%s)", lab_id, strategy_id, e)
                return
            raise

    except asyncio.CancelledError:
        log.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–Ωa lab=%s strategy=%s –ø–æ —Å–∏–≥–Ω–∞–ª—É", lab_id, strategy_id)
        raise
    except Exception as e:
        # run_id —Ç—É—Ç –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å (–µ—Å–ª–∏ —É–ø–∞–ª–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è), –ø–æ—ç—Ç–æ–º—É –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞ failed
        log.exception("–û—à–∏–±–∫–∞ —Ä–∞–Ωa lab=%s strategy=%s: %s", lab_id, strategy_id, e)


# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–µ–º–∞—Ñ–æ—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ N –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–Ωo–≤)
async def run_guarded(lab: dict, sid: int):
    await infra.concurrency_sem.acquire()
    try:
        await process_run(lab, sid)
    finally:
        infra.concurrency_sem.release()


# üî∏ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ—Ä–µ—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤/—Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
async def scheduler_loop():
    while True:
        try:
            plan = await loader.build_run_plan()
            tasks: list[asyncio.Task] = []

            for lab_id, sid in plan:
                lab_dict = {"lab_id": lab_id}
                tasks.append(asyncio.create_task(run_guarded(lab_dict, sid)))

            if tasks:
                await asyncio.gather(*tasks)

        except asyncio.CancelledError:
            log.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception:
            log.exception("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        await asyncio.sleep(LAB_LOOP_SLEEP_SEC)


# üî∏ main
async def main():
    infra.setup_logging()
    log.info("–ó–∞–ø—É—Å–∫ laboratory_v4 Background Worker")

    await infra.setup_pg()
    await infra.setup_redis_client()

    await scheduler_loop()


if __name__ == "__main__":
    asyncio.run(main())