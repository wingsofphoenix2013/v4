# laboratory_stream_cleaner.py ‚Äî —É–±–æ—Ä—â–∏–∫ —Å—Ç—Ä–∏–º–æ–≤ laboratory_v4

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from typing import List, Tuple

# üî∏ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import laboratory_infra as infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_STREAM_CLEANER")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–µ—Ä–∞
RETENTION_MINUTES = 60          # –æ–∫–Ω–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
START_DELAY_SEC = 90            # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
RUN_EVERY_SEC = 3600            # –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–æ–Ω–∞, 1 —á–∞—Å

# üî∏ –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–¢–û–õ–¨–ö–û —Å–≤–æ–∏)
STREAMS_TO_CLEAN: List[str] = [
    "laboratory:decision_response",  # –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    "laboratory_decision_filler",    # seed –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ SLE‚ÜíLPS
    "indicator_gateway_request",     # –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–º—É gateway
]


# üî∏ –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è Redis-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
async def _redis_time_ms() -> int:
    # –∫–æ–º–∞–Ω–¥–∞ TIME –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [seconds, microseconds]
    t = await infra.redis_client.time()
    # –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if isinstance(t, (list, tuple)) and len(t) >= 2:
        sec, usec = int(t[0]), int(t[1])
        return sec * 1000 + (usec // 1000)
    # fallback ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∞—Ç—å—Å—è)
    return 0


# üî∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å XTRIM MINID –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞, –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ —Ç—Ä–∏–º–∞
async def _trim_stream_minid(stream: str, threshold_id: str) -> int:
    # –ü—Ä–æ–±—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ redis-py; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º execute_command
    try:
        # approximate=True ‚Üí –±—ã—Å—Ç—Ä–µ–µ, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –±–∞—Ç—á–µ–π —á—É—Ç—å –¥–æ–ª—å—à–µ
        newlen = await infra.redis_client.xtrim(stream, minid=threshold_id, approximate=True)
    except Exception:
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        # XTRIM key MINID ~ threshold_id
        try:
            newlen = await infra.redis_client.execute_command("XTRIM", stream, "MINID", "~", threshold_id)
        except Exception:
            newlen = -1
    return int(newlen) if newlen is not None else -1


# üî∏ –û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤
async def _run_clean_once(retention_minutes: int):
    # —Å—á–∏—Ç–∞–µ–º –ø–æ—Ä–æ–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ Redis, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—Ä–µ–π—Ñ–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤
    now_ms = await _redis_time_ms()
    if now_ms <= 0:
        log.info("[CLEAN] ‚ö†Ô∏è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è Redis ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≥–æ–Ω–∞")
        return

    thr_ms = now_ms - retention_minutes * 60_000
    threshold_id = f"{thr_ms}-0"

    # —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∏–º–∞–º
    for stream in STREAMS_TO_CLEAN:
        try:
            newlen = await _trim_stream_minid(stream, threshold_id)
            if newlen >= 0:
                log.info("[CLEAN] ‚úÇÔ∏è stream=%s MINID<%s ‚Üí len=%d", stream, threshold_id, newlen)
            else:
                log.info("[CLEAN] ‚úÇÔ∏è stream=%s MINID<%s ‚Üí len=unknown", stream, threshold_id)
        except asyncio.CancelledError:
            raise
        except Exception:
            log.exception("[CLEAN] ‚ùå –æ—à–∏–±–∫–∞ —Ç—Ä–∏–º–∞ stream=%s", stream)


# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∏–º–æ–≤
async def run_laboratory_stream_cleaner():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é XTRIM MINID.
    –ü–æ—Ä–æ–≥ = —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è Redis –º–∏–Ω—É—Å RETENTION_MINUTES (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö).
    –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ START_DELAY_SEC –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –¥–∞–ª–µ–µ ‚Äî –∫–∞–∂–¥—ã–µ RUN_EVERY_SEC.
    """
    log.debug("üßπ LAB_STREAM_CLEANER —Å—Ç–∞—Ä—Ç—É–µ—Ç: retention=%dmin, start_delay=%ds, period=%ds",
              RETENTION_MINUTES, START_DELAY_SEC, RUN_EVERY_SEC)
    await asyncio.sleep(START_DELAY_SEC)

    while True:
        try:
            await _run_clean_once(RETENTION_MINUTES)
        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_STREAM_CLEANER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå LAB_STREAM_CLEANER –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–æ–Ω–∞")
        # –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        await asyncio.sleep(RUN_EVERY_SEC)