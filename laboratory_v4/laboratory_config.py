# laboratory_config.py ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ laboratory_v4: —Ç–∏–∫–µ—Ä—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, whitelist (–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ); —Å–ª—É—à–∞—Ç–µ–ª–∏ Pub/Sub –∏ Streams

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import json
import logging
import asyncio

import laboratory_infra as infra
from laboratory_infra import (
    set_enabled_tickers,
    set_enabled_strategies,
    start_pack_update,
    finish_pack_update,
    set_pack_whitelist_for_strategy,
    clear_pack_whitelist_for_strategy,
    start_mw_update,
    finish_mw_update,
    set_mw_whitelist_for_strategy,
    clear_mw_whitelist_for_strategy,
)

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_CONFIG")


# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ (enabled=true, tradepermission=enabled)
async def load_enabled_tickers():
    query = "SELECT * FROM tickers_bb WHERE status='enabled' AND tradepermission='enabled'"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        tickers = {r["symbol"]: dict(r) for r in rows}
        set_enabled_tickers(tickers)
        log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: %d", len(tickers))


# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (enabled=true)
async def load_enabled_strategies():
    query = "SELECT * FROM strategies_v4 WHERE enabled=true"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        strategies = {int(r["id"]): dict(r) for r in rows}
        set_enabled_strategies(strategies)
        log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: %d", len(strategies))


# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ whitelist (PACK) ‚Äî –≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è
async def load_pack_whitelist():
    query = "SELECT * FROM oracle_pack_whitelist"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (strategy_id, version)
    grouped: dict[tuple[int, str], list] = {}
    for r in rows:
        sid = int(r["strategy_id"])
        ver = str(r.get("version") or "v1").strip().lower()
        grouped.setdefault((sid, ver), []).append(dict(r))

    for (sid, ver), data in grouped.items():
        set_pack_whitelist_for_strategy(sid, data, {"loaded": True}, version=ver)

    log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ PACK whitelist (—Å—Ç—Ä–∞—Ç–µ–≥–∏–π√ó–≤–µ—Ä—Å–∏–π: %d)", len(grouped))


# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ whitelist (MW) ‚Äî –≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è
async def load_mw_whitelist():
    query = "SELECT * FROM oracle_mw_whitelist"
    async with infra.pg_pool.acquire() as conn:
        rows = await conn.fetch(query)

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (strategy_id, version)
    grouped: dict[tuple[int, str], list] = {}
    for r in rows:
        sid = int(r["strategy_id"])
        ver = str(r.get("version") or "v1").strip().lower()
        grouped.setdefault((sid, ver), []).append(dict(r))

    for (sid, ver), data in grouped.items():
        set_mw_whitelist_for_strategy(sid, data, {"loaded": True}, version=ver)

    log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ MW whitelist (—Å—Ç—Ä–∞—Ç–µ–≥–∏–π√ó–≤–µ—Ä—Å–∏–π: %d)", len(grouped))


# üî∏ –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ —Å–æ–±—ã—Ç–∏—é Pub/Sub)
async def handle_strategy_event(payload: dict):
    sid = payload.get("id")
    if not sid:
        return
    sid = int(sid)

    async with infra.pg_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM strategies_v4 WHERE id=$1", sid)

    if not row:
        if sid in infra.enabled_strategies:
            infra.enabled_strategies.pop(sid, None)
            log.info("üßπ strategy id=%s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞", sid)
        return

    enabled = bool(row["enabled"])
    if enabled:
        infra.enabled_strategies[sid] = dict(row)
        log.info("‚ûï strategy id=%s –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ", sid)
    else:
        infra.enabled_strategies.pop(sid, None)
        log.info("‚ûñ strategy id=%s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ (enabled=false)", sid)


# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π Pub/Sub (—Ç–∏–∫–µ—Ä—ã + —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
async def config_event_listener():
    pubsub = infra.redis_client.pubsub()
    await pubsub.subscribe("bb:tickers_events", "strategies_v4_events")
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: bb:tickers_events, strategies_v4_events")

    async for message in pubsub.listen():
        if message["type"] != "message":
            continue
        try:
            data = json.loads(message["data"])
            channel = message["channel"]
            if channel == "bb:tickers_events":
                log.info("üîî –°–æ–±—ã—Ç–∏–µ —Ç–∏–∫–µ—Ä–æ–≤: %s", data)
                await load_enabled_tickers()
            elif channel == "strategies_v4_events":
                log.info("üîî –°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: %s", data)
                await handle_strategy_event(data)
        except Exception as e:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: %s", e)


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ payload –∏–∑ –∑–∞–ø–∏—Å–∏ XREAD/XREADGROUP
def _extract_stream_payload(fields: dict) -> dict:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
      1) –ü–ª–æ—Å–∫–∏–µ –ø–æ–ª—è: strategy_id=..., report_id=..., ...
      2) –û–¥–∏–Ω –∫–ª—é—á 'data' —Å JSON-—Å—Ç—Ä–æ–∫–æ–π: {"strategy_id":..., ...}
    –¢–∞–∫–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∏–Ω–æ–Ω–∏–º—ã –º–µ—Ç—Ä–∏–∫: rows_whitelist/rows_blacklist ‚Üî wl/bl, rows_inserted ‚Üî rows_total.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é 'version' (v1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
    """
    # –±–∞–∑–æ–≤–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    payload: dict = {}
    for k, v in fields.items():
        if isinstance(v, str) and v.startswith("{"):
            try:
                payload[k] = json.loads(v)
            except Exception:
                payload[k] = v
        else:
            payload[k] = v

    # –µ—Å–ª–∏ –≤—Å—ë –ª–µ–∂–∏—Ç –ø–æ–¥ 'data' ‚Äî —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    if "data" in payload and isinstance(payload["data"], dict):
        payload = payload["data"]

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ (—á–∏—Å–ª–∞ –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
    def _as_int(x, default=None):
        try:
            return int(x)
        except Exception:
            return default

    # —Å–∏–Ω–æ–Ω–∏–º—ã –ø–æ–ª–µ–π
    if "wl" not in payload and "rows_whitelist" in payload:
        payload["wl"] = payload["rows_whitelist"]
    if "bl" not in payload and "rows_blacklist" in payload:
        payload["bl"] = payload["rows_blacklist"]
    if "rows_total" not in payload and "rows_inserted" in payload:
        payload["rows_total"] = payload["rows_inserted"]

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –∫ –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–∏–ø–∞–º
    if "strategy_id" in payload:
        payload["strategy_id"] = _as_int(payload["strategy_id"], None)
    if "report_id" in payload:
        payload["report_id"] = _as_int(payload["report_id"], None)

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏
    ver = str(payload.get("version") or "v1").strip().lower()
    payload["version"] = ver

    return payload


# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å Streams –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π whitelist (PACK + MW) ‚Äî –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π
async def whitelist_stream_listener():
    streams = {
        "oracle:pack_lists:reports_ready": "pack",
        "oracle:mw_whitelist:reports_ready": "mw",
    }
    last_ids = {k: "$" for k in streams.keys()}
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Streams: %s", ", ".join(streams.keys()))

    while True:
        try:
            response = await infra.redis_client.xread(streams=last_ids, block=5000, count=10)
            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, fields in messages:
                    last_ids[stream_name] = msg_id
                    try:
                        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º payload
                        payload = _extract_stream_payload(fields)

                        sid = payload.get("strategy_id")
                        ver = payload.get("version") or "v1"
                        if not sid:
                            log.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è stream=%s msg=%s: –Ω–µ—Ç strategy_id –≤ payload=%s",
                                     stream_name, msg_id, payload)
                            continue

                        if streams[stream_name] == "pack":
                            await start_pack_update(sid, ver)
                            try:
                                async with infra.pg_pool.acquire() as conn:
                                    rows = await conn.fetch(
                                        "SELECT * FROM oracle_pack_whitelist WHERE strategy_id=$1 AND version=$2",
                                        sid, ver
                                    )
                                if rows:
                                    meta = {
                                        "version": ver,
                                        "report_id": payload.get("report_id"),
                                        "time_frame": payload.get("time_frame"),
                                        "window_end": payload.get("window_end"),
                                        "generated_at": payload.get("generated_at"),
                                        "rows_total": payload.get("rows_total"),
                                        "wl": payload.get("wl"),
                                        "bl": payload.get("bl"),
                                    }
                                    set_pack_whitelist_for_strategy(sid, [dict(r) for r in rows], meta, version=ver)
                                else:
                                    clear_pack_whitelist_for_strategy(sid, version=ver)
                            finally:
                                finish_pack_update(sid, ver)

                        elif streams[stream_name] == "mw":
                            await start_mw_update(sid, ver)
                            try:
                                async with infra.pg_pool.acquire() as conn:
                                    rows = await conn.fetch(
                                        "SELECT * FROM oracle_mw_whitelist WHERE strategy_id=$1 AND version=$2",
                                        sid, ver
                                    )
                                if rows:
                                    meta = {
                                        "version": ver,
                                        "report_id": payload.get("report_id"),
                                        "time_frame": payload.get("time_frame"),
                                        "window_end": payload.get("window_end"),
                                        "generated_at": payload.get("generated_at"),
                                        "rows_total": payload.get("rows_total"),
                                        "wl": payload.get("wl") or payload.get("rows_whitelist"),
                                    }
                                    set_mw_whitelist_for_strategy(sid, [dict(r) for r in rows], meta, version=ver)
                                else:
                                    clear_mw_whitelist_for_strategy(sid, version=ver)
                            finally:
                                finish_mw_update(sid, ver)

                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ WL –ø–æ —Å–æ–±—ã—Ç–∏—é (stream=%s, msg=%s)", stream_name, msg_id)

        except asyncio.CancelledError:
            log.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è Streams")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ whitelist_stream_listener")
            await asyncio.sleep(5)