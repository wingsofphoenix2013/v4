# bybit_rounding.py ‚Äî —É—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω—ã/–æ–±—ä—ë–º–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–∫–µ—Ä–∞ (ticksize / precision / min_qty)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP, ROUND_UP, InvalidOperation
from typing import Any, Dict, Optional, Tuple

from trader_config import config

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("BYBIT_ROUNDING")


# üî∏ –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

def round_price(symbol: str, price: Decimal | str | float | int, *, mode: str = "down") -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ç–∏–∫–µ—Ä–∞:
    1) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ticksize (–∫—Ä–∞—Ç–Ω–æ —à–∞–≥—É);
    2) –∏–Ω–∞—á–µ precision_price (–∫–æ–ª-–≤–æ –∑–Ω–∞–∫–æ–≤).
    mode: 'down' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) | 'up' | 'nearest'
    """
    px = _to_decimal(price)
    meta = _get_meta(symbol)
    if meta is None:
        log.info("BYBIT_ROUNDING: meta not found for %s ‚Äî return as is", symbol)
        return px

    ticksize = _to_decimal(meta.get("ticksize"))
    prec_p = meta.get("precision_price")

    if ticksize and ticksize > 0:
        return _round_to_step(px, ticksize, mode=mode)
    if prec_p is not None:
        return _round_to_precision(px, int(prec_p), mode=mode)

    return px


def round_qty(
    symbol: str,
    qty: Decimal | str | float | int,
    *,
    mode: str = "down",
    enforce_min: bool = True
) -> Optional[Decimal]:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ precision_qty; –ø—Ä–∏ enforce_min=True –¥–æ–≤–æ–¥–∏—Ç –¥–æ min_qty (–µ—Å–ª–∏ >0).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è qty <= 0 (–∏–ª–∏ < min_qty –ø—Ä–∏ enforce_min=False).
    mode: 'down' | 'up' | 'nearest'
    """
    q = _to_decimal(qty)
    if q is None:
        return None

    meta = _get_meta(symbol)
    if meta is None:
        log.info("BYBIT_ROUNDING: meta not found for %s ‚Äî cannot round qty", symbol)
        return None

    prec_q = meta.get("precision_qty")
    min_qty = _to_decimal(meta.get("min_qty")) or Decimal("0")

    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤
    if prec_q is not None:
        q = _round_to_precision(q, int(prec_q), mode=mode)

    if q <= 0:
        return None

    # –¥–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ –º–∏–Ω–∏–º—É–º–∞ –ø—Ä–∏ enforce_min
    if enforce_min and min_qty > 0 and q < min_qty:
        q = min_qty

    # –µ—Å–ª–∏ min_qty –Ω–µ enforced –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ ‚Äî —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º None
    if not enforce_min and min_qty > 0 and q < min_qty:
        return None

    return q


def min_qty_ok(symbol: str, qty: Decimal | str | float | int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ qty ‚â• min_qty –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–µ—Å–ª–∏ min_qty –∑–∞–¥–∞–Ω)."""
    q = _to_decimal(qty)
    meta = _get_meta(symbol)
    if q is None or meta is None:
        return False
    min_q = _to_decimal(meta.get("min_qty")) or Decimal("0")
    return q >= min_q if min_q > 0 else q > 0


def normalize_price_qty(
    symbol: str,
    price: Decimal | str | float | int,
    qty: Decimal | str | float | int,
    *,
    price_mode: str = "down",
    qty_mode: str = "down",
    enforce_min_qty: bool = True
) -> Tuple[Decimal, Optional[Decimal]]:
    """
    –ö–æ–º–±–æ-—É—Ç–∏–ª–∏—Ç–∞: –æ–∫—Ä—É–≥–ª—è–µ—Ç (price, qty) –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–∫–µ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (price_dec, qty_dec_or_None).
    """
    return round_price(symbol, price, mode=price_mode), round_qty(symbol, qty, mode=qty_mode, enforce_min=enforce_min_qty)


# üî∏ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã

def _get_meta(symbol: str) -> Optional[Dict[str, Any]]:
    """
    –ñ–¥—ë–º –≤ config.tickers[symbol] –∫–∞–∫ –º–∏–Ω–∏–º—É–º:
      - ticksize (numeric | str | Decimal) ‚Äî —à–∞–≥ —Ü–µ–Ω—ã;
      - precision_price (int) ‚Äî –∑–Ω–∞–∫–∏ —Ü–µ–Ω—ã;
      - precision_qty (int) ‚Äî –∑–Ω–∞–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞;
      - min_qty (numeric) ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    """
    row = config.tickers.get(symbol)
    return dict(row) if row else None


def _to_decimal(x: Any) -> Optional[Decimal]:
    try:
        if x is None:
            return None
        if isinstance(x, Decimal):
            return x
        return Decimal(str(x))
    except (InvalidOperation, ValueError):
        return None


def _round_to_step(value: Decimal, step: Decimal, *, mode: str = "down") -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç value –∫ –∫—Ä–∞—Ç–Ω–æ–º—É step:
      - 'down': –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É,
      - 'up': –≤ –±–æ–ª—å—à—É—é,
      - 'nearest': –∫ –±–ª–∏–∂–∞–π—à–µ–º—É (0.5 –≤–≤–µ—Ä—Ö).
    """
    if step <= 0:
        return value

    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤
    steps = value / step
    if mode == "up":
        steps_q = steps.to_integral_value(rounding=ROUND_UP)
    elif mode == "nearest":
        steps_q = steps.to_integral_value(rounding=ROUND_HALF_UP)
    else:  # down
        steps_q = steps.to_integral_value(rounding=ROUND_DOWN)

    return steps_q * step


def _round_to_precision(value: Decimal, digits: int, *, mode: str = "down") -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç value –¥–æ digits –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π:
      - 'down' ‚Üí ROUND_DOWN, 'up' ‚Üí ROUND_UP, 'nearest' ‚Üí ROUND_HALF_UP.
    """
    if digits < 0:
        return value
    quant = Decimal(10) ** -digits
    rounding = ROUND_DOWN if mode == "down" else ROUND_UP if mode == "up" else ROUND_HALF_UP
    return value.quantize(quant, rounding=rounding)