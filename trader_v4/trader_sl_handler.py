# trader_sl_handler.py ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è SL-protect: –ø–æ sl_replaced (–±–µ–∑ TP) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ensure_sl_at_entry –≤ —à–ª—é–∑

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_SL")

# üî∏ –ü–æ—Ç–æ–∫–∏/–≥—Ä—É–ø–ø—ã
POSITIONS_STATUS_STREAM = "positions_bybit_status"   # –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
ORDER_REQUEST_STREAM    = "trader_order_requests"    # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è bybit_processor
CG_NAME   = "trader_sl_cg"
CONSUMER  = "trader_sl_1"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è/–ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
READ_BLOCK_MS = 1000
READ_COUNT    = 10
CONCURRENCY   = 8

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–π—Ç–∞ (debounce)
SL_DEBOUNCE_MS = 300  # –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã ¬´–¥–æ–≥–Ω–∞—Ç—å—Å—è¬ª –≤–æ–∑–º–æ–∂–Ω–æ–º—É tp_hit

# üî∏ In-memory —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
class _SLState:
    def __init__(self):
        self._by_uid: Dict[str, Dict[str, Any]] = {}
        self._lock = asyncio.Lock()

    async def upsert_opened(self, uid: str, *, symbol: str, direction: str, ts: Optional[datetime]):
        async with self._lock:
            s = self._by_uid.get(uid) or {}
            s.update({
                "symbol": symbol,
                "direction": direction,
                "had_tp": s.get("had_tp", False),
                "opened_at": ts or datetime.utcnow(),
                "updated_at": datetime.utcnow(),
            })
            self._by_uid[uid] = s

    async def mark_tp(self, uid: str):
        async with self._lock:
            s = self._by_uid.get(uid)
            if s:
                s["had_tp"] = True
                s["updated_at"] = datetime.utcnow()

    async def get_snapshot(self, uid: str) -> Optional[Dict[str, Any]]:
        async with self._lock:
            s = self._by_uid.get(uid)
            return dict(s) if s else None

    async def drop(self, uid: str):
        async with self._lock:
            self._by_uid.pop(uid, None)

    async def gc(self, ttl_hours: int = 24):
        # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–Ω–µ–ø—à–æ—Ç—ã
        cutoff = datetime.utcnow() - timedelta(hours=ttl_hours)
        async with self._lock:
            stale = [k for k, v in self._by_uid.items() if v.get("updated_at") and v["updated_at"] < cutoff]
            for k in stale:
                self._by_uid.pop(k, None)

_sl_state = _SLState()


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
async def run_trader_sl_handler_loop():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞—ë–º Consumer Group (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(POSITIONS_STATUS_STREAM, CG_NAME, id="$", mkstream=True)
        log.debug("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", POSITIONS_STATUS_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_SL v1 –∑–∞–ø—É—â–µ–Ω (–∏—Å—Ç–æ—á–Ω–∏–∫=%s, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=%d)", POSITIONS_STATUS_STREAM, CONCURRENCY)

    sem = asyncio.Semaphore(CONCURRENCY)

    async def _spawn_task(record_id: str, data: Dict[str, Any]):
        # ack —Å—Ä–∞–∑—É –¥–ª—è opened/tp_hit/closed; –¥–ª—è sl_replaced ‚Äî –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        async with sem:
            try:
                ack_ok = await _handle_status_event(record_id, data)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
                ack_ok = False
            if ack_ok:
                try:
                    await redis.xack(POSITIONS_STATUS_STREAM, CG_NAME, record_id)
                except Exception:
                    log.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å ACK –∑–∞–ø–∏—Å—å (id=%s)", record_id)

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={POSITIONS_STATUS_STREAM: ">"},
                count=READ_COUNT,
                block=READ_BLOCK_MS
            )
            if not entries:
                # —Ñ–æ–Ω–æ–≤—ã–π GC —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ä–∞–∑ –≤ ~READ_BLOCK_MS-–ø—É—Å—Ç–æ–π —Ç–∏–∫)
                await _sl_state.gc(ttl_hours=24)
                continue

            tasks = []
            for _, records in entries:
                for record_id, data in records:
                    tasks.append(asyncio.create_task(_spawn_task(record_id, data)))

            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_SL")
            await asyncio.sleep(0.5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ positions_bybit_status
async def _handle_status_event(record_id: str, data: Dict[str, Any]) -> bool:
    event = (_as_str(data.get("event")) or "").lower()
    if not event:
        return True  # –º—É—Å–æ—Ä ‚Üí ack

    # –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    position_uid = _as_str(data.get("position_uid"))
    strategy_id  = _as_int(data.get("strategy_id"))
    symbol       = _as_str(data.get("symbol"))
    direction    = (_as_str(data.get("direction")) or "").lower()
    ts_ms_str    = _as_str(data.get("ts_ms"))
    ts_iso       = _as_str(data.get("ts"))
    ts_dt        = _parse_ts(ts_ms_str, ts_iso)

    if not position_uid or not strategy_id or direction not in ("long", "short"):
        log.info("‚è≠Ô∏è SL_SYNC: skip (invalid base fields) id=%s ev=%s uid=%s sid=%s dir=%s",
                 record_id, event, position_uid or "‚Äî", strategy_id, direction or "‚Äî")
        return True

    # opened v2 ‚Üí —Å–æ–∑–¥–∞—ë–º —Å–Ω–µ–ø—à–æ—Ç
    if event == "opened":
        await _sl_state.upsert_opened(position_uid, symbol=symbol, direction=direction, ts=ts_dt)
        log.info("‚ÑπÔ∏è SL_SYNC: opened snapshot stored | uid=%s | sym=%s | dir=%s", position_uid, symbol or "‚Äî", direction)
        return True

    # tp_hit ‚Üí –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ open –±—ã–ª TP (–∑–Ω–∞—á–∏—Ç sl_replaced –±—É–¥–µ—Ç ¬´–ø–æ—Å–ª–µ-TP¬ª, –±–∏—Ä–∂—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
    if event == "tp_hit":
        await _sl_state.mark_tp(position_uid)
        log.info("‚ÑπÔ∏è SL_SYNC: tp marker set | uid=%s", position_uid)
        return True

    # closed.* ‚Üí –æ—á–∏—â–∞–µ–º —Å–Ω–µ–ø—à–æ—Ç (–ø–æ–∑–∏—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
    if event.startswith("closed"):
        await _sl_state.drop(position_uid)
        log.info("‚ÑπÔ∏è SL_SYNC: closed snapshot dropped | uid=%s | ev=%s", position_uid, event)
        return True

    # –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ sl_replaced
    if event != "sl_replaced":
        log.info("‚è≠Ô∏è SL_SYNC: skip (event=%s)", event)
        return True

    # debounce: –ø–æ–¥–æ–∂–¥—ë–º —á—É—Ç—å-—á—É—Ç—å, –≤–¥—Ä—É–≥ –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–ª–µ—Ç–∏—Ç tp_hit
    if SL_DEBOUNCE_MS > 0:
        await asyncio.sleep(SL_DEBOUNCE_MS / 1000.0)

    snap = await _sl_state.get_snapshot(position_uid)
    if not snap:
        log.info("‚è≠Ô∏è SL_SYNC: skip (no snapshot) | uid=%s", position_uid)
        return True

    # –µ—Å–ª–∏ –±—ã–ª TP –ø–æ—Å–ª–µ open ‚Äî —ç—Ç–æ SL-–ø–æ—Å–ª–µ-TP, –±–∏—Ä–∂—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if snap.get("had_tp"):
        log.info("‚è≠Ô∏è SL_SYNC: skip (tp_policy) | uid=%s", position_uid)
        return True

    # —ç—Ç–æ SL-protect ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ensure_sl_at_entry
    order_fields = {
        "cmd": "ensure_sl_at_entry",
        "position_uid": position_uid,
        "strategy_id": str(strategy_id),
        "symbol": snap.get("symbol") or symbol or "",
        "direction": direction,
        "order_link_suffix": "sl_entry",
        "ts": ts_iso or "",
        "ts_ms": ts_ms_str or "",
    }

    try:
        await infra.redis_client.xadd(ORDER_REQUEST_STREAM, order_fields)
    except Exception:
        log.exception("‚ùå SL_SYNC: –ø—É–±–ª–∏–∫–∞—Ü–∏—è ensure_sl_at_entry –Ω–µ —É–¥–∞–ª–∞—Å—å | uid=%s", position_uid)
        return False  # –Ω–µ ACK ‚Üí –ø–æ–≤—Ç–æ—Ä

    log.info(
        "‚úÖ SL_SYNC: ensure_sl_at_entry ‚Üí sent | uid=%s | sid=%s | sym=%s | dir=%s",
        position_uid, strategy_id, order_fields["symbol"] or "‚Äî", direction
    )
    return True


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _parse_ts(ts_ms_str: Optional[str], ts_iso: Optional[str]) -> Optional[datetime]:
    # ts_ms –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ; ts_iso –¥–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ 'Z'
    try:
        if ts_ms_str:
            ms = int(ts_ms_str)
            return datetime.utcfromtimestamp(ms / 1000.0)
    except Exception:
        pass
    try:
        if ts_iso:
            return datetime.fromisoformat(ts_iso.replace("Z", ""))
    except Exception:
        pass
    return None