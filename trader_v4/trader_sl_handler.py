# trader_sl_handler.py ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è SL-protect: –ø–æ sl_replaced (–±–µ–∑ TP) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ensure_sl_at_entry + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ trader_signals (—á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π POS_RUNTIME –≤ config)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from trader_infra import infra
from trader_config import config

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_SL")

# üî∏ –ü–æ—Ç–æ–∫–∏/–≥—Ä—É–ø–ø—ã
POSITIONS_STATUS_STREAM = "positions_bybit_status"   # –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
ORDER_REQUEST_STREAM    = "trader_order_requests"    # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è bybit_processor
CG_NAME   = "trader_sl_cg"
CONSUMER  = "trader_sl_1"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è/–ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
READ_BLOCK_MS = 1000
READ_COUNT    = 10
CONCURRENCY   = 8

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–π—Ç–∞ (debounce)
SL_DEBOUNCE_MS = 300  # –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã ¬´–¥–æ–≥–Ω–∞—Ç—å—Å—è¬ª –≤–æ–∑–º–æ–∂–Ω–æ–º—É tp_hit


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
async def run_trader_sl_handler_loop():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞—ë–º Consumer Group (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(POSITIONS_STATUS_STREAM, CG_NAME, id="$", mkstream=True)
        log.debug("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", POSITIONS_STATUS_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_SL v1 –∑–∞–ø—É—â–µ–Ω (–∏—Å—Ç–æ—á–Ω–∏–∫=%s, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=%d)", POSITIONS_STATUS_STREAM, CONCURRENCY)

    sem = asyncio.Semaphore(CONCURRENCY)

    async def _spawn_task(record_id: str, data: Dict[str, Any]):
        # ack —Å—Ä–∞–∑—É –¥–ª—è opened/tp_hit/closed; –¥–ª—è sl_replaced ‚Äî –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        async with sem:
            try:
                ack_ok = await _handle_status_event(record_id, data)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
                ack_ok = False
            if ack_ok:
                try:
                    await redis.xack(POSITIONS_STATUS_STREAM, CG_NAME, record_id)
                except Exception:
                    log.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å ACK –∑–∞–ø–∏—Å—å (id=%s)", record_id)

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={POSITIONS_STATUS_STREAM: ">"},
                count=READ_COUNT,
                block=READ_BLOCK_MS
            )
            if not entries:
                continue

            tasks = []
            for _, records in entries:
                for record_id, data in records:
                    tasks.append(asyncio.create_task(_spawn_task(record_id, data)))

            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_SL")
            await asyncio.sleep(0.5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ positions_bybit_status
async def _handle_status_event(record_id: str, data: Dict[str, Any]) -> bool:
    event = (_as_str(data.get("event")) or "").lower()

    # –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    position_uid = _as_str(data.get("position_uid"))
    strategy_id  = _as_int(data.get("strategy_id"))
    symbol_ev    = _as_str(data.get("symbol"))
    direction    = (_as_str(data.get("direction")) or "").lower()
    ts_ms_str    = _as_str(data.get("ts_ms"))
    ts_iso       = _as_str(data.get("ts"))
    ts_dt        = _parse_ts(ts_ms_str, ts_iso)

    # opened v2 ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π POS_RUNTIME
    if event == "opened":
        if position_uid and strategy_id and direction in ("long", "short"):
            await config.note_opened(position_uid, strategy_id, symbol_ev or "", direction, ts_dt)
            log.info("‚ÑπÔ∏è SL_SYNC: opened runtime updated | uid=%s | sym=%s | dir=%s", position_uid or "‚Äî", symbol_ev or "‚Äî", direction or "‚Äî")
        else:
            log.info("‚è≠Ô∏è SL_SYNC: opened skip (invalid base fields) | uid=%s | sid=%s | dir=%s",
                     position_uid or "‚Äî", strategy_id, direction or "‚Äî")
        return True

    # tp_hit ‚Üí –æ—Ç–º–µ—á–∞–µ–º —Ñ–∞–∫—Ç TP –ø–æ—Å–ª–µ open (–¥–ª—è –≥–µ–π—Ç–∞)
    if event == "tp_hit":
        if position_uid:
            await config.note_tp_hit(position_uid, ts_dt)
            log.info("‚ÑπÔ∏è SL_SYNC: tp marker set | uid=%s", position_uid or "‚Äî")
        return True

    # closed.* ‚Üí —É–¥–∞–ª—è–µ–º –∏–∑ POS_RUNTIME
    if event.startswith("closed"):
        if position_uid:
            await config.note_closed(position_uid, ts_dt)
            log.info("‚ÑπÔ∏è SL_SYNC: closed runtime cleared | uid=%s", position_uid or "‚Äî")
        return True

    # –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ sl_replaced
    if event != "sl_replaced":
        log.info("‚è≠Ô∏è SL_SYNC: skip (event=%s)", event or "‚Äî")
        return True

    # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ sl_replaced (—Ç–æ–ª—å–∫–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ SL-–≤–æ—Ä–∫–µ—Ä –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤ trader_signals)
    await _update_trader_signal_status(
        stream_id=record_id, position_uid=position_uid, event="sl_replaced", ts_iso=ts_iso,
        status="accepted_by_sl_handler", note="accepted"
    )

    # debounce: –ø–æ–¥–æ–∂–¥—ë–º —á—É—Ç—å-—á—É—Ç—å, –≤–¥—Ä—É–≥ –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–ª–µ—Ç–∏—Ç tp_hit
    if SL_DEBOUNCE_MS > 0:
        await asyncio.sleep(SL_DEBOUNCE_MS / 1000.0)

    # —Ä–µ—à–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: –±—ã–ª –ª–∏ TP –ø–æ—Å–ª–µ open
    had_tp = await config.had_tp_since_open(position_uid) if position_uid else False
    if had_tp:
        await _update_trader_signal_status(
            stream_id=record_id, position_uid=position_uid, event="sl_replaced", ts_iso=ts_iso,
            status="skipped_tp_policy", note="had_tp=true"
        )
        log.info("‚è≠Ô∏è SL_SYNC: skip (tp_policy) | uid=%s", position_uid or "‚Äî")
        return True

    # —ç—Ç–æ SL-protect ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ensure_sl_at_entry (–±–µ–∑ —Ü–µ–Ω/–æ–±—ä—ë–º–æ–≤; —Ä–µ—à–∏—Ç —à–ª—é–∑)
    # –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: POS_RUNTIME ‚Üí —Å–æ–±—ã—Ç–∏–µ ‚Üí –ø—É—Å—Ç–æ
    snap = await config.get_position(position_uid) if position_uid else None
    symbol = (snap.symbol if snap else None) or symbol_ev or ""

    order_fields = {
        "cmd": "ensure_sl_at_entry",
        "position_uid": position_uid or "",
        "strategy_id": str(strategy_id) if strategy_id is not None else "",
        "symbol": symbol,
        "direction": direction or "",
        "order_link_suffix": "sl_entry",
        "ts": ts_iso or "",
        "ts_ms": ts_ms_str or "",
    }

    try:
        await infra.redis_client.xadd(ORDER_REQUEST_STREAM, order_fields)
    except Exception as e:
        await _update_trader_signal_status(
            stream_id=record_id, position_uid=position_uid, event="sl_replaced", ts_iso=ts_iso,
            status="failed_publish_order_request", note=f"redis xadd error: {e.__class__.__name__}"
        )
        log.exception("‚ùå SL_SYNC: –ø—É–±–ª–∏–∫–∞—Ü–∏—è ensure_sl_at_entry –Ω–µ —É–¥–∞–ª–∞—Å—å | uid=%s", position_uid or "‚Äî")
        return False  # –Ω–µ ACK ‚Üí –ø–æ–≤—Ç–æ—Ä

    # —É—Å–ø–µ—Ö
    await _update_trader_signal_status(
        stream_id=record_id, position_uid=position_uid, event="sl_replaced", ts_iso=ts_iso,
        status="sl_ensure_sl_at_entry_published", note=f"debounce_ms={SL_DEBOUNCE_MS}"
    )
    log.info(
        "‚úÖ SL_SYNC: ensure_sl_at_entry ‚Üí sent | uid=%s | sid=%s | sym=%s | dir=%s",
        position_uid or "‚Äî", (strategy_id if strategy_id is not None else "‚Äî"),
        (symbol or "‚Äî"), (direction or "‚Äî")
    )
    return True


# üî∏ –ê–ø–¥–µ–π—Ç—ã public.trader_signals (stream_id ‚Üí fallback –ø–æ uid/event/ts)
async def _update_trader_signal_status(
    *,
    stream_id: Optional[str],
    position_uid: Optional[str],
    event: Optional[str],
    ts_iso: Optional[str],
    status: str,
    note: Optional[str] = None
) -> None:
    try:
        # –ø–æ–ø—ã—Ç–∫–∞ 1: –ø–æ stream_id
        if stream_id:
            res = await infra.pg_pool.execute(
                """
                UPDATE public.trader_signals
                   SET processing_status = $1,
                       processing_note   = $2,
                       processed_at      = now()
                 WHERE stream_id = $3
                """,
                status, (note or ""), stream_id
            )
            if res.startswith("UPDATE") and res.split()[-1] != "0":
                return  # –æ–±–Ω–æ–≤–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ

        # –ø–æ–ø—ã—Ç–∫–∞ 2: –ø–æ (uid, event, emitted_ts ~ ts_iso ¬± 2s)
        if position_uid and event and ts_iso:
            dt = _parse_ts(None, ts_iso)
            if dt is not None:
                t_from = dt - timedelta(seconds=2)
                t_to   = dt + timedelta(seconds=2)
                await infra.pg_pool.execute(
                    """
                    WITH cand AS (
                        SELECT id
                          FROM public.trader_signals
                         WHERE position_uid = $1
                           AND event = $2
                           AND emitted_ts BETWEEN $3 AND $4
                         ORDER BY id DESC
                         LIMIT 1
                    )
                    UPDATE public.trader_signals s
                       SET processing_status = $5,
                           processing_note   = $6,
                           processed_at      = now()
                      FROM cand
                     WHERE s.id = cand.id
                    """,
                    position_uid, event, t_from, t_to, status, (note or "")
                )
    except Exception:
        log.exception("‚ö†Ô∏è trader_signals update failed (status=%s, uid=%s, ev=%s)", status, position_uid or "‚Äî", event or "‚Äî")


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _parse_ts(ts_ms_str: Optional[str], ts_iso: Optional[str]) -> Optional[datetime]:
    # ts_ms –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ; ts_iso –¥–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ 'Z'
    try:
        if ts_ms_str:
            ms = int(ts_ms_str)
            return datetime.utcfromtimestamp(ms / 1000.0)
    except Exception:
        pass
    try:
        if ts_iso:
            return datetime.fromisoformat(ts_iso.replace("Z", ""))
    except Exception:
        pass
    return None