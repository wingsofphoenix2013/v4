# trader_sl_handler.py ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SL-protect:
# —Å–ª—É—à–∞–µ—Ç –°–ò–°–¢–ï–ú–ù–´–ï —Å–æ–±—ã—Ç–∏—è –∏–∑ positions_bybit_status –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏—Ä–∂–µ–≤–æ–≥–æ SL –Ω–∞ entry.
# FIX #2: –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å SL –Ω–∞ –±–∏—Ä–∂–µ –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ tp_hit ‚Äî –¥–≤–æ–π–Ω—ã–µ –≥–µ–π—Ç—ã:
#   (1) –Ω–µ–¥–∞–≤–Ω–∏–π system tp_hit (TTL), (2) –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ priced TP –Ω–∞ –±–∏—Ä–∂–µ.

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import time
from datetime import datetime
from decimal import Decimal, InvalidOperation, ROUND_HALF_UP
from typing import Any, Optional, Dict, Tuple

import httpx

from trader_infra import infra
from trader_config import config

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("TRADER_SL_HANDLER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–æ–≤ / CG
STATUS_STREAM = "positions_bybit_status"          # –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã
CG_NAME = "trader_sl_handler_group"
CONSUMER_NAME = "trader_sl_handler_1"

MAINTAINER_STREAM = "trader_maintainer_events"    # –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É SL

# üî∏ Bybit public REST –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è lastPrice
BYBIT_PUBLIC_BASE = "https://api.bybit.com"
BYBIT_CATEGORY = "linear"  # USDT-perp

# üî∏ –ö—ç—à –Ω–µ–¥–∞–≤–Ω–∏—Ö system tp_hit (–≥–µ–π—Ç ‚Ññ1)
_RECENT_TP_HIT: Dict[str, int] = {}   # uid -> ts (epoch sec)
_TP_HIT_TTL_SEC = 10

def _now_ts() -> int:
    return int(time.time())

def _gc_recent_tp() -> None:
    # –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ tp_hit
    now = _now_ts()
    for k, ts in list(_RECENT_TP_HIT.items()):
        if now - ts > _TP_HIT_TTL_SEC:
            _RECENT_TP_HIT.pop(k, None)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä
async def run_trader_sl_handler_loop():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞—ë–º CG
    try:
        await redis.xgroup_create(STATUS_STREAM, CG_NAME, id="$", mkstream=True)
        log.info("üì° CG —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", STATUS_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è CG —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CG –¥–ª—è %s", STATUS_STREAM)
            return

    log.info("üö¶ TRADER_SL_HANDLER –∑–∞–ø—É—â–µ–Ω (—Å–ª—É—à–∞–µ–º tp_hit –∏ sl_replaced –∏–∑ %s)", STATUS_STREAM)

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è
    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER_NAME,
                streams={STATUS_STREAM: ">"},
                count=50,
                block=1000
            )
            if not entries:
                continue

            for _, records in entries:
                for record_id, raw in records:
                    try:
                        await _handle_status_event(raw)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ sl_handler")
                    finally:
                        # ack –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                        try:
                            await redis.xack(STATUS_STREAM, CG_NAME, record_id)
                        except Exception:
                            log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å ACK –∑–∞–ø–∏—Å—å sl_handler")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ TRADER_SL_HANDLER")
            await asyncio.sleep(1.0)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ positions_bybit_status
async def _handle_status_event(raw: Dict[str, Any]) -> None:
    event = _g(raw, "event")

    # –æ—Ç–º–µ—á–∞–µ–º system tp_hit –≤ –∫—ç—à–µ (–≥–µ–π—Ç ‚Ññ1) –∏ –≤—ã—Ö–æ–¥–∏–º
    if event == "tp_hit":
        uid = _g(raw, "position_uid")
        if uid:
            _gc_recent_tp()
            _RECENT_TP_HIT[uid] = _now_ts()
            log.debug("SL_HANDLER: noted system tp_hit (uid=%s)", uid)
        return

    # –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ sl_replaced (tp_hit —É–∂–µ —É—á—Ç—ë–Ω –≤—ã—à–µ)
    if event != "sl_replaced":
        return

    uid = _g(raw, "position_uid")
    sid = _to_int(_g(raw, "strategy_id"))
    direction = (_g(raw, "direction") or "").lower()

    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    if not uid or sid is None or direction not in ("long", "short"):
        log.debug("‚ö†Ô∏è SL_HANDLER: –ø—Ä–æ–ø—É—Å–∫ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª—è) uid=%s sid=%s dir=%s", uid, sid, direction)
        return

    # —Ñ–∏–ª—å—Ç—Ä winners
    if sid not in config.trader_winners:
        log.debug("‚è≠Ô∏è SL_HANDLER: sid=%s –Ω–µ –≤ trader_winner, –ø—Ä–æ–ø—É—Å–∫ uid=%s", sid, uid)
        return

    # –≥–µ–π—Ç ‚Ññ1: –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª system tp_hit ‚Üí –Ω–µ –¥–≤–∏–≥–∞–µ–º SL –Ω–∞ –±–∏—Ä–∂–µ
    _gc_recent_tp()
    if _RECENT_TP_HIT.get(uid):
        log.debug("SL_HANDLER: skip sl_move_to_entry ‚Äî recent system tp_hit (uid=%s)", uid)
        return

    # –ø–æ–∑–∏—Ü–∏—è —É —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ¬´open¬ª
    tp_row = await infra.pg_pool.fetchrow(
        "SELECT symbol, status FROM public.trader_positions WHERE position_uid = $1",
        uid
    )
    if not tp_row:
        log.debug("‚ÑπÔ∏è SL_HANDLER: –ø–æ–∑–∏—Ü–∏—è uid=%s –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —É —Ç—Ä–µ–π–¥–µ—Ä–∞", uid)
        return
    if (tp_row["status"] or "").lower() != "open":
        log.debug("‚ÑπÔ∏è SL_HANDLER: –ø–æ–∑–∏—Ü–∏—è uid=%s —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", uid)
        return

    symbol = str(tp_row["symbol"])

    # –æ—Å—Ç–∞—Ç–æ–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π
    left_qty = await _calc_left_qty(uid)
    if not left_qty or left_qty <= Decimal("0"):
        log.debug("‚ÑπÔ∏è SL_HANDLER: –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ uid=%s —É–∂–µ 0", uid)
        return

    # –≥–µ–π—Ç ‚Ññ2: –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ priced TP –Ω–∞ –±–∏—Ä–∂–µ ‚Äî –Ω–µ –¥–≤–∏–≥–∞–µ–º SL (–∂–¥—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∏—Ä–∂–µ–≤–æ–≥–æ TP)
    if await _has_active_priced_tp_on_exchange(uid):
        log.debug("SL_HANDLER: skip sl_move_to_entry ‚Äî active priced TP on exchange (uid=%s)", uid)
        return

    # –±–∏—Ä–∂–µ–≤–∞—è ¬´—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞¬ª
    entry_avg = await _fetch_entry_avg_fill(uid)
    if entry_avg is None or entry_avg <= Decimal("0"):
        log.debug("‚ö†Ô∏è SL_HANDLER: –Ω–µ—Ç avg_fill –¥–ª—è uid=%s", uid)
        return

    # —Ç–µ–∫—É—â–∞—è lastPrice
    last_price = await _fetch_bybit_last_price(symbol)
    if last_price is None:
        log.debug("‚ö†Ô∏è SL_HANDLER: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ last price –¥–ª—è %s", symbol)
        return

    # ¬´—Ü–µ–Ω–∞ –ª—É—á—à–µ –≤—Ö–æ–¥–∞¬ª –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    better = (last_price > entry_avg) if direction == "long" else (last_price < entry_avg)
    if not better:
        log.debug("‚ÑπÔ∏è SL_HANDLER: last=%s –Ω–µ –ª—É—á—à–µ entry=%s –¥–ª—è dir=%s (uid=%s)", _fmt(last_price), _fmt(entry_avg), direction, uid)
        return

    # –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π SL (–¥–ª—è –æ–±—ä—ë–º–∞)
    sl_qty = await _fetch_active_sl_qty(uid)
    if sl_qty is None:
        log.debug("‚ÑπÔ∏è SL_HANDLER: –∞–∫—Ç–∏–≤–Ω—ã–π SL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è uid=%s ‚Äî –ø—Ä–æ–ø—É—Å–∫", uid)
        return
    if sl_qty <= Decimal("0"):
        log.debug("‚ÑπÔ∏è SL_HANDLER: –∞–∫—Ç–∏–≤–Ω—ã–π SL –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π –æ–±—ä—ë–º (uid=%s)", uid)
        return

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—É entry –∫ ticksize
    ticksize = _to_dec((config.tickers.get(symbol) or {}).get("ticksize"))
    trigger_price = _round_price(entry_avg, ticksize)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ maintainer: –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å SL –Ω–∞ entry —Å —Ç–µ–º –∂–µ –æ–±—ä—ë–º–æ–º
    try:
        await infra.redis_client.xadd(MAINTAINER_STREAM, {
            "type": "sl_move_to_entry",
            "position_uid": uid,
            "strategy_id": str(sid),
            "symbol": symbol,
            "direction": direction,
            "trigger_price": str(trigger_price),
            "qty": str(sl_qty),
            "ts": datetime.utcnow().isoformat(timespec="milliseconds"),
            "dedupe": f"{uid}:sl:to_entry",
        })
        log.info("üì§ SL_HANDLER ‚Üí sl_move_to_entry: uid=%s %s trigger=%s qty=%s", uid, symbol, _fmt(trigger_price), _fmt(sl_qty))
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å sl_move_to_entry –¥–ª—è uid=%s", uid)


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
def _g(d: Dict[str, Any], key: str) -> Optional[str]:
    v = d.get(key) if key in d else d.get(key.encode(), None)
    return v.decode() if isinstance(v, (bytes, bytearray)) else (v if isinstance(v, str) else None)

def _to_dec(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _to_int(s: Optional[str]) -> Optional[int]:
    try:
        return int(s) if s not in (None, "", "None") else None
    except Exception:
        return None

def _fmt(x: Optional[Decimal], max_prec: int = 8) -> str:
    if x is None:
        return "‚Äî"
    try:
        s = f"{x:.{max_prec}f}".rstrip("0").rstrip(".")
        return s if s else "0"
    except Exception:
        return str(x)

def _round_price(price: Decimal, ticksize: Optional[Decimal]) -> Decimal:
    if ticksize is None or ticksize <= 0:
        return price
    try:
        return price.quantize(ticksize, rounding=ROUND_HALF_UP)
    except Exception:
        return price

async def _calc_left_qty(uid: str) -> Optional[Decimal]:
    row = await infra.pg_pool.fetchrow(
        """
        WITH e AS (
          SELECT COALESCE(MAX(filled_qty),0) AS fq
          FROM public.trader_position_orders
          WHERE position_uid=$1 AND kind='entry'
        ),
        t AS (
          SELECT COALESCE(SUM(filled_qty),0) AS fq
          FROM public.trader_position_orders
          WHERE position_uid=$1 AND kind='tp'
        ),
        s AS (
          SELECT COALESCE(SUM(filled_qty),0) AS fq
          FROM public.trader_position_orders
          WHERE position_uid=$1 AND kind='sl'
        ),
        c AS (
          SELECT COALESCE(SUM(filled_qty),0) AS fq
          FROM public.trader_position_orders
          WHERE position_uid=$1 AND kind='close'
        )
        SELECT e.fq - t.fq - s.fq - c.fq AS left_qty FROM e,t,s,c
        """,
        uid
    )
    try:
        return Decimal(str(row["left_qty"])) if row and row["left_qty"] is not None else None
    except Exception:
        return None

async def _fetch_entry_avg_fill(uid: str) -> Optional[Decimal]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT avg_fill_price
        FROM public.trader_position_orders
        WHERE position_uid = $1 AND kind='entry'
        ORDER BY id DESC LIMIT 1
        """,
        uid
    )
    return _to_dec(row["avg_fill_price"]) if row and row["avg_fill_price"] is not None else None

async def _fetch_active_sl_qty(uid: str) -> Optional[Decimal]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT qty
        FROM public.trader_position_orders
        WHERE position_uid = $1 AND kind='sl'
          AND ext_status IN ('submitted','accepted','partially_filled')
        ORDER BY id DESC LIMIT 1
        """,
        uid
    )
    return _to_dec(row["qty"]) if row and row["qty"] is not None else None

async def _has_active_priced_tp_on_exchange(uid: str) -> bool:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT 1
        FROM public.trader_position_orders
        WHERE position_uid = $1
          AND kind = 'tp'
          AND "type" = 'limit'
          AND ext_status IN ('submitted','accepted','partially_filled')
        LIMIT 1
        """,
        uid
    )
    return bool(row)

async def _fetch_bybit_last_price(symbol: str) -> Optional[Decimal]:
    try:
        url = f"{BYBIT_PUBLIC_BASE}/v5/market/tickers?category={BYBIT_CATEGORY}&symbol={symbol}"
        async with httpx.AsyncClient(timeout=5) as client:
            r = await client.get(url)
            r.raise_for_status()
            data = r.json()
        lst = (data.get("result") or {}).get("list") or []
        last = lst[0].get("lastPrice") if lst else None
        return _to_dec(last)
    except Exception:
        return None