# trader_config.py ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤/—Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –æ–Ω–ª–∞–π–Ω-–∞–ø–¥–µ–π—Ç—ã (Pub/Sub/Stream) –∏ –∫—ç—à –ø–æ–ª–∏—Ç–∏–∫ (TP/SL) –¥–ª—è trader_winner

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
from decimal import Decimal
from typing import Dict, Set, Optional, List, Tuple

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log = logging.getLogger("TRADER_CONFIG")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ Pub/Sub (–∂—ë—Å—Ç–∫–æ –≤ –∫–æ–¥–µ)
TICKERS_EVENTS_CHANNEL = "bb:tickers_events"
STRATEGIES_EVENTS_CHANNEL = "strategies_v4_events"

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–¥–≤—É—Ö—Ñ–∞–∑–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª applied)
STRATEGY_STATE_STREAM = "strategy_state_stream"
STATE_CG = "trader_v4_state_cg"
STATE_CONSUMER = "state-worker-1"


# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
def _normalize_strategy_flags(strategy: dict) -> None:
    # —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å –±—É–ª–µ–≤–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ strategies_v4
    for key in (
        "enabled",
        "use_all_tickers",
        "use_stoploss",
        "allow_open",
        "reverse",
        "sl_protection",
        "market_watcher",
        "deathrow",
        "blacklist_watcher",
        "trader_winner",
    ):
        if key in strategy:
            val = strategy[key]
            # –ø—Ä–∏–≤–æ–¥–∏–º –∫ bool, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ bool, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            strategy[key] = (str(val).lower() == "true") if not isinstance(val, bool) else val


# üî∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ (+ in-memory –∫—ç—à –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–ª–∏—Ç–∏–∫)
class TraderConfigState:
    def __init__(self):
        self.tickers: Dict[str, dict] = {}
        self.strategies: Dict[int, dict] = {}
        self.strategy_tickers: Dict[int, Set[str]] = {}

        # –∫—ç—à –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self.trader_winners: Set[int] = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ strategy_id
        self.trader_winners_min_deposit: Optional[Decimal] = None
        self.strategy_meta: Dict[int, dict] = {}  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö winners:
        # {sid: {"deposit": Decimal|None, "leverage": Decimal|None,
        #        "market_mirrow": int|None, "market_mirrow_long": int|None, "market_mirrow_short": int|None}}

        # –∫—ç—à –ø–æ–ª–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
        self.strategy_policies: Dict[int, dict] = {}
        # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ policy:
        # {
        #   "strategy": {‚Ä¶–∫–æ–ø–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ strategies_v4‚Ä¶},
        #   "tickers": set[str],
        #   "initial_sl": {"mode": "percent"|"atr", "value": Decimal} | None,
        #   "tp_levels": [{"level": int, "tp_type": str, "tp_value": Decimal|None,
        #                  "volume_percent": Decimal|None, "sl_mode": str|None, "sl_value": Decimal|None}, ...]
        # }

        self._lock = asyncio.Lock()

    # üî∏ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async def reload_all(self):
        async with self._lock:
            await self._load_tickers()
            await self._load_strategies()
            await self._load_strategy_tickers()
            await self._refresh_trader_winners_state_locked()
            # –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
            log.info(
                "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–∏–∫–µ—Ä–æ–≤=%d, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π=%d, winners=%d (min_dep=%s)",
                len(self.tickers),
                len(self.strategies),
                len(self.trader_winners),
                self.trader_winners_min_deposit,
            )

    # üî∏ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö winners
    async def reload_all_policies_for_winners(self):
        async with self._lock:
            # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ id –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winner_ids: List[int] = list(self.trader_winners)
            if not winner_ids:
                self.strategy_policies.clear()
                log.info("üè∑Ô∏è –ö—ç—à –ø–æ–ª–∏—Ç–∏–∫: winners=0 ‚Üí policies=0 (–æ—á–∏—â–µ–Ω–æ)")
                return

            # –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ winners
            policies, total_levels = await self._load_policies_for_sids_locked(winner_ids)
            self.strategy_policies = policies

            # —Å–≤–æ–¥–Ω—ã–π –ª–æ–≥
            log.info(
                "üè∑Ô∏è –ö—ç—à –ø–æ–ª–∏—Ç–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω: winners=%d, policies=%d, tp_levels_total=%d",
                len(self.trader_winners),
                len(self.strategy_policies),
                total_levels,
            )

    # üî∏ –¢–æ—á–µ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞/–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ winner)
    async def reload_strategy_policy(self, strategy_id: int):
        async with self._lock:
            # —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å winner –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–º –∫—ç—à–µ
            if strategy_id not in self.trader_winners or strategy_id not in self.strategies:
                self.strategy_policies.pop(strategy_id, None)
                log.info("üè∑Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞: id=%d (–Ω–µ winner/–Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)", strategy_id)
                return

            # –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É sid
            policies, total_levels = await self._load_policies_for_sids_locked([strategy_id])
            self.strategy_policies.update(policies)

            # –ª–æ–≥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            tp_count = len(policies.get(strategy_id, {}).get("tp_levels", []))
            log.info(
                "üè∑Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=%d, tp_levels=%d (total_levels=%d)",
                strategy_id,
                tp_count,
                total_levels,
            )

    # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ –∫—ç—à–∞ (–Ω–∞–ø—Ä., –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å—Ç–∞—Ç—É—Å–∞ winner)
    async def remove_strategy_policy(self, strategy_id: int):
        async with self._lock:
            existed = strategy_id in self.strategy_policies
            self.strategy_policies.pop(strategy_id, None)
            log.info("üóëÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞: id=%d (was=%s)", strategy_id, "true" if existed else "false")

    # üî∏ –ï–¥–∏–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Pub/Sub applied/true/false, Stream applied)
    async def on_strategy_changed(self, strategy_id: int):
        async with self._lock:
            # –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            row = await infra.pg_pool.fetchrow(
                """
                SELECT *
                FROM strategies_v4
                WHERE id = $1 AND enabled = true
                """,
                strategy_id,
            )

            if not row:
                # —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –∫—ç—à–∞, —Å–≤—è–∑–∫–∏ –∏ winners
                self.strategies.pop(strategy_id, None)
                self.strategy_tickers.pop(strategy_id, None)
                self.trader_winners.discard(strategy_id)
                self.strategy_meta.pop(strategy_id, None)
                await self._recalc_min_deposit_locked()
                # —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
                self.strategy_policies.pop(strategy_id, None)
                log.info("üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: id=%d (winner=%s, policy_dropped=true)",
                         strategy_id, "true" if strategy_id in self.trader_winners else "false")
                return

            # –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ñ–ª–∞–≥–∏
            strategy = dict(row)
            _normalize_strategy_flags(strategy)
            self.strategies[strategy_id] = strategy

            # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers_rows = await infra.pg_pool.fetch(
                """
                SELECT t.symbol
                FROM strategy_tickers_v4 st
                JOIN tickers_bb t ON st.ticker_id = t.id
                WHERE st.strategy_id = $1
                  AND st.enabled = true
                  AND t.status = 'enabled'
                  AND t.tradepermission = 'enabled'
                """,
                strategy_id,
            )
            self.strategy_tickers[strategy_id] = {r["symbol"] for r in tickers_rows}

            # –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à winners/–º–µ—Ç–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
            await self._touch_winner_membership_locked(strategy)

            # –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å min(deposit) —Å—Ä–µ–¥–∏ winners
            await self._recalc_min_deposit_locked()

            # –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å winner ‚Äî –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É, –∏–Ω–∞—á–µ —É–¥–∞–ª–∏—Ç—å
            if strategy_id in self.trader_winners:
                policies, _ = await self._load_policies_for_sids_locked([strategy_id])
                self.strategy_policies.update(policies)
                tp_count = len(self.strategy_policies.get(strategy_id, {}).get("tp_levels", []))
                log.info(
                    "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=%d (tickers=%d, is_winner=true, tp_levels=%d)",
                    strategy_id,
                    len(self.strategy_tickers[strategy_id]),
                    tp_count,
                )
            else:
                had_policy = self.strategy_policies.pop(strategy_id, None) is not None
                log.info(
                    "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=%d (tickers=%d, is_winner=false, policy_dropped=%s)",
                    strategy_id,
                    len(self.strategy_tickers[strategy_id]),
                    "true" if had_policy else "false",
                )

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    async def _load_tickers(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT *
            FROM tickers_bb
            WHERE status = 'enabled' AND tradepermission = 'enabled'
            """
        )
        self.tickers = {r["symbol"]: dict(r) for r in rows}
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã: %d", len(self.tickers))

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ç–æ–ª—å–∫–æ enabled=true)
    async def _load_strategies(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT *
            FROM strategies_v4
            WHERE enabled = true
            """
        )
        strategies: Dict[int, dict] = {}
        for r in rows:
            s = dict(r)
            _normalize_strategy_flags(s)
            strategies[s["id"]] = s
        self.strategies = strategies
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %d", len(self.strategies))

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üî —Ç–∏–∫–µ—Ä—ã
    async def _load_strategy_tickers(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT st.strategy_id, t.symbol
            FROM strategy_tickers_v4 st
            JOIN tickers_bb t ON st.ticker_id = t.id
            WHERE st.enabled = true
              AND t.status = 'enabled'
              AND t.tradepermission = 'enabled'
            """
        )
        mapping: Dict[int, Set[str]] = {}
        for r in rows:
            mapping.setdefault(r["strategy_id"], set()).add(r["symbol"])
        self.strategy_tickers = mapping
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è‚Üî—Ç–∏–∫–µ—Ä—ã: –∑–∞–ø–∏—Å–µ–π=%d", len(rows))

    # üî∏ –ü—É–±–ª–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–±–∞—Ç—á –∏–∑ –ë–î)
    async def refresh_trader_winners_state(self):
        async with self._lock:
            await self._refresh_trader_winners_state_locked()

    # üî∏ –ö—ç—à –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: –±–∞—Ç—á-—á—Ç–µ–Ω–∏–µ –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ in-memory –ø–æ–ª–µ–π
    async def _refresh_trader_winners_state_locked(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT id, deposit, leverage, market_mirrow, market_mirrow_long, market_mirrow_short
            FROM strategies_v4
            WHERE enabled = true
              AND trader_winner = true
            """
        )
        winners: Set[int] = set()
        meta: Dict[int, dict] = {}
        min_dep: Optional[Decimal] = None

        for r in rows:
            sid = int(r["id"])
            dep = _as_decimal(r["deposit"])
            lev = _as_decimal(r["leverage"])
            mm = r["market_mirrow"]
            mml = r["market_mirrow_long"]
            mms = r["market_mirrow_short"]

            winners.add(sid)
            meta[sid] = {
                "deposit": dep,
                "leverage": lev,
                "market_mirrow": int(mm) if mm is not None else None,
                "market_mirrow_long": int(mml) if mml is not None else None,
                "market_mirrow_short": int(mms) if mms is not None else None,
            }
            if dep is not None and dep > 0 and (min_dep is None or dep < min_dep):
                min_dep = dep

        self.trader_winners = winners
        self.strategy_meta = meta
        self.trader_winners_min_deposit = min_dep
        log.info(
            "üè∑Ô∏è –ö—ç—à trader_winner –æ–±–Ω–æ–≤–ª—ë–Ω: winners=%d, min_dep=%s",
            len(self.trader_winners),
            self.trader_winners_min_deposit,
        )

    # üî∏ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫—ç—à–∞ winners –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def _touch_winner_membership_locked(self, strategy_row: dict):
        sid = int(strategy_row["id"])
        is_winner = bool(strategy_row.get("trader_winner"))

        if is_winner:
            self.trader_winners.add(sid)
            self.strategy_meta[sid] = {
                "deposit": _as_decimal(strategy_row.get("deposit")),
                "leverage": _as_decimal(strategy_row.get("leverage")),
                "market_mirrow": strategy_row.get("market_mirrow"),
                "market_mirrow_long": strategy_row.get("market_mirrow_long"),
                "market_mirrow_short": strategy_row.get("market_mirrow_short"),
            }
        else:
            self.trader_winners.discard(sid)
            self.strategy_meta.pop(sid, None)

    # üî∏ –ü–µ—Ä–µ—Å—á—ë—Ç min(deposit) —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö winners (–ø–æ in-memory meta)
    async def _recalc_min_deposit_locked(self):
        min_dep: Optional[Decimal] = None
        for sid in self.trader_winners:
            dep = _as_decimal(self.strategy_meta.get(sid, {}).get("deposit"))
            if dep is not None and dep > 0 and (min_dep is None or dep < min_dep):
                min_dep = dep
        self.trader_winners_min_deposit = min_dep

    # üî∏ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–¥–µ—Ä–∂–∞—Ç—å self._lock)
    async def _load_policies_for_sids_locked(self, sids: List[int]) -> Tuple[Dict[int, dict], int]:
        # –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        policies: Dict[int, dict] = {}
        total_levels = 0

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ¬´—Å–∫–µ–ª–µ—Ç–æ–≤¬ª –ø–æ–ª–∏—Ç–∏–∫ –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π/—Ç–∏–∫–µ—Ä–æ–≤
        for sid in sids:
            srow = self.strategies.get(sid, {})
            initial_sl = None
            # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ SL
            if srow and srow.get("use_stoploss") and srow.get("sl_type") in ("percent", "atr"):
                sl_val = _as_decimal(srow.get("sl_value"))
                if sl_val is not None and sl_val > 0:
                    initial_sl = {"mode": srow.get("sl_type"), "value": sl_val}
            policies[sid] = {
                "strategy": dict(srow) if srow else {},
                "tickers": set(self.strategy_tickers.get(sid, set())),
                "initial_sl": initial_sl,
                "tp_levels": [],
            }

        # –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –≥—Ä—É–∑–∏—Ç—å ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not sids:
            return policies, total_levels

        # –∑–∞–≥—Ä—É–∑–∏—Ç—å TP-–ª–∏–Ω–µ–π–∫–∏
        tp_rows = await infra.pg_pool.fetch(
            """
            SELECT id AS tp_level_id, strategy_id, level, tp_type, tp_value, volume_percent
            FROM strategy_tp_levels_v4
            WHERE strategy_id = ANY($1::int[])
            ORDER BY strategy_id, level
            """,
            sids,
        )

        # –∑–∞–≥—Ä—É–∑–∏—Ç—å SL-–ø–æ–ª–∏—Ç–∏–∫—É –ø–æ TP
        sl_rows = await infra.pg_pool.fetch(
            """
            SELECT strategy_id, tp_level_id, sl_mode, sl_value
            FROM strategy_tp_sl_v4
            WHERE strategy_id = ANY($1::int[])
            """,
            sids,
        )

        # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –º–∞–ø–ø–µ—Ä (sid, tp_level_id) -> (sl_mode, sl_value)
        sl_map: Dict[Tuple[int, int], Tuple[Optional[str], Optional[Decimal]]] = {}
        for r in sl_rows:
            key = (int(r["strategy_id"]), int(r["tp_level_id"]))
            sl_map[key] = (r["sl_mode"], _as_decimal(r["sl_value"]))

        # —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        for r in tp_rows:
            sid = int(r["strategy_id"])
            lvl_id = int(r["tp_level_id"])
            # –ø–æ–¥—Ç—è–Ω—É—Ç—å sl_mode/sl_value, –µ—Å–ª–∏ –µ—Å—Ç—å
            sl_mode, sl_value = sl_map.get((sid, lvl_id), (None, None))
            # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —É—Ä–æ–≤–Ω—è
            level_item = {
                "level": int(r["level"]),
                "tp_type": r["tp_type"],
                "tp_value": _as_decimal(r["tp_value"]),
                "volume_percent": _as_decimal(r["volume_percent"]),
                "sl_mode": sl_mode,
                "sl_value": sl_value,
            }
            # –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–æ–ª–∏—Ç–∏–∫–µ
            policies.setdefault(sid, {
                "strategy": dict(self.strategies.get(sid, {})),
                "tickers": set(self.strategy_tickers.get(sid, set())),
                "initial_sl": policies.get(sid, {}).get("initial_sl"),
                "tp_levels": [],
            })
            policies[sid]["tp_levels"].append(level_item)
            total_levels += 1

        # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–æ –æ–¥–Ω–æ–º—É sid (–ø—Ä–∏ —Ç–æ—á–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
        if len(sids) == 1:
            sid = sids[0]
            log.info(
                "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏: id=%d, levels=%d, tickers=%d, initial_sl=%s",
                sid,
                len(policies.get(sid, {}).get("tp_levels", [])),
                len(policies.get(sid, {}).get("tickers", set())),
                "yes" if policies.get(sid, {}).get("initial_sl") else "no",
            )

        return policies, total_levels


# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = TraderConfigState()


# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏—Ç–∏–∫)
async def init_trader_config_state():
    await config.reload_all()
    log.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–±–µ–∑ –ø–æ–ª–∏—Ç–∏–∫ TP/SL)")


# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å Pub/Sub –¥–ª—è –æ–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (—Ç–∏–∫–µ—Ä—ã/—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
async def config_event_listener():
    redis = infra.redis_client
    pubsub = redis.pubsub()

    # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
    await pubsub.subscribe(TICKERS_EVENTS_CHANNEL, STRATEGIES_EVENTS_CHANNEL)
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Redis –∑–∞–ø—É—â–µ–Ω–∞: %s, %s", TICKERS_EVENTS_CHANNEL, STRATEGIES_EVENTS_CHANNEL)

    async for msg in pubsub.listen():
        if msg.get("type") != "message":
            continue

        try:
            channel = msg.get("channel")
            data_raw = msg.get("data")

            # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞–π—Ç–æ–≤–æ–≥–æ –∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if isinstance(data_raw, bytes):
                data_raw = data_raw.decode("utf-8", errors="ignore")

            data = json.loads(data_raw)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            if channel == TICKERS_EVENTS_CHANNEL:
                symbol = data.get("symbol")
                action = data.get("action")
                if action == "enabled":
                    await config.reload_ticker(symbol)
                elif action == "disabled":
                    await config.remove_ticker(symbol)
                log.info("‚ôªÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–∫–µ—Ä–∞: %s (%s)", symbol, action)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            elif channel == STRATEGIES_EVENTS_CHANNEL:
                sid_raw = data.get("id")
                sid = int(sid_raw) if sid_raw is not None else None
                action = data.get("action")
                # –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, winners –∏ –ø–æ–ª–∏—Ç–∏–∫—É
                if sid is not None:
                    await config.on_strategy_changed(sid)
                log.info("‚ôªÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: id=%s (%s)", sid_raw, action)

        except Exception:
            # –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –¥–∞–ª—å—à–µ
            log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è Pub/Sub")

# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å —Å—Ç—Ä–∏–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–¥–≤—É—Ö—Ñ–∞–∑–Ω—ã–π applied)
async def strategy_state_listener():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞–Ω–∏–µ CG (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(STRATEGY_STATE_STREAM, STATE_CG, id="$", mkstream=True)
        log.info("üì° –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ %s –¥–ª—è —Å—Ç—Ä–∏–º–∞ %s", STATE_CG, STRATEGY_STATE_STREAM)
    except Exception:
        # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

    # —Å–±—Ä–æ—Å offset CG –Ω–∞ '$' ‚Äî —á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    try:
        await redis.execute_command("XGROUP", "SETID", STRATEGY_STATE_STREAM, STATE_CG, "$")
        log.info("‚è© –ì—Ä—É–ø–ø–∞ %s –¥–ª—è %s —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ $ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)", STATE_CG, STRATEGY_STATE_STREAM)
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å CG %s –¥–ª—è %s –Ω–∞ $", STATE_CG, STRATEGY_STATE_STREAM)

    # —á—Ç–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–∏–º–∞ –≤ –≤–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=STATE_CG,
                consumername=STATE_CONSUMER,
                streams={STRATEGY_STATE_STREAM: ">"},
                count=200,
                block=1000,  # –º—Å
            )
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π
            if not entries:
                continue

            for _, records in entries:
                for entry_id, fields in records:
                    try:
                        # –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {'type': 'strategy', 'action': 'applied', 'id': '<sid>'}
                        if fields.get("type") == "strategy" and fields.get("action") == "applied":
                            sid_raw = fields.get("id")
                            sid = int(sid_raw) if sid_raw is not None else None
                            if sid is not None:
                                await config.on_strategy_changed(sid)
                                log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω applied –∏–∑ state-stream: id=%s", sid_raw)
                        # ack –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await redis.xack(STRATEGY_STATE_STREAM, STATE_CG, entry_id)
                    except Exception:
                        # –æ—Å—Ç–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ pending ‚Äî –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ state-stream (id=%s)", entry_id)
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ state-stream")
            # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(1)

# üî∏ –£—Ç–∏–ª–∏—Ç—ã
def _as_decimal(v) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None