# trader_config.py ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤/—Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –æ–Ω–ª–∞–π–Ω-–∞–ø–¥–µ–π—Ç—ã (Pub/Sub)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
from typing import Dict, Set

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log = logging.getLogger("TRADER_CONFIG")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ Pub/Sub (–∂—ë—Å—Ç–∫–æ –≤ –∫–æ–¥–µ)
TICKERS_EVENTS_CHANNEL = "bb:tickers_events"
STRATEGIES_EVENTS_CHANNEL = "strategies_v4_events"

# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
def _normalize_strategy_flags(strategy: dict) -> None:
    # —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å –±—É–ª–µ–≤–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ strategies_v4
    for key in (
        "enabled",
        "use_all_tickers",
        "use_stoploss",
        "allow_open",
        "reverse",
        "sl_protection",
        "market_watcher",
        "deathrow",
        "blacklist_watcher",
    ):
        if key in strategy:
            val = strategy[key]
            # –ø—Ä–∏–≤–æ–¥–∏–º –∫ bool, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ bool, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            strategy[key] = (str(val).lower() == "true") if not isinstance(val, bool) else val

# üî∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
class TraderConfigState:
    def __init__(self):
        self.tickers: Dict[str, dict] = {}
        self.strategies: Dict[int, dict] = {}
        self.strategy_tickers: Dict[int, Set[str]] = {}
        self._lock = asyncio.Lock()

    # üî∏ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    async def reload_all(self):
        async with self._lock:
            await self._load_tickers()
            await self._load_strategies()
            await self._load_strategy_tickers()
            # –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
            log.info(
                "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: —Ç–∏–∫–µ—Ä–æ–≤=%d, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π=%d",
                len(self.tickers),
                len(self.strategies),
            )

    # üî∏ –¢–æ—á–µ—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    async def reload_ticker(self, symbol: str):
        async with self._lock:
            row = await infra.pg_pool.fetchrow(
                """
                SELECT *
                FROM tickers_bb
                WHERE symbol = $1 AND status = 'enabled' AND tradepermission = 'enabled'
                """,
                symbol,
            )
            if row:
                self.tickers[symbol] = dict(row)
                log.info("üîÑ –¢–∏–∫–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: %s", symbol)
            else:
                self.tickers.pop(symbol, None)
                log.info("üóëÔ∏è –¢–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω (–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω): %s", symbol)

    # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async def remove_ticker(self, symbol: str):
        async with self._lock:
            self.tickers.pop(symbol, None)
            log.info("üóëÔ∏è –¢–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω: %s", symbol)

    # üî∏ –¢–æ—á–µ—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def reload_strategy(self, strategy_id: int):
        async with self._lock:
            row = await infra.pg_pool.fetchrow(
                """
                SELECT *
                FROM strategies_v4
                WHERE id = $1 AND enabled = true
                """,
                strategy_id,
            )

            if not row:
                self.strategies.pop(strategy_id, None)
                self.strategy_tickers.pop(strategy_id, None)
                log.info("üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞: id=%d", strategy_id)
                return

            strategy = dict(row)
            _normalize_strategy_flags(strategy)
            self.strategies[strategy_id] = strategy

            # –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers_rows = await infra.pg_pool.fetch(
                """
                SELECT t.symbol
                FROM strategy_tickers_v4 st
                JOIN tickers_bb t ON st.ticker_id = t.id
                WHERE st.strategy_id = $1
                  AND st.enabled = true
                  AND t.status = 'enabled'
                  AND t.tradepermission = 'enabled'
                """,
                strategy_id,
            )
            self.strategy_tickers[strategy_id] = {r["symbol"] for r in tickers_rows}

            log.info("üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=%d (tickers=%d)", strategy_id, len(self.strategy_tickers[strategy_id]))

    # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async def remove_strategy(self, strategy_id: int):
        async with self._lock:
            self.strategies.pop(strategy_id, None)
            self.strategy_tickers.pop(strategy_id, None)
            log.info("üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞: id=%d", strategy_id)

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    async def _load_tickers(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT *
            FROM tickers_bb
            WHERE status = 'enabled' AND tradepermission = 'enabled'
            """
        )
        self.tickers = {r["symbol"]: dict(r) for r in rows}
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã: %d", len(self.tickers))

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ç–æ–ª—å–∫–æ enabled=true)
    async def _load_strategies(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT *
            FROM strategies_v4
            WHERE enabled = true
            """
        )
        strategies: Dict[int, dict] = {}
        for r in rows:
            s = dict(r)
            _normalize_strategy_flags(s)
            strategies[s["id"]] = s
        self.strategies = strategies
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: %d", len(self.strategies))

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üî —Ç–∏–∫–µ—Ä—ã
    async def _load_strategy_tickers(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT st.strategy_id, t.symbol
            FROM strategy_tickers_v4 st
            JOIN tickers_bb t ON st.ticker_id = t.id
            WHERE st.enabled = true
              AND t.status = 'enabled'
              AND t.tradepermission = 'enabled'
            """
        )
        mapping: Dict[int, Set[str]] = {}
        for r in rows:
            mapping.setdefault(r["strategy_id"], set()).add(r["symbol"])
        self.strategy_tickers = mapping
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π
        log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è‚Üî—Ç–∏–∫–µ—Ä—ã: –∑–∞–ø–∏—Å–µ–π=%d", len(rows))

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = TraderConfigState()

# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def init_trader_config_state():
    await config.reload_all()
    log.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å Pub/Sub –¥–ª—è –æ–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def config_event_listener():
    redis = infra.redis_client
    pubsub = redis.pubsub()

    # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
    await pubsub.subscribe(TICKERS_EVENTS_CHANNEL, STRATEGIES_EVENTS_CHANNEL)
    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Redis –∑–∞–ø—É—â–µ–Ω–∞: %s, %s", TICKERS_EVENTS_CHANNEL, STRATEGIES_EVENTS_CHANNEL)

    async for msg in pubsub.listen():
        if msg.get("type") != "message":
            continue

        try:
            channel = msg.get("channel")
            data_raw = msg.get("data")

            # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞–π—Ç–æ–≤–æ–≥–æ –∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if isinstance(data_raw, bytes):
                data_raw = data_raw.decode("utf-8", errors="ignore")

            data = json.loads(data_raw)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            if channel == TICKERS_EVENTS_CHANNEL:
                symbol = data.get("symbol")
                action = data.get("action")
                if action == "enabled":
                    await config.reload_ticker(symbol)
                elif action == "disabled":
                    await config.remove_ticker(symbol)
                log.info("‚ôªÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–∫–µ—Ä–∞: %s (%s)", symbol, action)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            elif channel == STRATEGIES_EVENTS_CHANNEL:
                sid = int(data.get("id"))
                action = data.get("action")
                if action == "true":
                    await config.reload_strategy(sid)
                elif action == "false":
                    await config.remove_strategy(sid)
                log.info("‚ôªÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: id=%d (%s)", sid, action)

        except Exception:
            # –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –¥–∞–ª—å—à–µ
            log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è Pub/Sub")