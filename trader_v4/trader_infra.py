# trader_infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ Redis)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import asyncpg
import redis.asyncio as aioredis

# üî∏ –õ–æ–≥–≥–µ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
log = logging.getLogger("TRADER_INFRA")

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class Infra:
    pg_pool: asyncpg.Pool = None
    redis_client: aioredis.Redis = None

infra = Infra()

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∂—ë—Å—Ç–∫–æ –≤ –∫–æ–¥–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
DEBUG_MODE = False  # –±–µ–∑ –≤—ã–Ω–µ—Å–µ–Ω–∏—è –≤ ENV

# üî∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

# üî∏ PostgreSQL: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞
async def setup_pg():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")

    pool = await asyncpg.create_pool(db_url)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await pool.execute("SELECT 1")
    infra.pg_pool = pool
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# üî∏ Redis: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async def setup_redis_client():
    host = os.getenv("REDIS_HOST", "localhost")
    port = int(os.getenv("REDIS_PORT", 6379))
    password = os.getenv("REDIS_PASSWORD")
    use_tls = os.getenv("REDIS_USE_TLS", "false").lower() == "true"

    protocol = "rediss" if use_tls else "redis"
    redis_url = f"{protocol}://{host}:{port}"

    client = aioredis.from_url(
        redis_url,
        password=password,
        decode_responses=True
    )

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await client.ping()
    infra.redis_client = client
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")