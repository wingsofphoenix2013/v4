# trader_position_filler.py ‚Äî –±—ã—Å—Ç—Ä—ã–π —è–∫–æ—Ä—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ¬´—Ç–æ–ª—Å—Ç–æ–π¬ª –∑–∞—è–≤–∫–∏ –≤ bybit_processor (–±–µ–∑ TG, –±–µ–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
from decimal import Decimal, InvalidOperation
from typing import Dict, Any, Optional
from datetime import datetime

from trader_infra import infra
from trader_config import config

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_FILLER")

# üî∏ –ü–æ—Ç–æ–∫–∏/–≥—Ä—É–ø–ø—ã
POSITIONS_OPEN_STREAM = "positions_open_stream"      # —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
ORDER_REQUEST_STREAM = "trader_order_requests"       # –ø—É–±–ª–∏–∫—É–µ–º ¬´—Ç–æ–ª—Å—Ç—É—é¬ª –∑–∞—è–≤–∫—É –¥–ª—è bybit_processor
CG_NAME = "trader_filler_open_group"
CONSUMER = "trader_filler_open_1"

# üî∏ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —á—Ç–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–∏–º–∞
READ_BLOCK_MS = 1000
READ_COUNT = 10
CONCURRENCY = 8


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
async def run_trader_position_filler_loop():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞—ë–º Consumer Group (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(POSITIONS_OPEN_STREAM, CG_NAME, id="$", mkstream=True)
        log.debug("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", POSITIONS_OPEN_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_FILLER v2 –∑–∞–ø—É—â–µ–Ω (–∏—Å—Ç–æ—á–Ω–∏–∫=%s, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=%d)", POSITIONS_OPEN_STREAM, CONCURRENCY)

    sem = asyncio.Semaphore(CONCURRENCY)

    async def _spawn_task(record_id: str, data: Dict[str, Any]):
        # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        async with sem:
            try:
                await _handle_open_event(record_id, data)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
            finally:
                # ack –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞ ON CONFLICT)
                try:
                    await redis.xack(POSITIONS_OPEN_STREAM, CG_NAME, record_id)
                except Exception:
                    log.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å ACK –∑–∞–ø–∏—Å—å (id=%s)", record_id)

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è
    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={POSITIONS_OPEN_STREAM: ">"},
                count=READ_COUNT,
                block=READ_BLOCK_MS
            )
            if not entries:
                continue

            tasks = []
            for _, records in entries:
                for record_id, data in records:
                    tasks.append(asyncio.create_task(_spawn_task(record_id, data)))

            # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: –¥–æ–∂–¥—ë–º—Å—è —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_FILLER")
            await asyncio.sleep(0.5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ positions_open_stream
async def _handle_open_event(record_id: str, data: Dict[str, Any]) -> None:
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    position_uid = _as_str(data.get("position_uid"))
    strategy_id = _as_int(data.get("strategy_id"))
    symbol = _as_str(data.get("symbol"))
    direction = (_as_str(data.get("direction")) or "").lower()

    # created_at –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–æ–π ‚Üí –ø–∞—Ä—Å–∏–º –≤ datetime (UTC naive)
    created_at_raw = data.get("created_at")
    created_at = _parse_dt(_as_str(created_at_raw)) or datetime.utcnow()

    notional_value = _as_decimal(data.get("notional_value")) or Decimal("0")

    if not position_uid or not strategy_id or not symbol:
        log.debug("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): id=%s sid=%s uid=%s symbol=%s", record_id, strategy_id, position_uid, symbol)
        return

    # —Ñ–∏–ª—å—Ç—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ winner-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if strategy_id not in config.trader_winners:
        log.debug("‚è≠Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤ trader_winner (sid=%s), –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, position_uid)
        return

    # –ø–ª–µ—á–æ –∏–∑ –∫—ç—à–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    leverage = _get_leverage_from_config(strategy_id)
    if leverage is None or leverage <= 0:
        log.debug("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ sid=%s (leverage=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, leverage, position_uid)
        return

    # —Ä–∞—Å—á—ë—Ç –º–∞—Ä–∂–∏
    try:
        margin_used = (notional_value / leverage)
    except (InvalidOperation, ZeroDivisionError):
        log.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏ (N=%s / L=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", notional_value, leverage, position_uid)
        return

    # –º–∞—Å—Ç–µ—Ä-–≥—Ä—É–ø–ø–∞ (mirrow) –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    group_master_id = _resolve_group_master_id_from_config(strategy_id, direction)
    if group_master_id is None:
        log.debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å group_master_id sid=%s (direction=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, direction, position_uid)
        return

    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —è–∫–æ—Ä—è –ø–æ–∑–∏—Ü–∏–∏ —É —Ç—Ä–µ–π–¥–µ—Ä–∞ (FK –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)
    await _insert_trader_position(
        group_strategy_id=group_master_id,
        strategy_id=strategy_id,
        position_uid=position_uid,
        symbol=symbol,
        margin_used=margin_used,
        created_at=created_at
    )

    # —Å–æ–±–∏—Ä–∞–µ–º ¬´—Ç–æ–ª—Å—Ç—É—é¬ª –∑–∞—è–≤–∫—É –¥–ª—è bybit_processor
    payload = _build_thick_order_payload(
        position_uid=position_uid,
        strategy_id=strategy_id,
        symbol=symbol,
        direction=direction,
        created_at=created_at,
    )

    # –ø—É–±–ª–∏–∫—É–µ–º –∑–∞—è–≤–∫—É
    await _publish_order_request(fields=payload)

    log.debug(
        "‚úÖ FILLER: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ | uid=%s | sid=%s | symbol=%s | group=%s | margin=%s",
        position_uid, strategy_id, symbol, group_master_id, margin_used
    )


# üî∏ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ¬´—Ç–æ–ª—Å—Ç–æ–π¬ª –∑–∞—è–≤–∫–∏ –¥–ª—è bybit_processor
def _build_thick_order_payload(*, position_uid: str, strategy_id: int, symbol: str, direction: str, created_at: datetime) -> Dict[str, str]:
    # –ø–æ–ª–∏—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Å–ª/—Ç–ø) –∏–∑ –∫—ç—à–∞
    policy = config.strategy_policy.get(strategy_id) or {}
    policy_json = json.dumps(policy, ensure_ascii=False, default=_json_default)

    # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (leverage –∏ mirrow —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏)
    meta = config.strategy_meta.get(strategy_id) or {}
    leverage = meta.get("leverage")

    # —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–∫–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    t = config.tickers.get(symbol) or {}
    precision_qty = t.get("precision_qty")
    min_qty = t.get("min_qty")
    ticksize = t.get("ticksize")

    # –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏ (Redis Streams)
    fields = {
        "position_uid": position_uid,
        "strategy_id": str(strategy_id),
        "symbol": symbol,
        "direction": (direction or "").lower(),
        "created_at": _to_iso(created_at),
        "leverage": _dec_to_str(leverage),
        "precision_qty": str(precision_qty) if precision_qty is not None else "",
        "min_qty": _dec_to_str(min_qty),
        "ticksize": _dec_to_str(ticksize),
        "policy": policy_json,   # —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON –ø–æ–ª–∏—Ç–∏–∫–∏
    }
    return fields


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ —à–∏–Ω—É –æ—Ä–¥–µ—Ä–æ–≤
async def _publish_order_request(*, fields: Dict[str, str]) -> None:
    redis = infra.redis_client
    try:
        await redis.xadd(ORDER_REQUEST_STREAM, fields)
        log.debug("üì§ ORDER_REQ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s –¥–ª—è uid=%s", ORDER_REQUEST_STREAM, fields.get("position_uid", ""))
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É uid=%s", fields.get("position_uid", ""))


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _parse_dt(s: Optional[str]) -> Optional[datetime]:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: ISO8601 'YYYY-mm-ddTHH:MM:SS[.ffffff][Z]'
    try:
        if not s:
            return None
        return datetime.fromisoformat(s.replace("Z", ""))
    except Exception:
        return None

def _dec_to_str(v: Any) -> str:
    # –ø—Ä–∏–≤–µ—Å—Ç–∏ Decimal/—á–∏—Å–ª–æ –∫ ¬´–∫—Ä–∞—Å–∏–≤–æ–π¬ª —Å—Ç—Ä–æ–∫–µ
    try:
        d = _as_decimal(v)
        if d is None:
            return ""
        s = f"{d:.12f}".rstrip("0").rstrip(".")
        return s if s else "0"
    except Exception:
        return ""

def _to_iso(v: Any) -> str:
    # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å isoformat ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ str
    try:
        return (v.isoformat() + "Z") if hasattr(v, "isoformat") else (str(v) if v is not None else "")
    except Exception:
        return str(v) if v is not None else ""

def _json_default(obj):
    # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è Decimal –∏ –ø—Ä–æ—á–∏—Ö –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ JSON
    if isinstance(obj, Decimal):
        return str(obj)
    # –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å set ‚Üí list –∏ —Ç.–ø., –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è
    raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

def _get_leverage_from_config(strategy_id: int) -> Optional[Decimal]:
    meta = config.strategy_meta.get(strategy_id) or {}
    lev = meta.get("leverage")
    try:
        return lev if isinstance(lev, Decimal) else (Decimal(str(lev)) if lev is not None else None)
    except Exception:
        return None

def _resolve_group_master_id_from_config(strategy_id: int, direction: Optional[str]) -> Optional[int]:
    meta = config.strategy_meta.get(strategy_id) or {}
    mm = meta.get("market_mirrow")
    mm_long = meta.get("market_mirrow_long")
    mm_short = meta.get("market_mirrow_short")

    # –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Üí –º–∞—Å—Ç–µ—Ä = —Å–∞–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    if mm is None and mm_long is None and mm_short is None:
        return strategy_id

    # –∑–∞–¥–∞–Ω –µ–¥–∏–Ω—ã–π –º–∞—Å—Ç–µ—Ä
    if mm is not None and mm_long is None and mm_short is None:
        try:
            return int(mm)
        except Exception:
            return None

    # –∑–∞–¥–∞–Ω—ã –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if mm is None and mm_long is not None and mm_short is not None:
        d = (direction or "").lower()
        try:
            if d == "long":
                return int(mm_long)
            if d == "short":
                return int(mm_short)
            return None
        except Exception:
            return None

    # –∏–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏
    return None

async def _insert_trader_position(
    group_strategy_id: int,
    strategy_id: int,
    position_uid: str,
    symbol: str,
    margin_used: Decimal,
    created_at: datetime
) -> None:
    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º)
    await infra.pg_pool.execute(
        """
        INSERT INTO public.trader_positions (
          group_strategy_id, strategy_id, position_uid, symbol,
          margin_used, status, pnl, created_at, closed_at
        ) VALUES ($1, $2, $3, $4, $5, 'open', NULL, $6, NULL)
        ON CONFLICT (position_uid) DO NOTHING
        """,
        group_strategy_id, strategy_id, position_uid, symbol, margin_used, created_at
    )