# trader_position_filler.py ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ñ–ª–∞–≥–æ–º trader_winner
# + TG-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ (—Å TP/SL) –∏ –±–∞–∑–æ–≤—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from decimal import Decimal, InvalidOperation
from typing import Dict, Any, Optional, Tuple, List

from trader_infra import infra
from trader_config import config
from trader_tg_notifier import send_open_notification

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_FILLER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–∞ –∏ Consumer Group (–∂—ë—Å—Ç–∫–æ –≤ –∫–æ–¥–µ)
SIGNAL_STREAM = "signal_log_queue"
CG_NAME = "trader_filler_group"
CONSUMER = "trader_filler_1"

# üî∏ –ù–æ–≤—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ä–¥–µ—Ä–∞
ORDER_REQUEST_STREAM = "trader_order_requests"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ç—Ä–∞–µ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
INITIAL_DELAY_SEC = 3.0      # –ø–µ—Ä–≤–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è "opened"
RETRY_DELAY_SEC = 5.0        # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
MAX_ATTEMPTS = 4             # –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: 1 (–ø–æ—Å–ª–µ INITIAL_DELAY) + 3 —Ä–µ—Ç—Ä–∞—è = 4


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ (—Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞)
async def run_trader_position_filler_loop():
    redis = infra.redis_client

    try:
        await redis.xgroup_create(SIGNAL_STREAM, CG_NAME, id="$", mkstream=True)
        log.info("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", SIGNAL_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_FILLER –∑–∞–ø—É—â–µ–Ω (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={SIGNAL_STREAM: ">"},
                count=1,
                block=1000
            )
            if not entries:
                continue

            for _, records in entries:
                for record_id, data in records:
                    try:
                        await _handle_signal_opened(record_id, data)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
                        await redis.xack(SIGNAL_STREAM, CG_NAME, record_id)
                    else:
                        await redis.xack(SIGNAL_STREAM, CG_NAME, record_id)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_FILLER")
            await asyncio.sleep(2)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ signal_log_queue (–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ status='opened')
async def _handle_signal_opened(record_id: str, data: Dict[str, Any]) -> None:
    status = _as_str(data.get("status"))
    if status != "opened":
        return  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç–∏—è

    # –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è
    strategy_id = _as_int(data.get("strategy_id"))
    position_uid = _as_str(data.get("position_uid"))
    symbol_hint = _as_str(data.get("symbol"))  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    if not strategy_id or not position_uid:
        log.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): id=%s sid=%s uid=%s", record_id, strategy_id, position_uid)
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ trader_winner (–ø–æ –∫—ç—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    if strategy_id not in config.trader_winners:
        log.info("‚è≠Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ trader_winner (sid=%s), –ø—Ä–æ–ø—É—Å–∫ opened uid=%s", strategy_id, position_uid)
        return

    # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ positions_v4 –∏ —á–∏—Ç–∞–µ–º –µ—ë (–¥–ª—è TG/–æ—Ä–¥–µ—Ä–∞: direction, entry_price, qty –∏ –ø—Ä.)
    pos = await _fetch_position_with_retry(position_uid)
    if not pos:
        log.info("‚è≠Ô∏è –ù–µ –Ω–∞—à–ª–∏ –ø–æ–∑–∏—Ü–∏—é –≤ positions_v4 –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞–µ–≤: uid=%s (sid=%s)", position_uid, strategy_id)
        return

    # –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∫ –º–æ–º–µ–Ω—Ç—É —Ñ–∏–∫—Å–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
    status_db = _as_str(pos.get("status"))
    closed_at_db = pos.get("closed_at")
    if status_db == "closed" or closed_at_db is not None:
        log.info("‚è≠Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∫ –º–æ–º–µ–Ω—Ç—É —Ñ–∏–∫—Å–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫ uid=%s (sid=%s)", position_uid, strategy_id)
        return

    # –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    symbol = _as_str(pos["symbol"]) or symbol_hint
    notional_value = _as_decimal(pos["notional_value"]) or Decimal("0")
    created_at = pos["created_at"]  # timestamp –∏–∑ –ë–î (UTC)
    direction = _as_str(pos.get("direction")) or None
    entry_price = _as_decimal(pos.get("entry_price"))

    if not symbol or notional_value <= 0:
        log.info("‚ö†Ô∏è –ü—É—Å—Ç–æ–π symbol –∏–ª–∏ notional (symbol=%s, notional=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", symbol, notional_value, position_uid)
        return

    # —á–∏—Ç–∞–µ–º leverage —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫—ç—à–∞ (–∏ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ >0)
    leverage = _get_leverage_from_config(strategy_id)
    if leverage is None or leverage <= 0:
        log.info("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è sid=%s (leverage=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, leverage, position_uid)
        return

    # —Ä–∞—Å—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏
    try:
        margin_used = (notional_value / leverage)
    except (InvalidOperation, ZeroDivisionError):
        log.info("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏ (N=%s / L=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", notional_value, leverage, position_uid)
        return

    # –≤—ã—á–∏—Å–ª—è–µ–º group_master_id —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º market_mirrow / *_long / *_short (–∏–∑ –∫—ç—à–∞)
    group_master_id = _resolve_group_master_id_from_config(strategy_id, direction)
    if group_master_id is None:
        log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å group_master_id –¥–ª—è sid=%s (direction=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s",
                 strategy_id, direction, position_uid)
        return

    # –ø—Ä–∞–≤–∏–ª–æ 1: –ø–æ —ç—Ç–æ–º—É symbol –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    if await _exists_open_for_symbol(symbol):
        log.info("‚õî –ü–æ —Å–∏–º–≤–æ–ª—É %s —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞–ø–∏—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", symbol, position_uid)
        return

    # –ø—Ä–∞–≤–∏–ª–æ 2: —Å—É–º–º–∞—Ä–Ω–∞—è –º–∞—Ä–∂–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ ‚â§ 95% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö trader_winner (–∏–∑ –∫—ç—à–∞)
    current_open_margin = await _sum_open_margin()
    min_deposit = config.trader_winners_min_deposit
    if min_deposit is None or min_deposit <= 0:
        log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å min(deposit) —Å—Ä–µ–¥–∏ trader_winner ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", position_uid)
        return

    limit = (Decimal("0.95") * min_deposit)
    if (current_open_margin + margin_used) > limit:
        log.info(
            "‚õî –õ–∏–º–∏—Ç –º–∞—Ä–∂–∏ –ø—Ä–µ–≤—ã—à–µ–Ω: open=%s + cand=%s > limit=%s (min_dep=%s) ‚Äî uid=%s",
            current_open_margin, margin_used, limit, min_deposit, position_uid
        )
        return

    # –≤—Å—Ç–∞–≤–∫–∞ –≤ trader_positions (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ position_uid)
    await _insert_trader_position(
        group_strategy_id=group_master_id,
        strategy_id=strategy_id,
        position_uid=position_uid,
        symbol=symbol,
        margin_used=margin_used,
        created_at=created_at
    )

    log.info(
        "‚úÖ TRADER_FILLER: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è uid=%s | symbol=%s | sid=%s | group=%s | margin=%s",
        position_uid, symbol, strategy_id, group_master_id, margin_used
    )

    # –ø—É–±–ª–∏–∫–∞—Ü–∏—è LEAN-–∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—á—ë—Ç/–ø–ª–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è bybit_processor
    await _publish_order_request(
        position_uid=position_uid,
        strategy_id=strategy_id,
        symbol=symbol,
        direction=direction,
        created_at=created_at,
    )

    # —Ç—è–Ω–µ–º TP/SL –∏–∑ position_targets_v4 –¥–ª—è TG (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        tp_targets, sl_targets = await _fetch_targets_for_position(position_uid)
    except Exception:
        tp_targets, sl_targets = [], []
        log.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TP/SL –¥–ª—è uid=%s", position_uid)

    # –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –∏–∑ –∫—ç—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategy_name = None
    srow = config.strategies.get(strategy_id)
    if srow and srow.get("name"):
        strategy_name = str(srow.get("name"))
    if not strategy_name:
        strategy_name = f"strategy_{strategy_id}"

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (—Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è; –±–µ–∑ üü¢/üî¥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ; —Å TP/SL)
    try:
        await send_open_notification(
            symbol=symbol,
            direction=direction,
            entry_price=entry_price,
            strategy_name=strategy_name,
            created_at=created_at,
            tp_targets=tp_targets,
            sl_targets=sl_targets,
        )
    except Exception:
        log.exception("‚ùå TG: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ uid=%s", position_uid)

# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ —à–∏–Ω—É –æ—Ä–¥–µ—Ä–æ–≤ (LEAN-–ø–µ–π–ª–æ–∞–¥)
async def _publish_order_request(
    *,
    position_uid: str,
    strategy_id: int,
    symbol: str,
    direction: Optional[str],
    created_at
) -> None:
    redis = infra.redis_client
    try:
        # –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö (Redis decode_responses=True)
        fields = {
            "position_uid": position_uid,
            "strategy_id": str(strategy_id),
            "symbol": symbol or "",
            "direction": (direction or "").lower(),
            "created_at": (created_at.isoformat() + "Z") if hasattr(created_at, "isoformat") else str(created_at or ""),
        }
        await redis.xadd(ORDER_REQUEST_STREAM, fields)
        log.debug("üì§ ORDER_REQ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s –¥–ª—è uid=%s", ORDER_REQUEST_STREAM, position_uid)
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –æ—Ä–¥–µ—Ä–∞ uid=%s", position_uid)
        
# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None


def _get_leverage_from_config(strategy_id: int) -> Optional[Decimal]:
    meta = config.strategy_meta.get(strategy_id) or {}
    lev = meta.get("leverage")
    try:
        return lev if isinstance(lev, Decimal) else (Decimal(str(lev)) if lev is not None else None)
    except Exception:
        return None


def _resolve_group_master_id_from_config(strategy_id: int, direction: Optional[str]) -> Optional[int]:
    meta = config.strategy_meta.get(strategy_id) or {}
    mm = meta.get("market_mirrow")
    mm_long = meta.get("market_mirrow_long")
    mm_short = meta.get("market_mirrow_short")

    # –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Üí –º–∞—Å—Ç–µ—Ä = —Å–∞–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    if mm is None and mm_long is None and mm_short is None:
        return strategy_id

    # –∑–∞–¥–∞–Ω –µ–¥–∏–Ω—ã–π –º–∞—Å—Ç–µ—Ä
    if mm is not None and mm_long is None and mm_short is None:
        try:
            return int(mm)
        except Exception:
            return None

    # –∑–∞–¥–∞–Ω—ã –æ–±–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–∞ –µ–¥–∏–Ω—ã–π –Ω–µ –∑–∞–¥–∞–Ω)
    if mm is None and mm_long is not None and mm_short is not None:
        d = (direction or "").lower()
        try:
            if d == "long":
                return int(mm_long)
            if d == "short":
                return int(mm_short)
            return None
        except Exception:
            return None

    # –∏–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏
    return None


async def _fetch_position_with_retry(position_uid: str) -> Optional[Dict[str, Any]]:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: –¥–æ–∂–¥–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
    await asyncio.sleep(INITIAL_DELAY_SEC)
    attempts = 0
    while attempts < MAX_ATTEMPTS:
        row = await infra.pg_pool.fetchrow(
            """
            SELECT symbol, notional_value, created_at, status, closed_at, direction, entry_price
            FROM public.positions_v4
            WHERE position_uid = $1
            """,
            position_uid
        )
        if row:
            return dict(row)

        attempts += 1
        if attempts < MAX_ATTEMPTS:
            await asyncio.sleep(RETRY_DELAY_SEC)
    return None


async def _exists_open_for_symbol(symbol: str) -> bool:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT 1
        FROM public.trader_positions
        WHERE status = 'open' AND symbol = $1
        LIMIT 1
        """,
        symbol
    )
    return row is not None


async def _sum_open_margin() -> Decimal:
    row = await infra.pg_pool.fetchrow(
        "SELECT COALESCE(SUM(margin_used), 0) AS total FROM public.trader_positions WHERE status='open'"
    )
    try:
        return Decimal(str(row["total"])) if row and row["total"] is not None else Decimal("0")
    except Exception:
        return Decimal("0")


async def _insert_trader_position(
    group_strategy_id: int,
    strategy_id: int,
    position_uid: str,
    symbol: str,
    margin_used: Decimal,
    created_at
) -> None:
    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º)
    await infra.pg_pool.execute(
        """
        INSERT INTO public.trader_positions (
          group_strategy_id, strategy_id, position_uid, symbol,
          margin_used, status, pnl, created_at, closed_at
        ) VALUES ($1, $2, $3, $4, $5, 'open', NULL, $6, NULL)
        ON CONFLICT (position_uid) DO NOTHING
        """,
        group_strategy_id, strategy_id, position_uid, symbol, margin_used, created_at
    )


# üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ TP/SL —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è TG)
async def _fetch_targets_for_position(position_uid: str) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
    rows = await infra.pg_pool.fetch(
        """
        SELECT type, level, price, quantity, hit, canceled
        FROM public.position_targets_v4
        WHERE position_uid = $1
        ORDER BY type, level
        """,
        position_uid
    )
    tp_list: List[Dict[str, Any]] = []
    sl_list: List[Dict[str, Any]] = []

    for r in rows:
        obj = {
            "type": r["type"],
            "level": r["level"],
            "price": r["price"],
            "quantity": r["quantity"],
            "hit": r["hit"],
            "canceled": r["canceled"],
        }
        if r["type"] == "tp":
            tp_list.append(obj)
        elif r["type"] == "sl":
            # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π ¬´–∂–∏–≤–æ–π¬ª SL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ ‚Äî —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç 1-–π
            sl_list.append(obj)

    return tp_list, sl_list