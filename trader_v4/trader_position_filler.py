# trader_position_filler.py ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ trader_positions

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from decimal import Decimal, InvalidOperation
from typing import Dict, Any, Optional, Set

from trader_infra import infra
from trader_rating import get_current_group_winners

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_FILLER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–∞ –∏ Consumer Group (–∂—ë—Å—Ç–∫–æ –≤ –∫–æ–¥–µ)
SIGNAL_STREAM = "signal_log_queue"
CG_NAME = "trader_filler_group"
CONSUMER = "trader_filler_1"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ç—Ä–∞–µ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
INITIAL_DELAY_SEC = 5.0      # –ø–µ—Ä–≤–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è "opened"
RETRY_DELAY_SEC = 5.0        # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
MAX_ATTEMPTS = 4             # –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: 1 (–ø–æ—Å–ª–µ INITIAL_DELAY) + 3 —Ä–µ—Ç—Ä–∞—è = 4


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ (—Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞)
async def run_trader_position_filler_loop():
    redis = infra.redis_client

    try:
        await redis.xgroup_create(SIGNAL_STREAM, CG_NAME, id="$", mkstream=True)
        log.info("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", SIGNAL_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_FILLER –∑–∞–ø—É—â–µ–Ω (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={SIGNAL_STREAM: ">"},
                count=1,
                block=1000
            )
            if not entries:
                continue

            for _, records in entries:
                for record_id, data in records:
                    try:
                        await _handle_signal_opened(record_id, data)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
                        await redis.xack(SIGNAL_STREAM, CG_NAME, record_id)
                    else:
                        await redis.xack(SIGNAL_STREAM, CG_NAME, record_id)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_FILLER")
            await asyncio.sleep(2)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ signal_log_queue (–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ status='opened')
async def _handle_signal_opened(record_id: str, data: Dict[str, Any]) -> None:
    status = _as_str(data.get("status"))
    if status != "opened":
        return  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç–∏—è

    # –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è
    strategy_id = _as_int(data.get("strategy_id"))
    position_uid = _as_str(data.get("position_uid"))
    symbol_hint = _as_str(data.get("symbol"))  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    log_uid = _as_str(data.get("log_uid"))

    if not strategy_id or not position_uid:
        log.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): id=%s sid=%s uid=%s", record_id, strategy_id, position_uid)
        return

    # –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî —Å–ø–µ—Ä–≤–∞ –∏–∑ in-memory, –ø—Ä–∏ –ø—É—Å—Ç–æ—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∏–∑ –ë–î
    winners_map = get_current_group_winners() or await _fallback_winners_from_db()
    winners_set: Set[int] = set(winners_map.values())

    if strategy_id not in winners_set:
        log.debug("‚è≠Ô∏è –ù–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å (sid=%s), –ø—Ä–æ–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è opened (uid=%s)", strategy_id, position_uid)
        return

    # –Ω–∞—Ö–æ–¥–∏–º group_master_id (–º–∞—Å—Ç–µ—Ä –≥—Ä—É–ø–ø—ã) –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    group_master_id = _find_group_master_for_winner(winners_map, strategy_id)
    if group_master_id is None:
        group_master_id = await _fetch_group_master_from_db(strategy_id)
    if group_master_id is None:
        log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å group_master_id –¥–ª—è sid=%s ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, position_uid)
        return

    # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ positions_v4 –∏ —á–∏—Ç–∞–µ–º –µ—ë (—Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ status/closed_at)
    pos = await _fetch_position_with_retry(position_uid)
    if not pos:
        log.info("‚è≠Ô∏è –ù–µ –Ω–∞—à–ª–∏ –ø–æ–∑–∏—Ü–∏—é –≤ positions_v4 –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞–µ–≤: uid=%s (sid=%s)", position_uid, strategy_id)
        return

    # –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∫ –º–æ–º–µ–Ω—Ç—É —Ñ–∏–∫—Å–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
    status_db = _as_str(pos.get("status"))
    closed_at_db = pos.get("closed_at")
    if status_db == "closed" or closed_at_db is not None:
        log.info("‚è≠Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∫ –º–æ–º–µ–Ω—Ç—É —Ñ–∏–∫—Å–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫ uid=%s (sid=%s)", position_uid, strategy_id)
        return

    # —á–∏—Ç–∞–µ–º leverage —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ >0)
    leverage = await _fetch_leverage(strategy_id)
    if leverage is None or leverage <= 0:
        log.info("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è sid=%s (leverage=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", strategy_id, leverage, position_uid)
        return

    # –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    symbol = _as_str(pos["symbol"]) or symbol_hint
    notional_value = _as_decimal(pos["notional_value"]) or Decimal("0")
    created_at = pos["created_at"]  # timestamp –∏–∑ –ë–î (UTC)

    if not symbol or notional_value <= 0:
        log.info("‚ö†Ô∏è –ü—É—Å—Ç–æ–π symbol –∏–ª–∏ notional (symbol=%s, notional=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", symbol, notional_value, position_uid)
        return

    # —Ä–∞—Å—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏
    try:
        margin_used = (notional_value / leverage)
    except (InvalidOperation, ZeroDivisionError):
        log.info("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏ (N=%s / L=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", notional_value, leverage, position_uid)
        return

    # –ø—Ä–∞–≤–∏–ª–æ 1: –ø–æ —ç—Ç–æ–º—É symbol –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    if await _exists_open_for_symbol(symbol):
        log.info("‚õî –ü–æ —Å–∏–º–≤–æ–ª—É %s —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞–ø–∏—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", symbol, position_uid)
        return

    # –ø—Ä–∞–≤–∏–ª–æ 2: —Å—É–º–º–∞—Ä–Ω–∞—è –º–∞—Ä–∂–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ ‚â§ 95% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å—Ä–µ–¥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    current_open_margin = await _sum_open_margin()
    min_deposit = await _min_deposit_among_winners()
    if min_deposit is None or min_deposit <= 0:
        log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å min(deposit) —Å—Ä–µ–¥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫ uid=%s", position_uid)
        return

    limit = (Decimal("0.95") * min_deposit)
    if (current_open_margin + margin_used) > limit:
        log.info(
            "‚õî –õ–∏–º–∏—Ç –º–∞—Ä–∂–∏ –ø—Ä–µ–≤—ã—à–µ–Ω: open=%s + cand=%s > limit=%s (min_dep=%s) ‚Äî uid=%s",
            current_open_margin, margin_used, limit, min_deposit, position_uid
        )
        return

    # –≤—Å—Ç–∞–≤–∫–∞ –≤ trader_positions (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ position_uid)
    await _insert_trader_position(
        group_strategy_id=group_master_id,
        strategy_id=strategy_id,
        position_uid=position_uid,
        symbol=symbol,
        margin_used=margin_used,
        created_at=created_at
    )

    log.info(
        "‚úÖ TRADER_FILLER: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è uid=%s | symbol=%s | sid=%s | group=%s | margin=%s",
        position_uid, symbol, strategy_id, group_master_id, margin_used
    )


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _find_group_master_for_winner(winners_map: Dict[int, int], winner_sid: int) -> Optional[int]:
    # winners_map: {group_master_id -> winner_strategy_id}
    for gm, sid in winners_map.items():
        if sid == winner_sid:
            return gm
    return None


async def _fallback_winners_from_db() -> Dict[int, int]:
    rows = await infra.pg_pool.fetch(
        """
        SELECT group_master_id, current_winner_id
        FROM public.trader_rating_active
        WHERE current_winner_id IS NOT NULL
        """
    )
    m = {int(r["group_master_id"]): int(r["current_winner_id"]) for r in rows}
    if m:
        log.info("‚ôªÔ∏è –ü—Ä–æ–≥—Ä–µ—Ç winners –∏–∑ –ë–î: –≥—Ä—É–ø–ø=%d", len(m))
    return m


async def _fetch_group_master_from_db(strategy_id: int) -> Optional[int]:
    row = await infra.pg_pool.fetchrow(
        "SELECT market_mirrow FROM public.strategies_v4 WHERE id=$1",
        strategy_id
    )
    if row and row["market_mirrow"] is not None:
        return int(row["market_mirrow"])
    return None


async def _fetch_position_with_retry(position_uid: str) -> Optional[Dict[str, Any]]:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: –¥–æ–∂–¥–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
    await asyncio.sleep(INITIAL_DELAY_SEC)
    attempts = 0
    while attempts < MAX_ATTEMPTS:
        row = await infra.pg_pool.fetchrow(
            """
            SELECT symbol, notional_value, created_at, status, closed_at
            FROM public.positions_v4
            WHERE position_uid = $1
            """,
            position_uid
        )
        if row:
            return dict(row)

        attempts += 1
        if attempts < MAX_ATTEMPTS:
            await asyncio.sleep(RETRY_DELAY_SEC)
    return None


async def _fetch_leverage(strategy_id: int) -> Optional[Decimal]:
    row = await infra.pg_pool.fetchrow(
        "SELECT leverage FROM public.strategies_v4 WHERE id=$1",
        strategy_id
    )
    if not row or row["leverage"] is None:
        return None
    try:
        return Decimal(str(row["leverage"]))
    except Exception:
        return None


async def _exists_open_for_symbol(symbol: str) -> bool:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT 1
        FROM public.trader_positions
        WHERE status = 'open' AND symbol = $1
        LIMIT 1
        """,
        symbol
    )
    return row is not None


async def _sum_open_margin() -> Decimal:
    row = await infra.pg_pool.fetchrow(
        "SELECT COALESCE(SUM(margin_used), 0) AS total FROM public.trader_positions WHERE status='open'"
    )
    try:
        return Decimal(str(row["total"])) if row and row["total"] is not None else Decimal("0")
    except Exception:
        return Decimal("0")


async def _min_deposit_among_winners() -> Optional[Decimal]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT MIN(s.deposit) AS min_dep
        FROM public.trader_rating_active tra
        JOIN public.strategies_v4 s ON s.id = tra.current_winner_id
        WHERE tra.current_winner_id IS NOT NULL
          AND s.deposit IS NOT NULL
          AND s.deposit > 0
        """
    )
    if not row or row["min_dep"] is None:
        return None
    try:
        return Decimal(str(row["min_dep"]))
    except Exception:
        return None


async def _insert_trader_position(
    group_strategy_id: int,
    strategy_id: int,
    position_uid: str,
    symbol: str,
    margin_used: Decimal,
    created_at
) -> None:
    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º)
    await infra.pg_pool.execute(
        """
        INSERT INTO public.trader_positions (
          group_strategy_id, strategy_id, position_uid, symbol,
          margin_used, status, pnl, created_at, closed_at
        ) VALUES ($1, $2, $3, $4, $5, 'open', NULL, $6, NULL)
        ON CONFLICT (position_uid) DO NOTHING
        """,
        group_strategy_id, strategy_id, position_uid, symbol, margin_used, created_at
    )