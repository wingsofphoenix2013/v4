# trader_position_closer.py ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏–π: ensure_closed ‚Üí trader_order_requests + –∞–ø–¥–µ–π—Ç trader_positions_v4 (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime

from decimal import Decimal

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("TRADER_CLOSER")

# üî∏ –ü–æ—Ç–æ–∫–∏/–≥—Ä—É–ø–ø—ã
POSITIONS_STATUS_STREAM = "positions_bybit_status"   # –∏—Å—Ç–æ—á–Ω–∏–∫: informer (closed.*)
ORDER_REQUEST_STREAM    = "trader_order_requests"    # –ø–æ–ª—É—á–∞—Ç–µ–ª—å: bybit_processor (cmd=ensure_closed)
CG_NAME   = "trader_closer_status_group"
CONSUMER  = "trader_closer_status_1"

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è/–ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
READ_BLOCK_MS = 1000
READ_COUNT    = 10
CONCURRENCY   = 8


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
async def run_trader_position_closer_loop():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞—ë–º Consumer Group (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(POSITIONS_STATUS_STREAM, CG_NAME, id="$", mkstream=True)
        log.debug("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", POSITIONS_STATUS_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üö¶ TRADER_CLOSER v1 –∑–∞–ø—É—â–µ–Ω (–∏—Å—Ç–æ—á–Ω–∏–∫=%s, –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=%d)", POSITIONS_STATUS_STREAM, CONCURRENCY)

    sem = asyncio.Semaphore(CONCURRENCY)

    async def _spawn_task(record_id: str, data: Dict[str, Any]):
        # ack —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã (–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–∞—Ö –ë–î –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
        async with sem:
            ack_ok = False
            try:
                ack_ok = await _handle_closed_event(record_id, data)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ (id=%s)", record_id)
            finally:
                if ack_ok:
                    try:
                        await redis.xack(POSITIONS_STATUS_STREAM, CG_NAME, record_id)
                    except Exception:
                        log.exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å ACK –∑–∞–ø–∏—Å—å (id=%s)", record_id)

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={POSITIONS_STATUS_STREAM: ">"},
                count=READ_COUNT,
                block=READ_BLOCK_MS
            )
            if not entries:
                continue

            tasks = []
            for _, records in entries:
                for record_id, data in records:
                    tasks.append(asyncio.create_task(_spawn_task(record_id, data)))

            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ TRADER_CLOSER")
            await asyncio.sleep(0.5)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è closed.*
async def _handle_closed_event(record_id: str, data: Dict[str, Any]) -> bool:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: event –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'closed'
    event = (_as_str(data.get("event")) or "").lower()
    if not event.startswith("closed"):
        log.info("‚è≠Ô∏è CLOSER: –ø—Ä–æ–ø—É—Å–∫ id=%s (event=%s)", record_id, event or "‚Äî")
        return True  # —ç—Ç–æ –Ω–µ –Ω–∞—à —Ç–∏–ø ‚Äî —Å—Ä–∞–∑—É ACK

    position_uid = _as_str(data.get("position_uid"))
    strategy_id  = _as_int(data.get("strategy_id"))
    direction    = (_as_str(data.get("direction")) or "").lower()
    symbol_ev    = _as_str(data.get("symbol"))  # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–¥–∫–∏—Ö —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    ts_ms_str    = _as_str(data.get("ts_ms"))
    ts_iso       = _as_str(data.get("ts"))

    if not position_uid or not strategy_id or direction not in ("long", "short"):
        log.debug("‚ö†Ô∏è closed.*: –Ω–µ–ø–æ–ª–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (id=%s, sid=%s, uid=%s, dir=%s)", record_id, strategy_id, position_uid, direction)
        return False

    # –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏—á–∏–Ω—ã
    reason = _map_close_reason(event)

    # —É–∑–Ω–∞–µ–º symbol –∏–∑ —è–∫–æ—Ä—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à—ë–ª –≤ —Å–æ–±—ã—Ç–∏–∏
    symbol = symbol_ev or await _fetch_symbol_from_anchor(position_uid)

    # –ø–æ–¥—Ç—è–Ω–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –∏–∑ positions_v4 (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º)
    virt_pnl, virt_exit_price, virt_closed_at, virt_close_reason = await _fetch_virtual_close_snapshot(position_uid)

    # –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—à—É –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ —è–∫–æ—Ä—å –µ—Å—Ç—å)
    anchor_exists = await _update_trader_position_closing(
        position_uid=position_uid,
        reason=reason,
        virt_pnl=virt_pnl,
        virt_exit_price=virt_exit_price,
        virt_closed_at=virt_closed_at,
        virt_close_reason=virt_close_reason
    )

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –∫–æ–º–∞–Ω–¥—É ensure_closed –≤ —à–∏–Ω—É –∑–∞—è–≤–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ uid+suffix)
    order_fields = {
        "cmd": "ensure_closed",
        "position_uid": position_uid,
        "strategy_id": str(strategy_id),
        "symbol": symbol or "",  # –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º ‚Äî –ø—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–æ–∑—å–º—ë—Ç –∏–∑ –ë–î
        "direction": direction,
        "reason": reason,
        "order_link_suffix": "close",
        "ts": ts_iso or "",
        "ts_ms": ts_ms_str or "",
    }

    try:
        await infra.redis_client.xadd(ORDER_REQUEST_STREAM, order_fields)
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ensure_closed uid=%s", position_uid)
        return False

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    log.info(
        "‚úÖ CLOSER: ensure_closed ‚Üí sent | uid=%s | sid=%s | sym=%s | event=%s | reason=%s | anchor=%s",
        position_uid, strategy_id, (symbol or "‚Äî"), event, reason, "yes" if anchor_exists else "no"
    )
    return True


# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _parse_ts(ts_ms_str: Optional[str], ts_iso: Optional[str]) -> Optional[datetime]:
    # ts_ms –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ; ts_iso –¥–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ 'Z'
    try:
        if ts_ms_str:
            ms = int(ts_ms_str)
            return datetime.utcfromtimestamp(ms / 1000.0)
    except Exception:
        pass
    try:
        if ts_iso:
            return datetime.fromisoformat(ts_iso.replace("Z", ""))
    except Exception:
        pass
    return None

def _map_close_reason(event: str) -> str:
    # event: 'closed.tp_full_hit' | 'closed.full_sl_hit' | 'closed.sl_tp_hit' | 'closed.reverse_signal_stop' | 'closed.sl_protect_stop'
    if event == "closed.tp_full_hit":
        return "tp_full_hit"
    if event == "closed.full_sl_hit":
        return "full_sl_hit"
    if event == "closed.sl_tp_hit":
        return "sl_tp_hit"
    if event == "closed.reverse_signal_stop":
        return "reverse_signal_stop"
    if event == "closed.sl_protect_stop":
        return "sl_protect_stop"
    # –¥–µ—Ñ–æ–ª—Ç
    return "other"

async def _fetch_symbol_from_anchor(position_uid: str) -> Optional[str]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT symbol
          FROM public.trader_positions_v4
         WHERE position_uid = $1
        """,
        position_uid
    )
    return (row["symbol"] if row and row["symbol"] else None)

async def _fetch_virtual_close_snapshot(position_uid: str) -> tuple[Optional[Decimal], Optional[Decimal], Optional[datetime], Optional[str]]:
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏: –∫ –º–æ–º–µ–Ω—Ç—É closed –∑–∞–ø–∏—Å—å –≤ positions_v4 –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    row = await infra.pg_pool.fetchrow(
        """
        SELECT pnl, exit_price, closed_at, close_reason
          FROM public.positions_v4
         WHERE position_uid = $1
        """,
        position_uid
    )
    if not row:
        return None, None, None, None
    return (
        _as_decimal(row["pnl"]),
        _as_decimal(row["exit_price"]),
        row["closed_at"],
        (row["close_reason"] if row["close_reason"] else None),
    )

async def _update_trader_position_closing(
    *,
    position_uid: str,
    reason: str,
    virt_pnl: Optional[Decimal],
    virt_exit_price: Optional[Decimal],
    virt_closed_at: Optional[datetime],
    virt_close_reason: Optional[str]
) -> bool:
    # —Å–æ–±–∏—Ä–∞–µ–º jsonb-–ø–∞—Ç—á —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏—Ç–æ–≥–∞–º–∏
    virt_patch_items = []
    if virt_pnl is not None:
        virt_patch_items.append(f'"virt_pnl": "{virt_pnl}"')
    if virt_exit_price is not None:
        virt_patch_items.append(f'"virt_exit_price": "{virt_exit_price}"')
    if virt_closed_at is not None:
        virt_patch_items.append(f'"virt_closed_at": "{virt_closed_at.isoformat()}"')
    if virt_close_reason is not None:
        virt_patch_items.append(f'"virt_close_reason": "{virt_close_reason}"')
    virt_patch = "{%s}" % (", ".join(virt_patch_items)) if virt_patch_items else "{}"

    # –∞–ø–¥–µ–π—Ç –∞–≥—Ä–µ–≥–∞—Ç–∞ (–Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ —è–∫–æ—Ä—å –µ—Å—Ç—å)
    res = await infra.pg_pool.execute(
        """
        UPDATE public.trader_positions_v4
           SET status = CASE WHEN status <> 'closed' THEN 'closing' ELSE status END,
               close_reason = COALESCE(close_reason, $2),
               extras = COALESCE(extras, '{}'::jsonb) || $3::jsonb
         WHERE position_uid = $1
        """,
        position_uid, reason, virt_patch
    )
    # asyncpg.execute –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "UPDATE <n>"
    return res.startswith("UPDATE") and (res.split()[-1] != "0")