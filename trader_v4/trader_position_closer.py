# trader_position_closer.py ‚Äî –≤–æ—Ä–∫–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è: —á–∏—Ç–∞–µ—Ç positions_bybit_status(closed.*) ‚Üí –ø–ª–∞–Ω–∏—Ä—É–µ—Ç close-–∑–∞–∫–∞–∑ ‚Üí –∞–ø–¥–µ–π—Ç–∏—Ç –ë–î ‚Üí –∫–ª–∞–¥—ë—Ç –∑–∞–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import json
import asyncio
import logging
import hashlib
from typing import Dict, Tuple

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("TRADER_POS_CLOSER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–æ–≤/CG
POS_STATUS_STREAM = "positions_bybit_status"       # –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π (closed.*)
ORDERS_STREAM = "positions_bybit_orders"           # –∑–∞–¥–∞–Ω–∏—è –¥–ª—è bybit_processor
POS_CLOSE_CG = "trader_pos_close_cg"
POS_CLOSE_CONSUMER = os.getenv("POS_CLOSE_CONSUMER", "pos-close-1")

# üî∏ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Ä–∫–µ—Ä–∞
MAX_PARALLEL_TASKS = int(os.getenv("POS_CLOSE_MAX_TASKS", "200"))
LOCK_TTL_SEC = int(os.getenv("POS_CLOSE_LOCK_TTL", "30"))

# üî∏ ENV: —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏
TRADER_ORDER_MODE = os.getenv("TRADER_ORDER_MODE", "dry_run")  # dry_run | live

# üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º—å—é—Ç–µ–∫—Å—ã –ø–æ –∫–ª—é—á—É (strategy_id, symbol)
_local_locks: Dict[Tuple[int, str], asyncio.Lock] = {}


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
async def run_trader_position_closer():
    redis = infra.redis_client

    # —Å–æ–∑–¥–∞–Ω–∏–µ CG –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (id="$" ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
    try:
        await redis.xgroup_create(POS_STATUS_STREAM, POS_CLOSE_CG, id="$", mkstream=True)
        log.info("üì° –°–æ–∑–¥–∞–Ω–∞ CG %s –¥–ª—è —Å—Ç—Ä–∏–º–∞ %s", POS_CLOSE_CG, POS_STATUS_STREAM)
    except Exception:
        # –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

    # —Å–±—Ä–æ—Å offset CG –Ω–∞ '$' ‚Äî —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    try:
        await redis.execute_command("XGROUP", "SETID", POS_STATUS_STREAM, POS_CLOSE_CG, "$")
        log.info("‚è© CG %s –¥–ª—è %s —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ $ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)", POS_CLOSE_CG, POS_STATUS_STREAM)
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å CG %s –¥–ª—è %s –Ω–∞ $", POS_CLOSE_CG, POS_STATUS_STREAM)

    sem = asyncio.Semaphore(MAX_PARALLEL_TASKS)

    while True:
        try:
            # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
            batch = await redis.xreadgroup(
                groupname=POS_CLOSE_CG,
                consumername=POS_CLOSE_CONSUMER,
                streams={POS_STATUS_STREAM: ">"},
                count=100,
                block=1000,  # –º—Å
            )
            if not batch:
                continue

            # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            tasks = []
            for _, records in batch:
                for entry_id, fields in records:
                    tasks.append(
                        asyncio.create_task(
                            _handle_status_entry(sem, entry_id, fields)
                        )
                    )

            # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞
            await asyncio.gather(*tasks)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ —Å—Ç—Ä–∏–º–∞ %s", POS_STATUS_STREAM)
            await asyncio.sleep(1)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ positions_bybit_status (—Ç–æ–ª—å–∫–æ closed.*)
async def _handle_status_entry(sem: asyncio.Semaphore, entry_id: str, fields: dict):
    async with sem:
        redis = infra.redis_client

        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ closed.*
        event = fields.get("event")
        if not (event and str(event).startswith("closed")):
            try:
                await redis.xack(POS_STATUS_STREAM, POS_CLOSE_CG, entry_id)
                log.info("‚Ü∑ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ %s (id=%s): ACK", event, entry_id)
            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ ACK –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (id=%s)", entry_id)
            return

        # –ø–∞—Ä—Å–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        try:
            sid = int(fields["strategy_id"])
            position_uid = fields["position_uid"]
            symbol = fields["symbol"]
            direction = fields.get("direction", "")
            strategy_type = fields.get("strategy_type", "plain")
            stream_id = fields.get("stream_id") or entry_id  # –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            close_reason = event
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π closed.* (id=%s)", entry_id)
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ ACK, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è, –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥ –≤ –ª–æ–≥–∞—Ö
            try:
                await redis.xack(POS_STATUS_STREAM, POS_CLOSE_CG, entry_id)
            except Exception:
                pass
            return

        # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É (strategy_id, symbol)
        key = (sid, symbol)
        lock = _local_locks.setdefault(key, asyncio.Lock())

        async with lock:
            # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∑–∞–º–æ–∫ –≤ Redis
            gate_key = f"tv4:gate:{sid}:{symbol}"
            owner = f"{POS_CLOSE_CONSUMER}-{entry_id}"
            if not await _acquire_dist_lock(gate_key, owner, LOCK_TTL_SEC):
                # –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–º–æ–∫ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ ACK
                for _ in range(10):
                    await asyncio.sleep(0.2)
                    if await _acquire_dist_lock(gate_key, owner, LOCK_TTL_SEC):
                        break
                else:
                    log.info("‚è≥ –ù–µ –≤–∑—è—Ç –∑–∞–º–æ–∫ %s ‚Äî –æ—Ç–ª–æ–∂–µ–Ω–æ (id=%s)", gate_key, entry_id)
                    return

            try:
                # –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ position_uid
                row = await infra.pg_pool.fetchrow(
                    """
                    SELECT id, strategy_id, symbol, ext_status, order_mode
                    FROM trader_positions_log
                    WHERE position_uid = $1
                    """,
                    position_uid,
                )

                # –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ ACK
                if not row:
                    await _update_signal_status(stream_id, "position_not_found", "no trader_positions_log row for position_uid; skipped exchange close")
                    await redis.xack(POS_STATUS_STREAM, POS_CLOSE_CG, entry_id)
                    log.info("‚ùé position_not_found ACK (sid=%s %s %s id=%s)", sid, symbol, direction, entry_id)
                    return

                ext_status = (row["ext_status"] or "").strip()
                order_mode = (row["order_mode"] or TRADER_ORDER_MODE).strip()

                # –µ—Å–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ ACK
                if ext_status == "closed":
                    await _update_signal_status(stream_id, "already_closed", "arrived after exchange close")
                    await redis.xack(POS_STATUS_STREAM, POS_CLOSE_CG, entry_id)
                    log.info("üü¢ already_closed ACK (sid=%s %s %s id=%s)", sid, symbol, direction, entry_id)
                    return

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∑–∞–Ω—è—Ç–æ—Å—Ç–∏¬ª –ø–æ –ë–î (—Ä–∞–±–æ—á–∏–µ —Å—Ç–∞—Ç—É—Å—ã)
                if await _is_busy_in_db(sid, symbol):
                    log.info("üöß –ö–ª—é—á (sid=%s,symbol=%s) –∑–∞–Ω—è—Ç –ø–æ –ë–î ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é (id=%s)", sid, symbol, entry_id)
                    return  # –∑–∞–º–æ–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å TTL, –∑–∞–ø–∏—Å—å –Ω–µ ACK ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –ø–æ–∑–∂–µ

                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º order_link_id (<=36 —Å–∏–º–≤), –Ω–∞ –æ—Å–Ω–æ–≤–µ stream_id
                order_link_id = _make_order_link_id(stream_id)

                # –∞–ø–¥–µ–π—Ç existing-—Å—Ç—Ä–æ–∫–∏: –ø–ª–∞–Ω–∏—Ä—É–µ–º close
                await _update_tpl_planned_close(
                    position_uid=position_uid,
                    order_link_id=order_link_id,
                    note=f"close planned: reason={close_reason}",
                )

                # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload)
                orders_stream_id = await _publish_close_task(
                    order_link_id=order_link_id,
                    position_uid=position_uid,
                    strategy_id=sid,
                    symbol=symbol,
                    order_mode=order_mode,
                    source_stream_id=stream_id,
                    close_reason=close_reason,
                )

                # –∞–ø–¥–µ–π—Ç—ã queued –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–≥–Ω–∞–ª–∞
                await _mark_queued_and_update_signal_close(
                    position_uid=position_uid,
                    orders_stream_id=orders_stream_id,
                    note=f"close planned & queued: reason={close_reason}",
                    processing_status="planned",
                    source_stream_id=stream_id,
                )

                # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ACK
                await redis.xack(POS_STATUS_STREAM, POS_CLOSE_CG, entry_id)
                log.info("‚úÖ CLOSE planned & queued (sid=%s %s %s) [id=%s]", sid, symbol, direction, entry_id)

            except Exception:
                log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è sid=%s symbol=%s (id=%s)", sid, symbol, entry_id)
                # –Ω–µ ACK ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è —Ä–µ—Ç—Ä–∞–µ–º
            finally:
                # –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∑–∞–º–∫–∞
                await _release_dist_lock(gate_key, owner)


# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∑–∞–Ω—è—Ç–æ—Å—Ç–∏¬ª –ø–æ –±–∞–∑–µ –¥–ª—è (sid, symbol)
async def _is_busy_in_db(strategy_id: int, symbol: str) -> bool:
    # –∑–∞–Ω—è—Ç–æ—Å—Ç—å: —Å—Ç–∞—Ç—É—Å –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞–±–æ—á–∏—Ö —ç—Ç–∞–ø–æ–≤ (–æ—á–µ—Ä–µ–¥—å/–æ—Ç–ø—Ä–∞–≤–∫–∞/–æ–±—Ä–∞–±–æ—Ç–∫–∞)
    row = await infra.pg_pool.fetchrow(
        """
        SELECT 1
        FROM trader_positions_log
        WHERE strategy_id = $1
          AND symbol = $2
          AND status IN ('queued','processing','sent')
        LIMIT 1
        """,
        strategy_id,
        symbol,
    )
    return bool(row)


# üî∏ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ order_link_id (<=36) –Ω–∞ –æ—Å–Ω–æ–≤–µ stream_id
def _make_order_link_id(stream_id: str) -> str:
    base = f"tv4-{stream_id}"
    if len(base) <= 36:
        return base
    # fallback: –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à (sha1) –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ + "tv4-"
    short = hashlib.sha1(stream_id.encode("utf-8")).hexdigest()[:32]
    return f"tv4-{short}"  # –¥–ª–∏–Ω–∞ 36


# üî∏ –ê–ø–¥–µ–π—Ç planned (close) –≤ trader_positions_log –ø–æ position_uid
async def _update_tpl_planned_close(
    *,
    position_uid: str,
    order_link_id: str,
    note: str,
):
    async with infra.pg_pool.acquire() as conn:
        await conn.execute(
            """
            UPDATE trader_positions_log
            SET status       = 'planned',
                order_link_id= $2,
                updated_at   = now(),
                note         = $3
            WHERE position_uid = $1
            """,
            position_uid,
            order_link_id,
            note,
        )
        log.info("üìù trader_positions_log planned(close): uid=%s, order_link_id=%s", position_uid, order_link_id)


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è close-–∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload)
async def _publish_close_task(
    *,
    order_link_id: str,
    position_uid: str,
    strategy_id: int,
    symbol: str,
    order_mode: str,
    source_stream_id: str,
    close_reason: str,
) -> str:
    redis = infra.redis_client

    payload = {
        "op": "close",
        "order_link_id": order_link_id,
        "position_uid": position_uid,
        "strategy_id": strategy_id,
        "symbol": symbol,
        "order_mode": order_mode,             # dry_run | live
        "source_stream_id": source_stream_id, # –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        "close_reason": close_reason,
    }

    orders_stream_id = await redis.xadd(ORDERS_STREAM, {"data": json.dumps(payload)})
    log.info("üì§ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ %s (close): %s", ORDERS_STREAM, payload)
    return orders_stream_id


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ queued –∏ –∞–ø–¥–µ–π—Ç trader_signals (–ø–æ stream_id –∑–∞–∫—Ä—ã—Ç–∏—è)
async def _mark_queued_and_update_signal_close(
    *,
    position_uid: str,
    orders_stream_id: str,
    note: str,
    processing_status: str,
    source_stream_id: str,
):
    async with infra.pg_pool.acquire() as conn:
        # –∞–ø–¥–µ–π—Ç –Ω–∞—à–µ–π —Å—Ç—Ä–æ–∫–∏
        await conn.execute(
            """
            UPDATE trader_positions_log
            SET status          = 'queued',
                orders_stream_id= $2,
                queued_at       = now(),
                updated_at      = now(),
                note            = $3
            WHERE position_uid = $1
            """,
            position_uid,
            orders_stream_id,
            note,
        )
        # –∞–ø–¥–µ–π—Ç trader_signals –ø–æ stream_id –∑–∞–∫—Ä—ã—Ç–∏—è
        await conn.execute(
            """
            UPDATE trader_signals
            SET processing_status = $1,
                processed_at      = now(),
                processing_note   = $3
            WHERE stream_id = $2
            """,
            processing_status,
            source_stream_id,
            note,
        )
        log.info("‚úÖ queued(close) & journal updated: position_uid=%s, stream_id=%s", position_uid, source_stream_id)


# üî∏ –ê–ø–¥–µ–π—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ trader_signals –ø–æ stream_id
async def _update_signal_status(stream_id: str, processing_status: str, note: str):
    async with infra.pg_pool.acquire() as conn:
        await conn.execute(
            """
            UPDATE trader_signals
            SET processing_status = $1,
                processed_at      = now(),
                processing_note   = $3
            WHERE stream_id = $2
            """,
            processing_status,
            stream_id,
            note,
        )


# üî∏ –†–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∑–∞–º–æ–∫ (SET NX EX)
async def _acquire_dist_lock(key: str, value: str, ttl: int) -> bool:
    try:
        ok = await infra.redis_client.set(key, value, ex=ttl, nx=True)
        return bool(ok)
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ acquire lock %s", key)
        return False


# üî∏ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∑–∞–º–∫–∞ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (Lua check-and-del)
async def _release_dist_lock(key: str, value: str):
    # —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏
    if not key:
        return
    try:
        lua = """
        if redis.call('get', KEYS[1]) == ARGV[1] then
            return redis.call('del', KEYS[1])
        else
            return 0
        end
        """
        await infra.redis_client.eval(lua, 1, key, value)
    except Exception:
        # –º—è–≥–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –∑–∞–º–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å—Ç–µ—á—ë—Ç –ø–æ TTL
        log.debug("lock release fallback (key=%s)", key)