# bybit_sync.py ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WS-—Å–∏–Ω–∫ Bybit (read-only): auth + –ø–æ–¥–ø–∏—Å–∫–∏ wallet/position + –∞–≤—Ç–æ-reconnect

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import hmac
import time
import json
import hashlib
import asyncio
import logging
import websockets

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("BYBIT_SYNC")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ (mainnet)
API_KEY = os.getenv("BYBIT_API_KEY", "")
API_SECRET = os.getenv("BYBIT_API_SECRET", "")
WS_PRIVATE = os.getenv("BYBIT_WS_PRIVATE", "wss://stream.bybit.com/v5/private")

PING_INTERVAL_SEC = 20.0      # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
RECONNECT_DELAY_SEC = 3.0     # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ (–¥–µ—Ä–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WS + –ø–æ–¥–ø–∏—Å–∫–∏)
async def run_bybit_private_ws_sync_loop():
    if not API_KEY or not API_SECRET:
        log.info("BYBIT_SYNC: –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã (BYBIT_API_KEY/SECRET) ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞")
        return

    log.info("BYBIT_SYNC: —Å—Ç–∞—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WS-—Å–∏–Ω–∫–∞ %s", WS_PRIVATE)

    while True:
        try:
            # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É WS
            async with websockets.connect(WS_PRIVATE, ping_interval=None, close_timeout=5) as ws:
                # auth
                expires = int((time.time() + 5) * 1000)
                sign_payload = f"GET/realtime{expires}"
                signature = hmac.new(API_SECRET.encode(), sign_payload.encode(), hashlib.sha256).hexdigest()
                await ws.send(json.dumps({"op": "auth", "args": [API_KEY, expires, signature]}))
                auth_resp = json.loads(await ws.recv())
                log.info("BYBIT_SYNC auth: %s", auth_resp)

                # –ø–æ–¥–ø–∏—Å–∫–∏: wallet + position
                await ws.send(json.dumps({"op": "subscribe", "args": ["wallet", "position"]}))
                sub_resp = json.loads(await ws.recv())
                log.info("BYBIT_SYNC subscribe ack: %s", sub_resp)

                # —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–¥–ª—è –ø–∏–Ω–≥–æ–≤)
                last_io = time.monotonic()
                while True:
                    try:
                        # –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        msg_raw = await asyncio.wait_for(ws.recv(), timeout=PING_INTERVAL_SEC)
                        last_io = time.monotonic()
                        _handle_ws_message(msg_raw)
                    except asyncio.TimeoutError:
                        # —Ç–∏—à–∏–Ω–∞ ‚Äî —à–ª—ë–º ping
                        await ws.send(json.dumps({"op": "ping"}))
                        log.info("BYBIT_SYNC ‚Üí ping")
                        # –∂–¥—ë–º –æ—Ç–≤–µ—Ç (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞–¥–æ–ª–≥–æ)
                        try:
                            pong_raw = await asyncio.wait_for(ws.recv(), timeout=5)
                            _handle_ws_message(pong_raw)
                            last_io = time.monotonic()
                        except asyncio.TimeoutError:
                            log.info("BYBIT_SYNC: –Ω–µ—Ç pong ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                            raise ConnectionError("pong timeout")

        except Exception:
            log.exception("BYBIT_SYNC: —Å–±–æ–π –∫–∞–Ω–∞–ª–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %.1fs", RECONNECT_DELAY_SEC)
            await asyncio.sleep(RECONNECT_DELAY_SEC)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WS-—Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
def _handle_ws_message(msg_raw: str):
    try:
        msg = json.loads(msg_raw)
    except Exception:
        log.info("BYBIT_SYNC recv (raw): %s", msg_raw)
        return

    # —Å–æ–±—ã—Ç–∏—è —É—Ä–æ–≤–Ω—è op (pong/subscribe/auth/‚Ä¶)
    if "op" in msg and "topic" not in msg:
        log.info("BYBIT_SYNC recv op: %s", msg)
        return

    # —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–æ–ø–∏–∫–∞–º (wallet / position / ‚Ä¶)
    topic = msg.get("topic")
    data = msg.get("data")
    ts = msg.get("ts")
    if topic == "wallet":
        # —Ñ–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç/–∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—ã–≤–µ–¥–µ–º –∫—Ä–∞—Ç–∫–æ —Ä–∞–∑–º–µ—Ä –∏ –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É
        coins = data if isinstance(data, list) else []
        head = coins[0] if coins else {}
        log.info("BYBIT_SYNC wallet: items=%d head=%s ts=%s", len(coins), head, ts)
    elif topic == "position":
        # —Ñ–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π ‚Äî –≤—ã–≤–µ–¥–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–µ—Ä–≤—É—é
        items = data if isinstance(data, list) else []
        head = items[0] if items else {}
        log.info("BYBIT_SYNC position: items=%d head=%s ts=%s", len(items), head, ts)
    else:
        # –ø—Ä–æ—á–∏–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–µ–º—ã
        log.info("BYBIT_SYNC recv topic=%s: %s", topic, msg)