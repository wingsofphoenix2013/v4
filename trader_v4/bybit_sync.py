# bybit_sync.py ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WS-—Å–∏–Ω–∫ Bybit (read-only + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤): auth + wallet/position/order/execution + –∞–≤—Ç–æ-reconnect
# + –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π REST-—Ä–µ—Å–∏–Ω–∫ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π (linear)
# + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–Ω—ã—Ö pong/ping –ª–æ–≥–æ–≤ –∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ë–î (trader_position_orders, –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ trader_positions)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import hmac
import time
import json
import hashlib
import asyncio
import logging
from decimal import Decimal
from datetime import datetime
from typing import Any, Dict, Optional, Tuple

import websockets
import httpx

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("BYBIT_SYNC")

# üî∏ –ö–æ–Ω—Ñ–∏–≥ (mainnet)
API_KEY = os.getenv("BYBIT_API_KEY", "")
API_SECRET = os.getenv("BYBIT_API_SECRET", "")
WS_PRIVATE = os.getenv("BYBIT_WS_PRIVATE", "wss://stream.bybit.com/v5/private")
BASE_URL = os.getenv("BYBIT_BASE_URL", "https://api.bybit.com")
RECV_WINDOW = os.getenv("BYBIT_RECV_WINDOW", "5000")          # –º—Å
ACCOUNT_TYPE = os.getenv("BYBIT_ACCOUNT_TYPE", "UNIFIED")     # UNIFIED | CONTRACT | SPOT
CATEGORY = "linear"                                           # –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã USDT-perp

PING_INTERVAL_SEC = 20.0      # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
RECONNECT_DELAY_SEC = 3.0     # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—É–º–Ω—ã—Ö –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∏–Ω–≥–∏/–ø–æ–Ω–≥–∏ —Ç–∏—Ö–æ)
LOG_PONGS = os.getenv("BYBIT_LOG_PONGS", "false").lower() == "true"
LOG_PINGS = os.getenv("BYBIT_LOG_PINGS", "false").lower() == "true"


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WS (–¥–µ—Ä–∂–∏–º –∫–∞–Ω–∞–ª + –ø–æ–¥–ø–∏—Å–∫–∏)
async def run_bybit_private_ws_sync_loop():
    if not API_KEY or not API_SECRET:
        log.info("BYBIT_SYNC: –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã (BYBIT_API_KEY/SECRET) ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞")
        return

    log.info("BYBIT_SYNC: —Å—Ç–∞—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WS-—Å–∏–Ω–∫–∞ %s", WS_PRIVATE)

    while True:
        try:
            async with websockets.connect(WS_PRIVATE, ping_interval=None, close_timeout=5) as ws:
                # auth
                expires = int((time.time() + 5) * 1000)
                sign_payload = f"GET/realtime{expires}"
                signature = hmac.new(API_SECRET.encode(), sign_payload.encode(), hashlib.sha256).hexdigest()
                await ws.send(json.dumps({"op": "auth", "args": [API_KEY, expires, signature]}))
                auth_resp = json.loads(await ws.recv())
                log.info("BYBIT_SYNC auth: %s", auth_resp)

                # –ø–æ–¥–ø–∏—Å–∫–∏: wallet + position + order + execution
                await ws.send(json.dumps({"op": "subscribe", "args": ["wallet", "position", "order", "execution"]}))
                sub_resp = json.loads(await ws.recv())
                log.info("BYBIT_SYNC subscribe ack: %s", sub_resp)

                # —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–¥–ª—è –ø–∏–Ω–≥–æ–≤)
                while True:
                    try:
                        msg_raw = await asyncio.wait_for(ws.recv(), timeout=PING_INTERVAL_SEC)
                        await _handle_ws_message(msg_raw)
                    except asyncio.TimeoutError:
                        await ws.send(json.dumps({"op": "ping"}))
                        if LOG_PINGS:
                            log.debug("BYBIT_SYNC ‚Üí ping")
                        try:
                            pong_raw = await asyncio.wait_for(ws.recv(), timeout=5)
                            await _handle_ws_message(pong_raw)
                        except asyncio.TimeoutError:
                            log.info("BYBIT_SYNC: –Ω–µ—Ç pong ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                            raise ConnectionError("pong timeout")

        except Exception:
            log.exception("BYBIT_SYNC: —Å–±–æ–π –∫–∞–Ω–∞–ª–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %.1fs", RECONNECT_DELAY_SEC)
            await asyncio.sleep(RECONNECT_DELAY_SEC)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WS-—Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î)
async def _handle_ws_message(msg_raw: str):
    try:
        msg = json.loads(msg_raw)
    except Exception:
        log.debug("BYBIT_SYNC recv (raw): %s", msg_raw)
        return

    # —Å–ª—É–∂–µ–±–Ω—ã–µ op-—Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ topic)
    if "op" in msg and "topic" not in msg:
        op = str(msg.get("op") or "").lower()

        # pong ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∏—Ö–æ
        if op == "pong":
            if LOG_PONGS:
                log.debug("BYBIT_SYNC recv pong")
            return

        # ping ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∏—Ö–æ
        if op == "ping":
            if LOG_PINGS:
                log.debug("BYBIT_SYNC recv ping")
            return

        # auth/subscribe ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ INFO
        if op in ("auth", "subscribe"):
            log.info("BYBIT_SYNC recv op: %s", msg)
            return

        # –ø—Ä–æ—á–∏–µ ‚Äî debug
        log.debug("BYBIT_SYNC recv op: %s", msg)
        return

    # —Ç–æ–ø–∏–∫–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    topic = msg.get("topic")
    data = msg.get("data")
    ts = msg.get("ts")

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    items = data if isinstance(data, list) else ([data] if isinstance(data, dict) else [])

    if topic == "wallet":
        head = items[0] if items else {}
        log.info("BYBIT_SYNC wallet: items=%d head=%s ts=%s", len(items), head, ts)
        return

    if topic == "position":
        head = items[0] if items else {}
        log.info("BYBIT_SYNC position: items=%d head=%s ts=%s", len(items), head, ts)
        return

    if topic == "order":
        await _handle_order_topic(items, ts)
        return

    if topic == "execution":
        await _handle_execution_topic(items, ts)
        return

    # –ø—Ä–æ—á–µ–µ
    log.debug("BYBIT_SYNC recv topic=%s: %s", topic, msg)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞ 'order' ‚Äî —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤ (accepted/partially_filled/filled/‚Ä¶)
async def _handle_order_topic(items: list, ts: Any):
    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ–≥ –≥–æ–ª–æ–≤—ã
    head = items[0] if items else {}
    log.debug("BYBIT_SYNC order: items=%d head_keys=%s ts=%s", len(items), list(head.keys()) if head else [], ts)

    for it in items:
        try:
            order_link_id = _as_str(it.get("orderLinkId"))
            order_id = _as_str(it.get("orderId"))
            symbol = _as_str(it.get("symbol"))
            side = (_as_str(it.get("side")) or "").upper() or None
            otype = (_as_str(it.get("orderType")) or "").lower() or None
            tif = (_as_str(it.get("timeInForce")) or "GTC").upper()
            reduce_only = str(it.get("reduceOnly")).lower() == "true" if it.get("reduceOnly") is not None else None
            order_status_raw = _as_str(it.get("orderStatus"))  # e.g. New/Created/PartiallyFilled/Filled/Cancelled/Rejected/Expired
            ext_status = _map_order_status(order_status_raw)

            price = _as_decimal(it.get("price"))  # –∑–∞—è–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è limit
            # –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ order-—Å–æ–±—ã—Ç–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)
            cum_exec_qty = _as_decimal(it.get("cumExecQty"))
            avg_price = _as_decimal(it.get("avgPrice"))
            exec_fee = _as_decimal(it.get("cumExecFee"))  # –æ–±—ã—á–Ω–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            updated_ms = _as_int(it.get("updatedTime")) or _as_int(it.get("updatedTimeNs"))
            updated_at = _ts_from_ms(updated_ms) if updated_ms else None

            # –Ω–∞–π–¥—ë–º —Å—Ç—Ä–æ–∫—É –æ—Ä–¥–µ—Ä–∞ –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ order_link_id, –∏–Ω–∞—á–µ –ø–æ order_id
            tpo = await _find_tpo(order_link_id, order_id)
            if not tpo:
                # –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ª–æ–≥ –∏ –¥–∞–ª—å—à–µ
                log.debug("BYBIT_SYNC order: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (linkId=%s orderId=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫", order_link_id, order_id)
                continue

            tpo_id, position_uid, kind = tpo["id"], tpo["position_uid"], _as_str(tpo["kind"])

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ tpo: order_id, ext_status, filled_qty/avg_fill_price (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏), last_ext_event_at
            await _update_tpo_on_order_event(
                tpo_id=tpo_id,
                order_id=order_id or None,
                ext_status=ext_status,
                filled_qty=cum_exec_qty,
                avg_fill_price=avg_price,
                exec_fee=None,  # –∫–æ–º–∏—Å—Å–∏—é –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –∏–∑ execution-—Å–æ–±—ã—Ç–∏–π
                last_ts=updated_at
            )

            # –µ—Å–ª–∏ —ç—Ç–æ entry ‚Äî –æ–±–Ω–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ trader_positions
            if kind == "entry":
                await _update_trader_positions_entry(
                    position_uid=position_uid,
                    exchange="BYBIT",
                    order_link_id=order_link_id or None,
                    order_id=order_id or None,
                    ext_status=ext_status,
                    filled_qty=cum_exec_qty,
                    avg_fill_price=avg_price,
                    exec_fee=None,
                    last_ts=updated_at
                )

        except Exception:
            log.exception("BYBIT_SYNC order: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: %s", it)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞ 'execution' ‚Äî —Å–¥–µ–ª–∫–∏ (fills) –ø–æ –æ—Ä–¥–µ—Ä–∞–º
async def _handle_execution_topic(items: list, ts: Any):
    head = items[0] if items else {}
    log.debug("BYBIT_SYNC execution: items=%d head_keys=%s ts=%s", len(items), list(head.keys()) if head else [], ts)

    for it in items:
        try:
            order_link_id = _as_str(it.get("orderLinkId"))
            order_id = _as_str(it.get("orderId"))
            exec_qty = _as_decimal(it.get("execQty")) or Decimal("0")
            exec_price = _as_decimal(it.get("execPrice"))
            exec_fee = _as_decimal(it.get("execFee")) or Decimal("0")
            exec_time_ms = _as_int(it.get("execTime")) or _as_int(it.get("execTimeNs"))
            exec_at = _ts_from_ms(exec_time_ms) if exec_time_ms else None

            if exec_qty <= 0:
                continue

            # –Ω–∞–π–¥—ë–º –Ω–∞—à –æ—Ä–¥–µ—Ä
            tpo = await _find_tpo(order_link_id, order_id)
            if not tpo:
                log.debug("BYBIT_SYNC execution: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (linkId=%s orderId=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫", order_link_id, order_id)
                continue

            tpo_id, position_uid, kind = tpo["id"], tpo["position_uid"], _as_str(tpo["kind"])
            prev_filled = _as_decimal(tpo.get("filled_qty")) or Decimal("0")
            prev_avg = _as_decimal(tpo.get("avg_fill_price")) or None
            prev_fee = _as_decimal(tpo.get("exec_fee")) or Decimal("0")

            # –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            new_filled = prev_filled + exec_qty
            new_avg = exec_price if not prev_avg or prev_filled == 0 else ((prev_avg * prev_filled) + (exec_price * exec_qty)) / new_filled
            new_fee = prev_fee + exec_fee

            # –æ–±–Ω–æ–≤–∏–º tpo: filled_qty, avg_fill_price, exec_fee, last_ext_event_at
            await _update_tpo_on_execution(
                tpo_id=tpo_id,
                filled_qty=new_filled,
                avg_fill_price=new_avg,
                exec_fee=new_fee,
                last_ts=exec_at
            )

            # –µ—Å–ª–∏ —ç—Ç–æ entry ‚Äî –ø—Ä–æ—Ç–∞—â–∏–º –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ trader_positions
            if kind == "entry":
                await _update_trader_positions_entry(
                    position_uid=position_uid,
                    exchange="BYBIT",
                    order_link_id=order_link_id or None,
                    order_id=order_id or None,
                    ext_status=None,  # —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω order-—Å–æ–±—ã—Ç–∏–µ–º)
                    filled_qty=new_filled,
                    avg_fill_price=new_avg,
                    exec_fee=new_fee,
                    last_ts=exec_at
                )

        except Exception:
            log.exception("BYBIT_SYNC execution: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: %s", it)


# üî∏ –ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î –ø–æ order_link_id –ª–∏–±–æ order_id
async def _find_tpo(order_link_id: Optional[str], order_id: Optional[str]) -> Optional[Dict[str, Any]]:
    if order_link_id:
        row = await infra.pg_pool.fetchrow(
            """
            SELECT id, position_uid, kind, order_link_id, order_id, filled_qty, avg_fill_price, exec_fee
            FROM public.trader_position_orders
            WHERE order_link_id = $1
            """,
            order_link_id
        )
        if row:
            return dict(row)
    if order_id:
        row = await infra.pg_pool.fetchrow(
            """
            SELECT id, position_uid, kind, order_link_id, order_id, filled_qty, avg_fill_price, exec_fee
            FROM public.trader_position_orders
            WHERE order_id = $1
            """,
            order_id
        )
        if row:
            return dict(row)
    return None


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tpo –ø–æ order-—Å–æ–±—ã—Ç–∏—é
async def _update_tpo_on_order_event(
    *,
    tpo_id: int,
    order_id: Optional[str],
    ext_status: Optional[str],
    filled_qty: Optional[Decimal],
    avg_fill_price: Optional[Decimal],
    exec_fee: Optional[Decimal],
    last_ts: Optional[datetime],
) -> None:
    await infra.pg_pool.execute(
        """
        UPDATE public.trader_position_orders
        SET
            order_id = COALESCE(order_id, $2),
            ext_status = COALESCE($3, ext_status),
            filled_qty = COALESCE($4, filled_qty),
            avg_fill_price = COALESCE($5, avg_fill_price),
            -- –∫–æ–º–∏—Å—Å–∏—é –∏–∑ order-—Å–æ–±—ã—Ç–∏–π –Ω–µ —Å—É–º–º–∏—Ä—É–µ–º (–∫–æ–ø–∏–º –≤ execution)
            last_ext_event_at = COALESCE($6, last_ext_event_at)
        WHERE id = $1
        """,
        tpo_id, order_id, ext_status, filled_qty, avg_fill_price, last_ts
    )


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tpo –ø–æ execution-—Å–æ–±—ã—Ç–∏—é (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
async def _update_tpo_on_execution(
    *,
    tpo_id: int,
    filled_qty: Decimal,
    avg_fill_price: Optional[Decimal],
    exec_fee: Decimal,
    last_ts: Optional[datetime],
) -> None:
    await infra.pg_pool.execute(
        """
        UPDATE public.trader_position_orders
        SET
            filled_qty = $2,
            avg_fill_price = $3,
            exec_fee = $4,
            last_ext_event_at = COALESCE($5, last_ext_event_at)
        WHERE id = $1
        """,
        tpo_id, filled_qty, avg_fill_price, exec_fee, last_ts
    )


# üî∏ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ trader_positions –¥–ª—è entry-–æ—Ä–¥–µ—Ä–∞
async def _update_trader_positions_entry(
    *,
    position_uid: str,
    exchange: Optional[str],
    order_link_id: Optional[str],
    order_id: Optional[str],
    ext_status: Optional[str],
    filled_qty: Optional[Decimal],
    avg_fill_price: Optional[Decimal],
    exec_fee: Optional[Decimal],
    last_ts: Optional[datetime],
) -> None:
    # —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∞—Å—Ç–∏ SET —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    sets = []
    vals = []
    if exchange is not None:
        sets.append("exchange = $%d" % (len(vals) + 1)); vals.append(exchange)
    if order_link_id is not None:
        sets.append("order_link_id = COALESCE(order_link_id, $%d)" % (len(vals) + 1)); vals.append(order_link_id)
    if order_id is not None:
        sets.append("order_id = COALESCE(order_id, $%d)" % (len(vals) + 1)); vals.append(order_id)
    if ext_status is not None:
        sets.append("ext_status = $%d" % (len(vals) + 1)); vals.append(ext_status)
    if filled_qty is not None:
        sets.append("filled_qty = $%d" % (len(vals) + 1)); vals.append(filled_qty)
    if avg_fill_price is not None:
        sets.append("avg_fill_price = $%d" % (len(vals) + 1)); vals.append(avg_fill_price)
    if exec_fee is not None:
        sets.append("exec_fee = $%d" % (len(vals) + 1)); vals.append(exec_fee)
    if last_ts is not None:
        sets.append("last_ext_event_at = $%d" % (len(vals) + 1)); vals.append(last_ts)

    if not sets:
        return

    query = f"""
        UPDATE public.trader_positions
        SET {', '.join(sets)}
        WHERE position_uid = ${len(vals)+1}
    """
    vals.append(position_uid)
    await infra.pg_pool.execute(query, *vals)

# üî∏ –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Bybit ‚Üí –Ω–∞—à–∏ ext_status
def _map_order_status(s: str) -> Optional[str]:
    s = (s or "").strip().lower()
    if not s:
        return None
    # Bybit v5: New/Created/PartiallyFilled/Filled/Cancelled/Rejected/Expired/Deactivated/Untriggered/Triggered
    if s in ("new", "created"):
        return "accepted"
    if s in ("partiallyfilled", "partially_filled"):
        return "partially_filled"
    if s == "filled":
        return "filled"
    if s in ("cancelled", "canceled"):
        return "canceled"
    if s == "rejected":
        return "rejected"
    if s in ("expired", "deactivated"):
        return "expired"
    if s in ("untriggered", "triggered"):
        return "accepted"   # —É—Å–ª–æ–≤–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω/–æ–∂–∏–¥–∞–µ—Ç/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    return None  # –≤–º–µ—Å—Ç–æ "–∫–∞–∫ –µ—Å—Ç—å" ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º ext_status –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π REST-—Ä–µ—Å–∏–Ω–∫ (–±–∞–ª–∞–Ω—Å + –ø–æ–∑–∏—Ü–∏–∏ linear)
async def run_bybit_rest_resync_job():
    if not API_KEY or not API_SECRET:
        log.info("BYBIT_RESYNC: –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã (BYBIT_API_KEY/SECRET) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return

    try:
        bal = await _get_wallet_balance(ACCOUNT_TYPE)
        _log_balance_summary(bal)
    except Exception:
        log.exception("BYBIT_RESYNC: wallet-balance FAILED")

    try:
        pos = await _get_positions_list()
        _log_positions_summary(pos)
    except Exception:
        log.exception("BYBIT_RESYNC: position list FAILED")


# üî∏ REST-–ø–æ–º–æ—â–Ω–∏–∫–∏
def _rest_sign(timestamp_ms: int, query_or_body: str) -> str:
    # timestamp + api_key + recv_window + (queryString|jsonBodyString)
    payload = f"{timestamp_ms}{API_KEY}{RECV_WINDOW}{query_or_body}"
    return hmac.new(API_SECRET.encode(), payload.encode(), hashlib.sha256).hexdigest()

async def _get_wallet_balance(account_type: str) -> dict:
    query = f"accountType={account_type}"
    url = f"{BASE_URL}/v5/account/wallet-balance?{query}"
    ts = int(time.time() * 1000)
    sign = _rest_sign(ts, query)
    headers = {
        "X-BAPI-API-KEY": API_KEY,
        "X-BAPI-TIMESTAMP": str(ts),
        "X-BAPI-RECV-WINDOW": RECV_WINDOW,
        "X-BAPI-SIGN": sign,
    }
    async with httpx.AsyncClient(timeout=10) as client:
        r = await client.get(url, headers=headers)
        r.raise_for_status()
        return r.json()

async def _get_positions_list() -> dict:
    # —Å–∏–º–≤–æ–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –≤–µ—Ä–Ω—ë—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    query = f"category={CATEGORY}"
    url = f"{BASE_URL}/v5/position/list?{query}"
    ts = int(time.time() * 1000)
    sign = _rest_sign(ts, query)
    headers = {
        "X-BAPI-API-KEY": API_KEY,
        "X-BAPI-TIMESTAMP": str(ts),
        "X-BAPI-RECV-WINDOW": RECV_WINDOW,
        "X-BAPI-SIGN": sign,
    }
    async with httpx.AsyncClient(timeout=10) as client:
        r = await client.get(url, headers=headers)
        r.raise_for_status()
        return r.json()


# üî∏ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã —Å–≤–æ–¥–æ–∫ –≤ –ª–æ–≥
def _log_balance_summary(bal: dict):
    acc = (bal.get("result") or {}).get("list") or []
    if not acc:
        log.info("BYBIT_RESYNC balance: <empty>")
        return
    acc0 = acc[0]
    log.info("BYBIT_RESYNC balance: totalEquity=%s totalWallet=%s perpUPL=%s",
             acc0.get("totalEquity"), acc0.get("totalWalletBalance"), acc0.get("totalPerpUPL"))
    coins = acc0.get("coin") or []
    head = coins[0] if coins else {}
    log.info("BYBIT_RESYNC coins: items=%d head=%s", len(coins), head)

def _log_positions_summary(pos: dict):
    lst = (pos.get("result") or {}).get("list") or []
    head = lst[0] if lst else {}
    log.info("BYBIT_RESYNC positions: items=%d head=%s", len(lst), head)


# üî∏ –£—Ç–∏–ª–∏—Ç—ã
def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_int(v: Any) -> Optional[int]:
    try:
        s = _as_str(v)
        return int(s) if s != "" else None
    except Exception:
        return None

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _ts_from_ms(ms: Optional[int]) -> Optional[datetime]:
    if ms is None:
        return None
    try:
        # –Ω–∞–∏–≤–Ω–æ–µ UTC-–≤—Ä–µ–º—è (–∫–∞–∫ –≤ –ë–î)
        return datetime.utcfromtimestamp(ms / 1000.0)
    except Exception:
        return None