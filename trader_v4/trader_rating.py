# trader_rating.py ‚Äî –ø–æ—á–∞—Å–æ–≤–æ–π —Ä–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º market_mirrow (trader_watcher)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
from decimal import Decimal
from typing import Dict, List, Tuple, Any

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
log = logging.getLogger("TRADER_RATING")

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
current_group_winners: Dict[int, int] = {}


# üî∏ –ü—É–±–ª–∏—á–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–∫–æ–ø–∏—è —Å–ª–æ–≤–∞—Ä—è)
def get_current_group_winners() -> Dict[int, int]:
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–Ω–∞—Ä—É–∂–∏
    return dict(current_group_winners)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å –∏–∑ main)
async def run_trader_rating_job():
    # —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = await _fetch_candidates()
    if not candidates:
        log.info("‚ÑπÔ∏è TRADER_RATING: –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç (enabled & trader_watcher & market_mirrow) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return

    # —Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ strategy_id –¥–ª—è –º–µ—Ç—Ä–∏–∫
    strategy_ids = [c["id"] for c in candidates]

    # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –∑–∞ 24—á –∏ 1—á
    metrics = await _fetch_metrics_24h_1h(strategy_ids)

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º, —Å—á–∏—Ç–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–∫–æ—Ä, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    group_winners, raw_results, groups_watchers = _compute_group_winners(candidates, metrics)

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –≤ –ë–î (trader_winner) –∏ –∞–ø—Å–µ—Ä—Ç—ã –≤ trader_rating_active
    await _apply_results_to_db(group_winners, groups_watchers, raw_results)

    # –æ–±–Ω–æ–≤–ª—è–µ–º global –≤ –ø–∞–º—è—Ç–∏
    _update_inmemory_winners(group_winners)

    # —Å–≤–æ–¥–∫–∞ –≤ –ª–æ–≥
    winners_pretty = ", ".join(f"{gm}->{sid}" for gm, sid in group_winners.items() if sid is not None)
    log.info(
        "‚úÖ TRADER_RATING: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø=%d, –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π=%d%s",
        len(groups_watchers),
        sum(1 for v in group_winners.values() if v is not None),
        f" | {winners_pretty}" if winners_pretty else ""
    )


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (enabled, trader_watcher, –µ—Å—Ç—å market_mirrow)
async def _fetch_candidates() -> List[Dict[str, Any]]:
    rows = await infra.pg_pool.fetch(
        """
        SELECT id, deposit, market_mirrow
        FROM public.strategies_v4
        WHERE enabled = TRUE
          AND trader_watcher = TRUE
          AND market_mirrow IS NOT NULL
        """
    )
    # –ø—Ä–∏–≤–æ–¥–∏–º deposit –∫ Decimal –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º—É—Å–æ—Ä
    out = []
    for r in rows:
        try:
            dep = Decimal(str(r["deposit"])) if r["deposit"] is not None else Decimal("0")
        except Exception:
            dep = Decimal("0")
        out.append({"id": int(r["id"]), "deposit": dep, "market_mirrow": int(r["market_mirrow"])})
    return out


# üî∏ –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∑–∞ 24—á –∏ 1—á –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def _fetch_metrics_24h_1h(strategy_ids: List[int]) -> Dict[int, Dict[str, Any]]:
    if not strategy_ids:
        return {}

    # Postgres: –≤—Å–µ –¥–∞—Ç—ã –≤ UTC; —Å—Ç–æ–ª–±—Ü—ã –≤ –ë–î –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º (now() at time zone 'UTC')
    rows_24 = await infra.pg_pool.fetch(
        """
        SELECT
          strategy_id,
          COUNT(*)                      AS closed_24,
          SUM(CASE WHEN pnl > 0 THEN 1 ELSE 0 END) AS wins_24,
          COALESCE(SUM(pnl), 0)         AS pnl_24
        FROM public.positions_v4
        WHERE status = 'closed'
          AND closed_at >= ((now() at time zone 'UTC') - interval '24 hours')
          AND strategy_id = ANY($1::int[])
        GROUP BY strategy_id
        """,
        strategy_ids,
    )

    rows_1h = await infra.pg_pool.fetch(
        """
        SELECT
          strategy_id,
          COUNT(*)              AS closed_1h,
          COALESCE(SUM(pnl), 0) AS pnl_1h
        FROM public.positions_v4
        WHERE status = 'closed'
          AND closed_at >= ((now() at time zone 'UTC') - interval '1 hour')
          AND strategy_id = ANY($1::int[])
        GROUP BY strategy_id
        """,
        strategy_ids,
    )

    # —Å–æ–±–∏—Ä–∞–µ–º –≤ –µ–¥–∏–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    m: Dict[int, Dict[str, Any]] = {}
    for r in rows_24:
        sid = int(r["strategy_id"])
        m[sid] = {
            "closed_24": int(r["closed_24"]),
            "wins_24": int(r["wins_24"]),
            "pnl_24": Decimal(str(r["pnl_24"])),
            "closed_1h": 0,
            "pnl_1h": Decimal("0"),
        }
    for r in rows_1h:
        sid = int(r["strategy_id"])
        if sid not in m:
            m[sid] = {"closed_24": 0, "wins_24": 0, "pnl_24": Decimal("0"), "closed_1h": 0, "pnl_1h": Decimal("0")}
        m[sid]["closed_1h"] = int(r["closed_1h"])
        m[sid]["pnl_1h"] = Decimal(str(r["pnl_1h"]))
    return m


# üî∏ –†–∞—Å—á—ë—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
def _compute_group_winners(
    candidates: List[Dict[str, Any]],
    metrics: Dict[int, Dict[str, Any]],
) -> Tuple[Dict[int, int | None], Dict[int, Dict[str, Any]], Dict[int, List[int]]]:
    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ market_mirrow –∏ —Å–æ–±–∏—Ä–∞–µ–º watcher-—Å–ø–∏—Å–æ–∫
    groups_watchers: Dict[int, List[int]] = {}
    deposits: Dict[int, Decimal] = {}
    for c in candidates:
        sid = c["id"]
        gm = c["market_mirrow"]
        dep = c["deposit"]
        groups_watchers.setdefault(gm, []).append(sid)
        deposits[sid] = dep

    group_winners: Dict[int, int | None] = {}
    raw_results: Dict[int, Dict[str, Any]] = {}

    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    for gm, sids in groups_watchers.items():
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö (N24>0 –∏ –¥–µ–ø–æ–∑–∏—Ç>0)
        active = []
        per_strategy_results = {}

        for sid in sids:
            dep = deposits.get(sid, Decimal("0"))
            met = metrics.get(sid, {"closed_24": 0, "wins_24": 0, "pnl_24": Decimal("0"), "closed_1h": 0, "pnl_1h": Decimal("0")})
            closed_24 = met["closed_24"]
            wins_24 = met["wins_24"]
            pnl_24 = met["pnl_24"]
            closed_1h = met["closed_1h"]
            pnl_1h = met["pnl_1h"]

            # –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–π –∑–∞ 24—á ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ¬´—Å–ø–∏—Ç¬ª –≤ —Å–º—ã—Å–ª–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            if closed_24 <= 0 or dep <= 0:
                # —Å—ã—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º
                per_strategy_results[str(sid)] = {
                    "roi24": 0.0,
                    "wr24": 0.0,
                    "roi1h": 0.0,
                    "n24": int(closed_24),
                    "n1": int(closed_1h),
                    "score": 0.0,
                }
                continue

            # —Ä–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫
            roi24 = float((pnl_24 / dep))
            wr24 = float(wins_24) / float(closed_24) if closed_24 > 0 else 0.0
            roi1h = float((pnl_1h / dep)) if dep > 0 else 0.0

            active.append((sid, roi24, wr24, roi1h, int(closed_24)))
            # –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–ª–∞–¥—ë–º –±–µ–∑ score (–ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
            per_strategy_results[str(sid)] = {
                "roi24": roi24,
                "wr24": wr24,
                "roi1h": roi1h,
                "n24": int(closed_24),
                "n1": int(closed_1h),
            }

        # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
        if not active:
            group_winners[gm] = None
            raw_results[gm] = {"strategies": per_strategy_results}
            continue

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
        roi24_vals = [a[1] for a in active]
        roi1h_vals = [a[3] for a in active]

        roi24_min, roi24_max = min(roi24_vals), max(roi24_vals)
        roi1h_min, roi1h_max = min(roi1h_vals), max(roi1h_vals)

        def minmax(x: float, lo: float, hi: float) -> float:
            # –µ—Å–ª–∏ —É –≤—Å–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.5
            if hi == lo:
                return 0.5
            return (x - lo) / (hi - lo)

        # —Å—á–∏—Ç–∞–µ–º score
        scored = []
        for sid, roi24, wr24, roi1h, n24 in active:
            roi24_norm = minmax(roi24, roi24_min, roi24_max)
            roi1h_norm = minmax(roi1h, roi1h_min, roi1h_max)
            score = 0.60 * roi24_norm + 0.25 * wr24 + 0.15 * roi1h_norm
            scored.append((sid, score, roi24, roi1h, n24))

            # –¥–æ–ø–æ–ª–Ω—è–µ–º —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            per_strategy_results[str(sid)]["score"] = score

        # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–∞–π-–±—Ä–µ–π–∫–∏: –ø–æ ROI_24h, –∑–∞—Ç–µ–º ROI_1h, –∑–∞—Ç–µ–º N24)
        scored.sort(key=lambda t: (-t[1], -t[2], -t[3], -t[4], t[0]))
        winner_sid = scored[0][0]

        group_winners[gm] = winner_sid
        raw_results[gm] = {"strategies": per_strategy_results}

    return group_winners, raw_results, groups_watchers


# üî∏ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î: trader_winner-—Ñ–ª–∞–≥–∏ –∏ –∞–ø—Å–µ—Ä—Ç—ã –≤ trader_rating_active
async def _apply_results_to_db(
    group_winners: Dict[int, int | None],
    groups_watchers: Dict[int, List[int]],
    raw_results: Dict[int, Dict[str, Any]],
):
    if not groups_watchers:
        return

    group_ids = list(groups_watchers.keys())
    winner_ids = [sid for sid in group_winners.values() if sid is not None]

    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
            await conn.execute(
                """
                UPDATE public.strategies_v4
                SET trader_winner = FALSE
                WHERE trader_watcher = TRUE
                  AND market_mirrow = ANY($1::int[])
                """,
                group_ids,
            )

            # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if winner_ids:
                await conn.execute(
                    """
                    UPDATE public.strategies_v4
                    SET trader_winner = TRUE
                    WHERE id = ANY($1::int[])
                    """,
                    winner_ids,
                )

            # –∞–ø—Å–µ—Ä—Ç—ã –≤ trader_rating_active –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
            for gm in group_ids:
                winner = group_winners.get(gm)
                raw_json = raw_results.get(gm, {"strategies": {}})
                await conn.execute(
                    """
                    INSERT INTO public.trader_rating_active AS tra (
                      group_master_id, current_winner_id, consecutive_wins, raw_results, last_run_at
                    ) VALUES
                      ($1, $2, CASE WHEN $2 IS NULL THEN 0 ELSE 1 END, $3::jsonb, (now() at time zone 'UTC'))
                    ON CONFLICT (group_master_id) DO UPDATE
                    SET
                      current_winner_id = EXCLUDED.current_winner_id,
                      consecutive_wins  = CASE
                                            WHEN EXCLUDED.current_winner_id IS NULL
                                              THEN 0
                                            WHEN tra.current_winner_id = EXCLUDED.current_winner_id
                                              THEN tra.consecutive_wins + 1
                                            ELSE 1
                                          END,
                      raw_results       = EXCLUDED.raw_results,
                      last_run_at       = (now() at time zone 'UTC')
                    """,
                    gm,
                    winner,
                    raw_json,  # asyncpg —Å–∞–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç dict ‚Üí jsonb
                )


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ in-memory —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
def _update_inmemory_winners(group_winners: Dict[int, int | None]) -> None:
    # –æ—á–∏—â–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
    current_group_winners.clear()
    for gm, sid in group_winners.items():
        if sid is not None:
            current_group_winners[gm] = sid