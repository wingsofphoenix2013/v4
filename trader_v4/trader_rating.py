# trader_rating.py ‚Äî –ø–æ—á–∞—Å–æ–≤–æ–π —Ä–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º market_mirrow —Å ¬´–≤—Ö–æ–¥–Ω—ã–º –≥–µ–π—Ç–æ–º¬ª

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import json
from decimal import Decimal
from typing import Dict, List, Tuple, Any

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
log = logging.getLogger("TRADER_RATING")

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
current_group_winners: Dict[int, int] = {}

# üî∏ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ¬´–≤—Ö–æ–¥–Ω–æ–≥–æ –≥–µ–π—Ç–∞¬ª (–≤ –¥–æ–ª—è—Ö)
ROI24_FLOOR = Decimal("-0.005")   # -0.5%
MOMENTUM_MIN = Decimal("0.001")   # +0.10%
WR_BASE = Decimal("0.50")         # –±–∞–∑–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
WR_MOMENTUM = Decimal("0.55")     # —á—É—Ç—å –≤—ã—à–µ, –µ—Å–ª–∏ —Å–ø–∞—Å–∞–µ–º –º–æ–º–µ–Ω—Ç—É–º–æ–º

# üî∏ –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è winrate (–õ–∞–ø–ª–∞—Å)
LAPLACE_A = Decimal("1")
LAPLACE_B = Decimal("1")


# üî∏ –ü—É–±–ª–∏—á–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–∫–æ–ø–∏—è —Å–ª–æ–≤–∞—Ä—è)
def get_current_group_winners() -> Dict[int, int]:
    return dict(current_group_winners)


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å –∏–∑ main)
async def run_trader_rating_job():
    # —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = await _fetch_candidates()
    if not candidates:
        log.debug("‚ÑπÔ∏è TRADER_RATING: –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç (enabled & trader_watcher & market_mirrow) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return

    strategy_ids = [c["id"] for c in candidates]

    # –∞–≥—Ä–µ–≥–∞—Ç—ã –∑–∞ 24—á –∏ 1—á
    metrics = await _fetch_metrics_24h_1h(strategy_ids)

    # –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å —É—á—ë—Ç–æ–º ¬´–≤—Ö–æ–¥–Ω–æ–≥–æ –≥–µ–π—Ç–∞¬ª
    group_winners, raw_results, groups_watchers = _compute_group_winners_with_gate(candidates, metrics)

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –≤ –ë–î –∏ –∞–ø—Å–µ—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    await _apply_results_to_db(group_winners, groups_watchers, raw_results)

    # –æ–±–Ω–æ–≤–ª—è–µ–º in-memory winners
    _update_inmemory_winners(group_winners)

    # —Å–≤–æ–¥–∫–∞
    total_groups = len(groups_watchers)
    total_winners = sum(1 for v in group_winners.values() if v is not None)
    winners_pretty = ", ".join(f"{gm}->{sid}" for gm, sid in group_winners.items() if sid is not None)
    log.debug("‚úÖ TRADER_RATING: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø=%d, –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π=%d%s",
             total_groups, total_winners, f" | {winners_pretty}" if winners_pretty else "")


# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (enabled, trader_watcher, –µ—Å—Ç—å market_mirrow)
async def _fetch_candidates() -> List[Dict[str, Any]]:
    rows = await infra.pg_pool.fetch(
        """
        SELECT id, deposit, market_mirrow
        FROM public.strategies_v4
        WHERE enabled = TRUE
          AND trader_watcher = TRUE
          AND market_mirrow IS NOT NULL
        """
    )
    out: List[Dict[str, Any]] = []
    for r in rows:
        dep = Decimal(str(r["deposit"])) if r["deposit"] is not None else Decimal("0")
        out.append({"id": int(r["id"]), "deposit": dep, "market_mirrow": int(r["market_mirrow"])})
    return out


# üî∏ –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∑–∞ 24—á –∏ 1—á –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def _fetch_metrics_24h_1h(strategy_ids: List[int]) -> Dict[int, Dict[str, Any]]:
    if not strategy_ids:
        return {}

    rows_24 = await infra.pg_pool.fetch(
        """
        SELECT
          strategy_id,
          COUNT(*) AS closed_24,
          SUM(CASE WHEN pnl > 0 THEN 1 ELSE 0 END) AS wins_24,
          COALESCE(SUM(pnl), 0) AS pnl_24
        FROM public.positions_v4
        WHERE status = 'closed'
          AND closed_at >= ((now() at time zone 'UTC') - interval '24 hours')
          AND strategy_id = ANY($1::int[])
        GROUP BY strategy_id
        """,
        strategy_ids,
    )

    rows_1h = await infra.pg_pool.fetch(
        """
        SELECT
          strategy_id,
          COUNT(*)              AS closed_1h,
          COALESCE(SUM(pnl), 0) AS pnl_1h
        FROM public.positions_v4
        WHERE status = 'closed'
          AND closed_at >= ((now() at time zone 'UTC') - interval '1 hour')
          AND strategy_id = ANY($1::int[])
        GROUP BY strategy_id
        """,
        strategy_ids,
    )

    m: Dict[int, Dict[str, Any]] = {}
    for r in rows_24:
        sid = int(r["strategy_id"])
        m[sid] = {
            "closed_24": int(r["closed_24"]),
            "wins_24": int(r["wins_24"]),
            "pnl_24": Decimal(str(r["pnl_24"])),
            "closed_1h": 0,
            "pnl_1h": Decimal("0"),
        }
    for r in rows_1h:
        sid = int(r["strategy_id"])
        if sid not in m:
            m[sid] = {"closed_24": 0, "wins_24": 0, "pnl_24": Decimal("0"), "closed_1h": 0, "pnl_1h": Decimal("0")}
        m[sid]["closed_1h"] = int(r["closed_1h"])
        m[sid]["pnl_1h"] = Decimal(str(r["pnl_1h"]))
    return m


# üî∏ –†–∞—Å—á—ë—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º —Å ¬´–≤—Ö–æ–¥–Ω—ã–º –≥–µ–π—Ç–æ–º¬ª
def _compute_group_winners_with_gate(
    candidates: List[Dict[str, Any]],
    metrics: Dict[int, Dict[str, Any]],
) -> Tuple[Dict[int, int | None], Dict[int, Dict[str, Any]], Dict[int, List[int]]]:

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ market_mirrow
    groups_watchers: Dict[int, List[int]] = {}
    deposits: Dict[int, Decimal] = {}
    for c in candidates:
        sid = c["id"]
        gm = c["market_mirrow"]
        dep = c["deposit"]
        groups_watchers.setdefault(gm, []).append(sid)
        deposits[sid] = dep

    group_winners: Dict[int, int | None] = {}
    raw_results: Dict[int, Dict[str, Any]] = {}

    # —Ñ—É–Ω–∫—Ü–∏—è minmax –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã)
    def _minmax(x: float, lo: float, hi: float) -> float:
        if hi == lo:
            return 0.5
        return (x - lo) / (hi - lo)

    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    for gm, sids in groups_watchers.items():
        per_strategy_results: Dict[str, Any] = {}
        passed: List[Tuple[int, float, float, float, int]] = []  # (sid, roi24, wr_shr, roi1h, n24)

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏ –≥–µ–π—Ç
        for sid in sids:
            dep: Decimal = deposits.get(sid, Decimal("0"))
            met = metrics.get(sid, {"closed_24": 0, "wins_24": 0, "pnl_24": Decimal("0"), "closed_1h": 0, "pnl_1h": Decimal("0")})
            closed_24 = int(met["closed_24"])
            wins_24 = int(met["wins_24"])
            pnl_24 = Decimal(met["pnl_24"])
            closed_1h = int(met["closed_1h"])
            pnl_1h = Decimal(met["pnl_1h"])

            # –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if dep <= 0 or closed_24 <= 0:
                # —Å–ø—è—â–∏–µ / –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã ‚Äî –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≥–µ–π—Ç
                per_strategy_results[str(sid)] = {
                    "roi24": 0.0,
                    "wr24": 0.0,
                    "wr_shr": 0.0,
                    "roi1h": 0.0,
                    "n24": closed_24,
                    "n1": closed_1h,
                    "gate": False,
                    "score": 0.0,
                }
                continue

            roi24 = pnl_24 / dep
            roi1h = pnl_1h / dep
            wr24 = Decimal(wins_24) / Decimal(closed_24) if closed_24 > 0 else Decimal("0")
            wr_shr = (Decimal(wins_24) + LAPLACE_A) / (Decimal(closed_24) + LAPLACE_A + LAPLACE_B)

            # —É—Å–ª–æ–≤–∏—è –≥–µ–π—Ç–∞
            gate_ok = (roi24 > ROI24_FLOOR) and (
                (roi24 >= 0 and wr_shr >= WR_BASE)  # –≤–µ—Ç–∫–∞ A
                or
                (roi1h > MOMENTUM_MIN and wr_shr >= WR_MOMENTUM)  # –≤–µ—Ç–∫–∞ B
            )

            per_strategy_results[str(sid)] = {
                "roi24": float(roi24),
                "wr24": float(wr24),
                "wr_shr": float(wr_shr),
                "roi1h": float(roi1h),
                "n24": closed_24,
                "n1": closed_1h,
                "gate": bool(gate_ok),
            }

            if gate_ok:
                passed.append((sid, float(roi24), float(wr_shr), float(roi1h), closed_24))

        # –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à—ë–ª –≥–µ–π—Ç ‚Äî –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
        if not passed:
            group_winners[gm] = None
            raw_results[gm] = {"strategies": per_strategy_results}
            continue

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ –¥–ª—è ROI24 –∏ ROI1h
        roi24_vals = [p[1] for p in passed]
        roi1h_vals = [p[3] for p in passed]
        r24_min, r24_max = min(roi24_vals), max(roi24_vals)
        r1h_min, r1h_max = min(roi1h_vals), max(roi1h_vals)

        scored: List[Tuple[int, float, float, float, int]] = []  # (sid, score, roi24, roi1h, n24)
        for sid, roi24_f, wr_shr_f, roi1h_f, n24 in passed:
            roi24_norm = _minmax(roi24_f, r24_min, r24_max)
            roi1h_norm = _minmax(roi1h_f, r1h_min, r1h_max)
            score = 0.60 * roi24_norm + 0.25 * float(wr_shr_f) + 0.15 * roi1h_norm
            scored.append((sid, score, roi24_f, roi1h_f, n24))
            per_strategy_results[str(sid)]["score"] = score

        # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–∞–π-–±—Ä–µ–π–∫–∏: ROI_24h, ROI_1h, N24)
        scored.sort(key=lambda t: (-t[1], -t[2], -t[3], -t[4], t[0]))
        winner_sid = scored[0][0]
        group_winners[gm] = winner_sid
        raw_results[gm] = {"strategies": per_strategy_results}

    return group_winners, raw_results, groups_watchers


# üî∏ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î: trader_winner-—Ñ–ª–∞–≥–∏ –∏ –∞–ø—Å–µ—Ä—Ç—ã –≤ trader_rating_active
async def _apply_results_to_db(
    group_winners: Dict[int, int | None],
    groups_watchers: Dict[int, List[int]],
    raw_results: Dict[int, Dict[str, Any]],
):
    if not groups_watchers:
        return

    group_ids = list(groups_watchers.keys())
    winner_ids = [sid for sid in group_winners.values() if sid is not None]

    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
            await conn.execute(
                """
                UPDATE public.strategies_v4
                SET trader_winner = FALSE
                WHERE trader_watcher = TRUE
                  AND market_mirrow = ANY($1::int[])
                """,
                group_ids,
            )

            # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
            if winner_ids:
                await conn.execute(
                    """
                    UPDATE public.strategies_v4
                    SET trader_winner = TRUE
                    WHERE id = ANY($1::int[])
                    """,
                    winner_ids,
                )

            # upsert –≤ —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            for gm in group_ids:
                winner = group_winners.get(gm)
                raw_json = raw_results.get(gm, {"strategies": {}})
                raw_json_str = json.dumps(raw_json, ensure_ascii=False, separators=(",", ":"))

                await conn.execute(
                    """
                    INSERT INTO public.trader_rating_active AS tra (
                      group_master_id, current_winner_id, consecutive_wins, raw_results, last_run_at
                    ) VALUES
                      ($1::int4,
                       $2::int4,
                       CASE WHEN $2::int4 IS NULL THEN 0 ELSE 1 END,
                       $3::jsonb,
                       (now() at time zone 'UTC'))
                    ON CONFLICT (group_master_id) DO UPDATE
                    SET
                      current_winner_id = EXCLUDED.current_winner_id,
                      consecutive_wins  = CASE
                                            WHEN EXCLUDED.current_winner_id IS NULL
                                              THEN 0
                                            WHEN tra.current_winner_id = EXCLUDED.current_winner_id
                                              THEN tra.consecutive_wins + 1
                                            ELSE 1
                                          END,
                      raw_results       = EXCLUDED.raw_results,
                      last_run_at       = (now() at time zone 'UTC')
                    """,
                    gm,
                    winner,
                    raw_json_str,
                )


# üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ in-memory —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
def _update_inmemory_winners(group_winners: Dict[int, int | None]) -> None:
    current_group_winners.clear()
    for gm, sid in group_winners.items():
        if sid is not None:
            current_group_winners[gm] = sid