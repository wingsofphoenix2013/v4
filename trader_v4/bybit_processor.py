# bybit_processor.py ‚Äî dry-run –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—è–º opened (entry + TP/SL), –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import asyncio
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP
from typing import Any, Dict, List, Optional, Tuple

from trader_infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤
log = logging.getLogger("TRADER_ORDERS")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç—Ä–∏–º–∞ –∏ Consumer Group
ORDER_REQUEST_STREAM = "trader_order_requests"
CG_NAME = "bybit_processor_group"
CONSUMER = "bybit_processor_1"

# üî∏ –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤ (ENV TRADER_ORDER_MODE: off|dry_run|on)
def _normalize_mode(v: Optional[str]) -> str:
    s = (v or "").strip().lower()
    if s in ("off", "false", "0", "no", "disabled"):
        return "off"
    if s in ("dry_run", "dry-run", "dryrun", "test"):
        return "dry_run"
    return "on"

TRADER_ORDER_MODE = _normalize_mode(os.getenv("TRADER_ORDER_MODE"))

# üî∏ –£–º–µ–Ω—å—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (ENV BYBIT_SIZE_PCT, –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
def _get_size_factor() -> Decimal:
    raw = os.getenv("BYBIT_SIZE_PCT", "100").strip()
    try:
        pct = Decimal(raw)
    except Exception:
        pct = Decimal("100")
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∑–¥—Ä–∞–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 0..1000 (–Ω–∞ –±—É–¥—É—â–µ–µ)
    if pct < 0:
        pct = Decimal("0")
    if pct > 1000:
        pct = Decimal("1000")
    return (pct / Decimal("100"))

SIZE_FACTOR = _get_size_factor()

# —Å–æ–æ–±—â–∏–º –æ —Ä–µ–∂–∏–º–∞—Ö –≤ –ª–æ–≥
if TRADER_ORDER_MODE == "dry_run":
    log.info("BYBIT processor mode: DRY_RUN (—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏). SIZE_FACTOR=%.4f", float(SIZE_FACTOR))
elif TRADER_ORDER_MODE == "off":
    log.info("BYBIT processor mode: OFF (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏).")
else:
    log.info("BYBIT processor mode: ON (—Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ).")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
async def run_bybit_processor_loop():
    redis = infra.redis_client

    try:
        await redis.xgroup_create(ORDER_REQUEST_STREAM, CG_NAME, id="$", mkstream=True)
        log.debug("üì° Consumer Group —Å–æ–∑–¥–∞–Ω–∞: %s ‚Üí %s", ORDER_REQUEST_STREAM, CG_NAME)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.debug("‚ÑπÔ∏è Consumer Group —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", CG_NAME)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.debug("üö¶ BYBIT_PROCESSOR –∑–∞–ø—É—â–µ–Ω (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=CG_NAME,
                consumername=CONSUMER,
                streams={ORDER_REQUEST_STREAM: ">"},
                count=1,
                block=1000
            )
            if not entries:
                continue

            for _, records in entries:
                for record_id, data in records:
                    try:
                        await _handle_order_request(record_id, data)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ (id=%s)", record_id)
                        await redis.xack(ORDER_REQUEST_STREAM, CG_NAME, record_id)
                    else:
                        await redis.xack(ORDER_REQUEST_STREAM, CG_NAME, record_id)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ BYBIT_PROCESSOR")
            await asyncio.sleep(2)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –∏–∑ —Å—Ç—Ä–∏–º–∞ (–æ–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º position_uid, strategy_id)
async def _handle_order_request(record_id: str, data: Dict[str, Any]) -> None:
    # —Ä–µ–∂–∏–º off: —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
    if TRADER_ORDER_MODE == "off":
        log.debug("TRADER_ORDER_MODE=off ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∑–∞—è–≤–∫–∏ id=%s", record_id)
        return

    position_uid = _as_str(data.get("position_uid"))
    if not position_uid:
        log.debug("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ—Ç position_uid) id=%s", record_id)
        return

    # —Ç—è–Ω–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ë–î
    pos = await _fetch_position(position_uid)
    if not pos:
        log.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ positions_v4, uid=%s", position_uid)
        return

    symbol = _as_str(pos.get("symbol"))
    direction = (_as_str(pos.get("direction")) or "").lower()
    entry_price = _as_decimal(pos.get("entry_price"))
    qty_raw = _as_decimal(pos.get("quantity")) or Decimal("0")
    created_at = pos.get("created_at")

    if not symbol or direction not in ("long", "short") or qty_raw <= 0:
        log.info("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: uid=%s symbol=%s direction=%s qty=%s", position_uid, symbol, direction, qty_raw)
        return

    # –ø—Ä–∞–≤–∏–ª–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π –ø–æ —Ç–∏–∫–µ—Ä—É
    rules = await _load_symbol_rules(symbol)
    precision_qty = rules.get("precision_qty")
    min_qty = rules.get("min_qty")
    ticksize = rules.get("ticksize")

    # —Ü–µ–ª–∏ TP/SL
    tp_list, tp_signal_skipped, sl_one = await _fetch_targets_for_plan(position_uid)

    # —Ä–∞—Å—á—ë—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–ª–∏—á–∏–Ω
    side_word = "BUY" if direction == "long" else "SELL"
    qty_entry_real = _round_qty(qty_raw * SIZE_FACTOR, precision_qty)

    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∞) –∏ —Ü–µ–ª–µ–π
    entry_price_disp = _round_price(entry_price, ticksize)

    # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –æ—Ç—á—ë—Ç (DRY_RUN)
    lines: List[str] = []
    lines.append(f"[ORDER_DRY_RUN OPEN] uid={position_uid} symbol={symbol} side={'LONG' if direction=='long' else 'SHORT'}")
    lines.append(f"entry: market {side_word} qty_raw={_fmt(qty_raw)} qty_real={_fmt(qty_entry_real)} linkId={position_uid}-entry")

    # TP —Å —Ü–µ–Ω–æ–π (percent/atr) ‚Äî –ª–∏–º–∏—Ç–Ω—ã–µ reduce-only
    if tp_list:
        for level, price_raw, qty_tp_raw in tp_list:
            price_real = _round_price(price_raw, ticksize)
            qty_tp_real = _round_qty(qty_tp_raw * SIZE_FACTOR, precision_qty)
            note = ""
            if min_qty is not None and qty_tp_real < min_qty:
                note = "  # qty_real < min_qty ‚Üí SKIP"
            lines.append(
                f"tpL{level}: limit reduceOnly price={_fmt(price_real)} "
                f"qty_raw={_fmt(qty_tp_raw)} qty_real={_fmt(qty_tp_real)} linkId={position_uid}-tp-{level}{note}"
            )
    else:
        lines.append("tp: ‚Äî  # no percent/atr TP with price")

    # SL (–ø–µ—Ä–≤—ã–π ¬´–∂–∏–≤–æ–π¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞) ‚Äî —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç reduce-only –Ω–∞ –≤–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º
    if sl_one and sl_one[0] is not None:
        sl_trigger = _round_price(sl_one[0], ticksize)
        lines.append(
            f"sl: stop-market reduceOnly trigger={_fmt(sl_trigger)} qty={_fmt(qty_entry_real)} linkId={position_uid}-sl"
        )
    else:
        lines.append("sl: ‚Äî  # WARN: no SL price")

    # –∑–∞–º–µ—Ç–∫–∏
    if tp_signal_skipped > 0:
        lines.append(f"note: skipped {tp_signal_skipped} signal-TP (no exchange order)")

    if min_qty is not None and qty_entry_real < min_qty:
        lines.append("note: entry qty_real < min_qty ‚Üí SKIP (entry too small)")

    if created_at:
        lines.append(f"created_at: {created_at} (UTC naive)  entry_price‚âà{_fmt(entry_price_disp)}")

    # –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ (DRY_RUN / ON)
    if TRADER_ORDER_MODE == "dry_run":
        log.info("\n" + "\n".join(lines))
        return

    # —Ä–µ–∂–∏–º ON –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    log.info("MODE=ON: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –ø–ª–∞–Ω:\n" + "\n".join(lines))

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π
def _as_str(v: Any) -> str:
    if v is None:
        return ""
    return v.decode() if isinstance(v, (bytes, bytearray)) else str(v)

def _as_decimal(v: Any) -> Optional[Decimal]:
    try:
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _fmt(x: Optional[Decimal], max_prec: int = 8) -> str:
    if x is None:
        return "‚Äî"
    try:
        s = f"{x:.{max_prec}f}".rstrip("0").rstrip(".")
        return s if s else "0"
    except Exception:
        return str(x)

def _round_qty(qty: Decimal, precision_qty: Optional[int]) -> Decimal:
    if qty is None:
        return Decimal("0")
    if precision_qty is None:
        return qty
    # —à–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ = 10^-precision_qty, –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑
    step = Decimal("1").scaleb(-int(precision_qty))
    try:
        return qty.quantize(step, rounding=ROUND_DOWN)
    except Exception:
        return qty

def _round_price(price: Optional[Decimal], ticksize: Optional[Decimal]) -> Optional[Decimal]:
    if price is None or ticksize is None:
        return price
    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–º—É —à–∞–≥—É —Ü–µ–Ω—ã
    try:
        quantum = _as_decimal(ticksize) or Decimal("0")
        if quantum <= 0:
            return price
        return price.quantize(quantum, rounding=ROUND_HALF_UP)
    except Exception:
        return price

# üî∏ –î–æ—Å—Ç—É–ø –∫ –ë–î
async def _fetch_position(position_uid: str) -> Optional[Dict[str, Any]]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT symbol, direction, entry_price, quantity, notional_value, created_at
        FROM public.positions_v4
        WHERE position_uid = $1
        """,
        position_uid
    )
    return dict(row) if row else None

async def _fetch_targets_for_plan(position_uid: str) -> Tuple[List[Tuple[int, Decimal, Decimal]], int, Optional[Tuple[Optional[Decimal]]]]:
    # tp —Å —Ü–µ–Ω–æ–π (source='price'), –∂–∏–≤—ã–µ (–Ω–µ hit –∏ –Ω–µ canceled)
    tp_rows = await infra.pg_pool.fetch(
        """
        SELECT level, price, quantity
        FROM public.position_targets_v4
        WHERE position_uid = $1
          AND type = 'tp'
          AND price IS NOT NULL
          AND (canceled IS NOT TRUE)
          AND (hit IS NOT TRUE)
        ORDER BY level
        """,
        position_uid
    )
    tps: List[Tuple[int, Decimal, Decimal]] = []
    for r in tp_rows:
        lvl = int(r["level"])
        price = _as_decimal(r["price"]) or Decimal("0")
        qty = _as_decimal(r["quantity"]) or Decimal("0")
        tps.append((lvl, price, qty))

    # –ø–æ—Å—á–∏—Ç–∞–µ–º TP-signal –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ (–±–µ–∑ —Ü–µ–Ω—ã –ò–õ–ò source='signal')
    tp_sig_cnt_row = await infra.pg_pool.fetchrow(
        """
        SELECT COUNT(*) AS cnt
        FROM public.position_targets_v4
        WHERE position_uid = $1
          AND type = 'tp'
          AND (
                price IS NULL
                OR source = 'signal'
              )
        """,
        position_uid
    )
    tp_signal_skipped = int(tp_sig_cnt_row["cnt"]) if tp_sig_cnt_row and tp_sig_cnt_row["cnt"] is not None else 0

    # sl: –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é ¬´–∂–∏–≤—É—é¬ª c —Ü–µ–Ω–æ–π
    sl_row = await infra.pg_pool.fetchrow(
        """
        SELECT price
        FROM public.position_targets_v4
        WHERE position_uid = $1
          AND type = 'sl'
          AND price IS NOT NULL
          AND (canceled IS NOT TRUE)
          AND (hit IS NOT TRUE)
        ORDER BY level
        LIMIT 1
        """,
        position_uid
    )
    sl_one = ( _as_decimal(sl_row["price"]), ) if sl_row and sl_row["price"] is not None else ( None, )

    return tps, tp_signal_skipped, sl_one

async def _load_symbol_rules(symbol: str) -> Dict[str, Optional[Decimal]]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT precision_qty, min_qty, ticksize
        FROM public.tickers_bb
        WHERE symbol = $1
        """,
        symbol
    )
    if not row:
        log.info("‚ÑπÔ∏è –ù–µ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∏–∫–µ—Ä–∞ –≤ tickers_bb: %s", symbol)
        return {"precision_qty": None, "min_qty": None, "ticksize": None}
    precision_qty = row["precision_qty"]
    min_qty = _as_decimal(row["min_qty"]) if row["min_qty"] is not None else None
    ticksize = _as_decimal(row["ticksize"]) if row["ticksize"] is not None else None
    return {"precision_qty": precision_qty, "min_qty": min_qty, "ticksize": ticksize}