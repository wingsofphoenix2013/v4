# trader_tg_notifier.py ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (open/close),
# —Å —Ä–æ—Ç–∏—Ä—É–µ–º—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
# –∏ 24h ROI (–ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ/–∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤—ã–∑—ã–≤–∞—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–æ–π)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import random
from decimal import Decimal
from datetime import datetime
from typing import Optional, Iterable, Any
import httpx

# üî∏ –õ–æ–≥–≥–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
log = logging.getLogger("TRADER_TG")

# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ—Ä—ë–º –∏–∑ ENV)
_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

# üî∏ –ù–∞–±–æ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ä–æ—Ç–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ)
_OPEN_HEADERS = [
    "üöÄ We‚Äôre in ‚Äî fresh entry on the board",
    "üéØ Button pressed. Position live.",
    "üß≠ New position deployed ‚Äî let‚Äôs navigate",
    "‚öôÔ∏è Switch flipped ‚Äî trade engaged",
    "ü•∑ Silent entry ‚Äî let‚Äôs hunt",
]

_WIN_HEADERS = [
    "üü¢ Profit secured ‚Äî the market blinked first üòé",
    "üü¢ Winner winner, crypto dinner üçΩÔ∏è",
    "üü¢ Green ink day ‚Äî we got paid üíö",
    "üü¢ That exit slapped ‚Äî bag secured üí∞",
    "üü¢ Trend befriended, wallet defended üõ°Ô∏è",
]

_LOSS_HEADERS = [
    "üî¥ Ouch. Market said ‚Äúnope.‚Äù Moving on. üßä",
    "üî¥ Tuition paid to Mr. Market. Class dismissed. üìâ",
    "üî¥ We took one on the chin ‚Äî next one‚Äôs ours üëä",
    "üî¥ Red day, cool head. Reset and reload üîÅ",
    "üî¥ Loss logged, ego intact. Back to the lab üß™",
]

# üî∏ –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (HTML)
async def tg_send(text: str, *, disable_notification: bool = False) -> None:
    if not _BOT_TOKEN or not _CHAT_ID:
        log.info("‚ÑπÔ∏è TG: –ø—Ä–æ–ø—É—Å–∫ ‚Äî TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    url = f"https://api.telegram.org/bot{_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": _CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
        "disable_notification": disable_notification,
    }

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.post(url, json=payload)
            if r.status_code != 200:
                log.warning("‚ö†Ô∏è TG: %s %s", r.status_code, r.text)
            else:
                log.info("üì® TG: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception:
        log.exception("‚ùå TG: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

# üî∏ –ü—É–±–ª–∏—á–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏: open/close

async def send_open_notification(
    *,
    symbol: str,
    direction: Optional[str],
    entry_price: Optional[Decimal],
    # margin_used, sid, group ‚Äî –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–æ–ª—å—à–µ –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    strategy_id: int,      # –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è)
    group_id: int,         # –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è)
    created_at: datetime,
    tp_targets: Optional[Iterable[Any]] = None,  # —Å–ø–∏—Å–æ–∫ TP (dict/tuple)
    sl_targets: Optional[Iterable[Any]] = None,  # —Å–ø–∏—Å–æ–∫ SL (dict/tuple)
    header: Optional[str] = None,
    silent: bool = False,
) -> None:
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ üü¢/üî¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–π)
    hdr = header or random.choice(_OPEN_HEADERS)
    text = build_open_message(
        header=hdr,
        symbol=symbol,
        direction=direction,
        entry_price=entry_price,
        created_at=created_at,
        tp_targets=tp_targets,
        sl_targets=sl_targets,
    )
    await tg_send(text, disable_notification=silent)

async def send_closed_notification(
    *,
    symbol: str,
    direction: Optional[str],
    entry_price: Optional[Decimal],
    exit_price: Optional[Decimal],
    pnl: Optional[Decimal],
    created_at: Optional[datetime],
    closed_at: Optional[datetime],
    roi_24h: Optional[Decimal] = None,   # —Å–∫–æ–ª—å–∑—è—â–∏–π ROI –∑–∞ 24 —á–∞—Å–∞ (–¥–æ–ª—è, –Ω–µ %)
    header: Optional[str] = None,
    silent: bool = False,
) -> None:
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫: win –∏–ª–∏ loss (—Å üü¢/üî¥)
    if header:
        hdr = header
    else:
        is_win = (pnl or Decimal("0")) >= 0
        hdr = random.choice(_WIN_HEADERS if is_win else _LOSS_HEADERS)

    text = build_closed_message(
        header=hdr,
        symbol=symbol,
        direction=direction,
        entry_price=entry_price,
        exit_price=exit_price,
        pnl=pnl,
        created_at=created_at,
        closed_at=closed_at,
        roi_24h=roi_24h,
    )
    await tg_send(text, disable_notification=silent)

# üî∏ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã

def _fmt_money(x: Optional[Decimal], max_prec: int = 8) -> str:
    if x is None:
        return "‚Äî"
    try:
        s = f"{x:.{max_prec}f}".rstrip("0").rstrip(".")
        return s if s else "0"
    except Exception:
        return str(x)

def _fmt_signed(x: Optional[Decimal], max_prec: int = 8) -> str:
    if x is None:
        return "‚Äî"
    try:
        sign = "+" if x >= 0 else ""
        return f"{sign}{_fmt_money(x, max_prec)}"
    except Exception:
        return str(x)

def _fmt_pct(x: Optional[Decimal], max_prec: int = 2) -> str:
    if x is None:
        return "‚Äî"
    try:
        val = x * Decimal("100")  # –¥–æ–ª—è ‚Üí –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        sign = "+" if val >= 0 else ""
        s = f"{val:.{max_prec}f}".rstrip("0").rstrip(".")
        return f"{sign}{s}%"
    except Exception:
        return str(x)

def _fmt_dt_utc(dt: Optional[datetime]) -> str:
    if not dt:
        return "‚Äî"
    # timestamps –≤ –ë–î –Ω–∞–∏–≤–Ω—ã–µ UTC ‚Äî –ø–æ–º–µ—á–∞–µ–º —è–≤–Ω–æ
    return dt.strftime("%Y-%m-%d %H:%M") + " UTC"

def _side_arrow_and_word(direction: Optional[str]) -> tuple[str, str]:
    # ‚¨ÜÔ∏è long, ‚¨áÔ∏è short
    d = (direction or "").lower()
    return ("‚¨ÜÔ∏è", "LONG") if d == "long" else ("‚¨áÔ∏è", "SHORT")

def _level_from(obj: Any) -> Optional[int]:
    try:
        if isinstance(obj, dict):
            return int(obj.get("level")) if obj.get("level") is not None else None
        if isinstance(obj, (tuple, list)) and len(obj) >= 1:
            return int(obj[0]) if obj[0] is not None else None
    except Exception:
        return None
    return None

def _price_from(obj: Any) -> Optional[Decimal]:
    try:
        if isinstance(obj, dict):
            v = obj.get("price")
        else:
            v = obj[1] if isinstance(obj, (tuple, list)) and len(obj) >= 2 else None
        if v is None:
            return None
        if isinstance(v, Decimal):
            return v
        return Decimal(str(v))
    except Exception:
        return None

def _format_tp_section(tp_targets: Optional[Iterable[Any]], max_items: int = 3) -> str:
    """TP-–±–ª–æ–∫ –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã (–ø–æ –∑–∞–¥–∞–Ω–∏—é)."""
    if not tp_targets:
        return ""
    try:
        tps = sorted(tp_targets, key=lambda t: (_level_from(t) or 10**9))
    except Exception:
        tps = list(tp_targets)

    lines = []
    shown = 0
    for t in tps:
        if shown >= max_items:
            break
        lvl = _level_from(t)
        price = _price_from(t)
        lvl_txt = f"TP{lvl}" if lvl is not None else "TP"
        price_txt = _fmt_money(price)
        lines.append(f"üéØ {lvl_txt}: <code>{price_txt}</code>")
        shown += 1

    more = len(tps) - shown
    suffix = f"\n‚ûï ... and {more} more TP" if more > 0 else ""
    # –¥–æ–±–∞–≤–∏–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
    return ("\n".join(lines)) + suffix + ("\n" if lines or suffix else "")

def _format_sl_section(sl_targets: Optional[Iterable[Any]]) -> str:
    if not sl_targets:
        return ""
    # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–æ–±—ã—á–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) SL
    sl = None
    for s in sl_targets:
        sl = s
        break
    price = _price_from(sl)
    price_txt = _fmt_money(price)
    return f"üõ°Ô∏è SL: <code>{price_txt}</code>\n"

# üî∏ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π

def build_open_message(
    *,
    header: str,
    symbol: str,
    direction: Optional[str],
    entry_price: Optional[Decimal],
    created_at: datetime,
    tp_targets: Optional[Iterable[Any]] = None,
    sl_targets: Optional[Iterable[Any]] = None,
) -> str:
    """
    –§–æ—Ä–º–∞—Ç (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π):
    <header>

    ‚¨ÜÔ∏è LONG on <symbol>
    
    üéØ Entry: <entry_price>
    üéØ TP1: <price>
    üõ°Ô∏è SL: <price>

    ‚è≥ <created_at UTC>
    """
    arrow, side = _side_arrow_and_word(direction)
    tp_block = _format_tp_section(tp_targets)
    sl_block = _format_sl_section(sl_targets)

    parts = [
        f"{header}",
        "",
        f"{arrow} {side} on <b>{symbol}</b>",
        f"üéØ Entry: <code>{_fmt_money(entry_price)}</code>",
        "",
        tp_block.rstrip("\n"),  # –±–ª–æ–∫ TP —É–∂–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏, —É–±–µ—Ä—ë–º –ª–∏—à–Ω–∏–π —Ç—Ä–µ–π–ª–∏–Ω–≥
        sl_block.rstrip("\n"),
        "",
        f"‚è≥ {_fmt_dt_utc(created_at)}",
    ]
    # —É–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ø—É—Å—Ç—ã—Ö TP/SL –±–ª–æ–∫–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    text = "\n".join([line for line in parts if line is not None])
    # —á–∏—Å—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ TP/SL —Å–æ–≤—Å–µ–º –ø—É—Å—Ç—ã–µ
    while "\n\n\n" in text:
        text = text.replace("\n\n\n", "\n\n")
    return text

def build_closed_message(
    *,
    header: str,
    symbol: str,
    direction: Optional[str],
    entry_price: Optional[Decimal],
    exit_price: Optional[Decimal],
    pnl: Optional[Decimal],
    created_at: Optional[datetime],
    closed_at: Optional[datetime],
    roi_24h: Optional[Decimal] = None,  # –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–ª—è (0.0123 ‚Üí 1.23%)
) -> str:
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –¥–æ–±–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É —Å 24h ROI.
    –í –∑–∞–≥–æ–ª–æ–≤–∫–µ ‚Äî üü¢/üî¥ (win/loss), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–µ–ª–∫–∞–º–∏.
    """
    arrow, side = _side_arrow_and_word(direction)

    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è
    dur = "‚Äî"
    if created_at and closed_at:
        try:
            minutes = int((closed_at - created_at).total_seconds() // 60)
            dur = f"{minutes} minutes"
        except Exception:
            pass

    roi_line = f"üìà 24h ROI: <b>{_fmt_pct(roi_24h)}</b>\n"

    return (
        f"{header}\n\n"
        f"{arrow} {side} on <b>{symbol}</b>\n"
        f"üéØ Entry: <code>{_fmt_money(entry_price)}</code>\n"
        f"üèÅ Exit: <code>{_fmt_money(exit_price)}</code>\n"
        f"üíµ PnL: <b>{_fmt_signed(pnl)}</b>\n"
        f"{roi_line}"
        f"üïì Held: {dur}\n"
        f"‚è≥ {_fmt_dt_utc(created_at)} ‚Üí {_fmt_dt_utc(closed_at)}"
    )