# packs/mfi_pack.py ‚Äî on-demand –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø–∞–∫–µ—Ç–∞ MFI (–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ä–∑–∏–Ω–∞, –¥–µ–ª—å—Ç–∞, —Ç—Ä–µ–Ω–¥)

import logging
from .pack_utils import (
    floor_to_bar,
    load_ohlcv_df,
    rsi_bucket_low,        # –∫–æ—Ä–∑–∏–Ω–∞ 0..95 —Å —à–∞–≥–æ–º 5 ‚Äî –ø–æ–¥–æ–π–¥—ë—Ç –∏ –¥–ª—è MFI
    classify_abs_delta,    # up/flat/down –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É Œµ (m5=0.3, m15=0.4, h1=0.6)
    bar_open_iso,
)

log = logging.getLogger("MFI_PACK")

# üî∏ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MFI –∏–∑ KV ind:{symbol}:{tf}:mfi{length}
async def get_closed_mfi(redis, symbol: str, tf: str, length: int) -> float | None:
    key = f"ind:{symbol}:{tf}:mfi{length}"
    try:
        s = await redis.get(key)
        return float(s) if s is not None else None
    except Exception:
        return None

# üî∏ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–∫–µ—Ç MFI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ length
async def build_mfi_pack(symbol: str, tf: str, length: int, now_ms: int,
                         precision: int, redis, compute_fn) -> dict | None:
    """
    symbol      ‚Äî —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä SOLUSDT)
    tf          ‚Äî —Ç–∞–π–º—Ñ—Ä–µ–π–º (m5/m15/h1)
    length      ‚Äî –¥–ª–∏–Ω–∞ MFI (–Ω–∞–ø—Ä–∏–º–µ—Ä 14)
    now_ms      ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC –≤ –º—Å
    precision   ‚Äî —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª—É (–¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π)
    redis       ‚Äî –∫–ª–∏–µ–Ω—Ç Redis
    compute_fn  ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ compute_snapshot_values_async
    """

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é –±–∞—Ä–∞
    bar_open_ms = floor_to_bar(now_ms, tf)

    # –≥—Ä—É–∑–∏–º OHLCV
    df = await load_ohlcv_df(redis, symbol, tf, bar_open_ms, 800)
    if df is None or df.empty:
        log.warning(f"[MFI_PACK] {symbol}/{tf} mfi{length}: no ohlcv")
        return None

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º live –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ compute_snapshot_values_async
    inst = {
        "indicator": "mfi",
        "params": {"length": str(length)},
        "timeframe": tf,
    }
    values = await compute_fn(inst, symbol, df, precision)
    if not values:
        log.warning(f"[MFI_PACK] {symbol}/{tf} mfi{length}: compute failed")
        return None

    param_name = f"mfi{length}"
    sval = values.get(param_name)
    if sval is None:
        log.warning(f"[MFI_PACK] {symbol}/{tf} mfi{length}: no value")
        return None

    try:
        v_live = float(sval)
    except Exception:
        log.warning(f"[MFI_PACK] {symbol}/{tf} mfi{length}: bad value {sval}")
        return None

    # –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫—Ä–∞—Ç–Ω–∞—è 5)
    bucket = rsi_bucket_low(v_live)

    # –∑–∞–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    v_closed = await get_closed_mfi(redis, symbol, tf, length)
    if v_closed is None:
        delta = 0.0
        trend = "flat"
    else:
        delta = v_live - v_closed
        trend = classify_abs_delta(delta, tf)

    # —Å–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞
    pack = {
        "base": f"mfi{length}",
        "pack": {
            "value": f"{v_live:.2f}",
            "bucket_low": bucket,
            "delta": f"{delta:.2f}",
            "trend": trend,
            "ref": "closed",
            "open_time": bar_open_iso(bar_open_ms),
        },
    }

    return pack