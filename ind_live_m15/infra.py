# infra.py ‚Äî –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import os
import logging
import asyncpg
import redis.asyncio as aioredis
import asyncio

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_URL = os.getenv("REDIS_URL")
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def init_pg_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (async + health-check)
async def init_redis_client():
    client = aioredis.from_url(
        REDIS_URL,
        decode_responses=True,
        encoding="utf-8",
        socket_connect_timeout=3,
        socket_keepalive=True,
    )
    # health-check —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(3):
        try:
            await client.ping()
            return client
        except Exception:
            if attempt == 2:
                raise
            await asyncio.sleep(1 + attempt)

# üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ (c –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º)
async def run_safe_loop(coro_fn, name: str, retry_delay: int = 5):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É coro_fn().
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–º—è –≤–æ—Ä–∫–µ—Ä–∞, –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
    –ù–∞ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —á–µ—Ä–µ–∑ retry_delay —Å–µ–∫—É–Ω–¥.
    –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä ¬´–Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è¬ª (–≤–µ—Ä–Ω—É–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) ‚Äî —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç.
    """
    base_log = logging.getLogger("INFRA_PY")
    attempt = 0
    while True:
        attempt += 1
        try:
            base_log.info(f"[{name}] –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ (attempt={attempt})")
            await coro_fn()
            # –µ—Å–ª–∏ –∫–æ—Ä—É—Ç–∏–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ—Ç–∏–ø–∏—á–Ω–æ –¥–ª—è –≤–µ—á–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            base_log.warning(f"[{name}] –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–≤–µ—Ä–Ω—É–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ); –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} c.")
        except asyncio.CancelledError:
            # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            base_log.info(f"[{name}] –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError)")
            raise
        except Exception as e:
            base_log.error(f"[{name}] –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            base_log.info(f"[{name}] –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} c.")
        # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        await asyncio.sleep(retry_delay)

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )