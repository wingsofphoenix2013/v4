# packs/pack_utils.py ‚Äî —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è on-demand –ø–∞–∫–µ—Ç–æ–≤ (RSI/MFI/‚Ä¶): –≤—Ä–µ–º—è –±–∞—Ä–∞, –∑–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ TS, –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç—Ä–µ–Ω–¥—ã

import asyncio
import logging
from datetime import datetime, timezone
import pandas as pd

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("PACK_UTILS")

# üî∏ –¢–∞–π–º—à–∞–≥–∏ TF (–º—Å –∏ –º–∏–Ω—É—Ç—ã)
STEP_MIN = {"m5": 5, "m15": 15, "h1": 60}
STEP_MS  = {"m5": 300_000, "m15": 900_000, "h1": 3_600_000}

# üî∏ –ü—Ä–µ—Ñ–∏–∫—Å—ã Redis
BB_TS_PREFIX = "bb:ts"  # bb:ts:{symbol}:{tf}:{field}
IND_KV_PREFIX = "ind"   # ind:{symbol}:{tf}:{param_name}

# üî∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫ –Ω–∞—á–∞–ª—É –±–∞—Ä–∞
def floor_to_bar(ts_ms: int, tf: str) -> int:
    step = STEP_MS[tf]
    return (ts_ms // step) * step

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ OHLCV –∏–∑ Redis TS (–æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º) –∏ —Å–±–æ—Ä–∫–∞ DataFrame
async def load_ohlcv_df(redis, symbol: str, tf: str, end_ts_ms: int, bars: int = 800):
    if tf not in STEP_MS:
        return None

    step = STEP_MS[tf]
    start_ts = end_ts_ms - (bars - 1) * step

    fields = ["o", "h", "l", "c", "v"]
    keys = {f: f"{BB_TS_PREFIX}:{symbol}:{tf}:{f}" for f in fields}

    # –æ–¥–∏–Ω –±–∞—Ç—á –Ω–∞ 5 TS.RANGE
    tasks = {f: redis.execute_command("TS.RANGE", keys[f], start_ts, end_ts_ms) for f in fields}
    results = await asyncio.gather(*tasks.values(), return_exceptions=True)

    series = {}
    for f, res in zip(tasks.keys(), results):
        if isinstance(res, Exception):
            log.warning(f"[TS] RANGE {keys[f]} error: {res}")
            continue
        if res:
            try:
                series[f] = {int(ts): float(val) for ts, val in res if val is not None}
            except Exception as e:
                log.warning(f"[TS] parse {keys[f]} error: {e}")

    if not series or "c" not in series or not series["c"]:
        return None

    # –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ –º–µ—Ç–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ close)
    idx = sorted(series["c"].keys())
    df = None
    for f in fields:
        col_map = series.get(f, {})
        s = pd.Series({ts: col_map.get(ts) for ts in idx})
        s.index = pd.to_datetime(s.index, unit="ms")
        s.name = f
        df = s.to_frame() if df is None else df.join(s, how="outer")

    if df is None or df.empty:
        return None

    df.index.name = "open_time"
    return df.sort_index()

# üî∏ RSI: –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞, —à–∞–≥ 5)
def rsi_bucket_low(value: float) -> int:
    x = max(0.0, min(99.9999, float(value)))
    return int((int(x) // 5) * 5)

# üî∏ RSI: –ø–æ—Ä–æ–≥–∏ ¬´–º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞¬ª –ø–æ TF (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã RSI)
RSI_EPS = {"m5": 0.3, "m15": 0.4, "h1": 0.6}

# üî∏ RSI: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –¥–µ–ª—å—Ç–µ (up/flat/down)
def classify_abs_delta(delta: float, tf: str) -> str:
    eps = RSI_EPS.get(tf, 0.4)
    if delta >= eps:
        return "up"
    if delta <= -eps:
        return "down"
    return "flat"

# üî∏ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI –∏–∑ KV ind:{symbol}:{tf}:rsi{length}
async def get_closed_rsi(redis, symbol: str, tf: str, length: int) -> float | None:
    key = f"{IND_KV_PREFIX}:{symbol}:{tf}:rsi{length}"
    try:
        s = await redis.get(key)
        return float(s) if s is not None else None
    except Exception:
        return None

# üî∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: ISO-–≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞—Ä–∞ –ø–æ ms
def bar_open_iso(bar_open_ms: int) -> str:
    # —Å–æ–∑–¥–∞—ë–º aware-UTC, –∑–∞—Ç–µ–º —Å–Ω–∏–º–∞–µ–º tzinfo, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ISO
    return datetime.fromtimestamp(bar_open_ms / 1000, tz=timezone.utc) \
                   .replace(tzinfo=None) \
                   .isoformat()