# signal_processor.py

import asyncio
import logging

from infra import infra

log = logging.getLogger("SIGNAL_PROCESSOR")

# üî∏ –ù–∞–∑–≤–∞–Ω–∏–µ Redis-—Å—Ç—Ä–∏–º–∞ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
STRATEGY_INPUT_STREAM = "strategy_input_stream"

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def run_signal_loop(strategy_registry):
    log.info("üö¶ [SIGNAL_PROCESSOR] –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

    redis = infra.redis_client
    last_id = "$"  # üî∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∏–º–∞

    while True:
        try:
            # üî∏ –ß—Ç–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis (–±–µ–∑ consumer group)
            response = await redis.xread(
                streams={STRATEGY_INPUT_STREAM: last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id

                    strategy_id = msg_data.get("strategy_id")
                    signal_id = msg_data.get("signal_id")
                    symbol = msg_data.get("symbol")
                    direction = msg_data.get("direction")
                    time = msg_data.get("time")

                    if not all([strategy_id, signal_id, symbol, direction, time]):
                        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {msg_data}")
                        continue

                    log.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: strategy={strategy_id}, symbol={symbol}, direction={direction}")

        except Exception as e:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)