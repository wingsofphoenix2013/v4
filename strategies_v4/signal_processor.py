# signal_processor.py

import asyncio
import logging
from datetime import datetime
import json

from infra import infra
from position_state_loader import position_registry
from config_loader import config

log = logging.getLogger("SIGNAL_PROCESSOR")

# üî∏ –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤
STRATEGY_INPUT_STREAM = "strategy_input_stream"
SIGNAL_LOG_STREAM = "signal_log_queue"

# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
def route_signal_base(meta, signal_direction, symbol):
    key = (meta["id"], symbol)
    position = position_registry.get(key)

    if position and position.direction == signal_direction:
        return "ignore", "—É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"

    if position is None:
        if meta["allow_open"]:
            return "new_entry", "–≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω"
        return "ignore", "–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω (allow_open = false)"

    if not meta["reverse"] and not meta["sl_protection"]:
        return "ignore", "–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω, –∑–∞—â–∏—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞"
    if not meta["reverse"] and meta["sl_protection"]:
        return "protect", "–≤–∫–ª—é—á–µ–Ω–∞ SL-–∑–∞—â–∏—Ç–∞"
    if meta["reverse"] and meta["sl_protection"]:
        return "reverse", "—Ä–∞–∑—Ä–µ—à—ë–Ω —Ä–µ–≤–µ—Ä—Å"

    return "ignore", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def run_signal_loop(strategy_registry):
    log.info("üö¶ [SIGNAL_PROCESSOR] –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

    redis = infra.redis_client
    last_id = "$"

    while True:
        try:
            response = await redis.xread(
                streams={STRATEGY_INPUT_STREAM: last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id

                    strategy_id = int(msg_data.get("strategy_id"))
                    signal_id = int(msg_data.get("signal_id"))
                    symbol = msg_data.get("symbol")
                    direction = msg_data.get("direction")
                    time = msg_data.get("time")

                    if not all([strategy_id, signal_id, symbol, direction, time]):
                        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {msg_data}")
                        continue

                    strategy = config.strategies.get(strategy_id)
                    if not strategy:
                        log.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.strategies")
                        continue

                    meta = strategy["meta"]
                    route, note = route_signal_base(meta, direction, symbol)

                    if route == "new_entry" and not meta["use_all_tickers"]:
                        allowed = config.strategy_tickers.get(strategy_id, set())
                        if symbol not in allowed:
                            route = "ignore"
                            note = "—Ç–∏–∫–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"

                    # üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –¥–æ–ø—É—â–µ–Ω new_entry)
                    if route == "new_entry":
                        strategy_name = meta["name"]
                        strategy_obj = strategy_registry.get(strategy_name)

                        if not strategy_obj:
                            route = "ignore"
                            note = f"strategy_registry: '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        else:
                            context = {}  # –ø–æ–∫–∞ –ø—É—Å—Ç–æ
                            if not strategy_obj.validate_signal(msg_data, context):
                                route = "ignore"
                                note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: validate_signal() = False"

                    if route == "ignore":
                        log.info(f"üö´ –û–¢–ö–õ–û–ù–ï–ù–û: strategy={strategy_id}, symbol={symbol}, reason={note}")
                    else:
                        log.info(f"‚úÖ –î–û–ü–£–©–ï–ù–û: strategy={strategy_id}, symbol={symbol}, route={route}, note={note}")

                    log_record = {
                        "log_id": signal_id,
                        "strategy_id": strategy_id,
                        "status": route,
                        "position_id": None,
                        "note": note,
                        "logged_at": datetime.utcnow().isoformat()
                    }

                    await redis.xadd(SIGNAL_LOG_STREAM, {"data": json.dumps(log_record)})

        except Exception as e:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)