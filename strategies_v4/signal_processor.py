# signal_processor.py

import asyncio
import logging
from datetime import datetime
from decimal import Decimal
import json

from infra import infra
from position_state_loader import position_registry
from config_loader import config
from position_handler import full_protect_stop, raise_sl_to_entry, get_field, set_field

log = logging.getLogger("SIGNAL_PROCESSOR")

# üî∏ –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤
STRATEGY_INPUT_STREAM = "strategy_input_stream"
SIGNAL_LOG_STREAM = "signal_log_queue"

# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
def route_signal_base(meta, signal_direction, symbol):
    key = (meta["id"], symbol)
    position = position_registry.get(key)

    if position and position.direction == signal_direction:
        return "ignore", "—É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"

    if position is None:
        if meta["allow_open"]:
            return "new_entry", "–≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω"
        return "ignore", "–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω (allow_open = false)"

    if not meta["reverse"] and not meta["sl_protection"]:
        return "ignore", "–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω, –∑–∞—â–∏—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞"
    if not meta["reverse"] and meta["sl_protection"]:
        return "protect", "–≤–∫–ª—é—á–µ–Ω–∞ SL-–∑–∞—â–∏—Ç–∞"
    if meta["reverse"] and meta["sl_protection"]:
        return "reverse", "—Ä–∞–∑—Ä–µ—à—ë–Ω —Ä–µ–≤–µ—Ä—Å"

    return "ignore", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

# üî∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞—â–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ (protect)
async def handle_protect_signal(msg_data):
    strategy_id = int(msg_data.get("strategy_id"))
    symbol = msg_data.get("symbol")
    is_reverse = msg_data.get("is_reverse", False)  # üîπ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≤–µ—Ä—Å–µ

    position = position_registry.get((strategy_id, symbol))
    if not position:
        log.debug(f"[PROTECT] –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: strategy={strategy_id}, symbol={symbol}")
        return

    redis = infra.redis_client
    mark_str = await redis.get(f"price:{symbol}")
    if not mark_str:
        log.warning(f"[PROTECT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å markprice –¥–ª—è {symbol}")
        return

    mark = Decimal(mark_str)
    entry = position.entry_price

    # üîπ –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–∑–∏—Ü–∏—è –≤ –∑–æ–Ω–µ —É–±—ã—Ç–∫–∞ ‚Üí –ø–æ–ª–Ω–æ–µ –∑–∞—â–∏—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if (
        (position.direction == "long" and mark <= entry) or
        (position.direction == "short" and mark >= entry)
    ):
        log.debug(
            f"[PROTECT] –ü–æ–∑–∏—Ü–∏—è –≤ –∑–æ–Ω–µ —É–±—ã—Ç–∫–∞ (mark={mark}, entry={entry}, direction={position.direction}) ‚Üí –≤—ã–∑–æ–≤ full_protect_stop"
        )
        await full_protect_stop(position, is_reverse=is_reverse)
        return

    # üîπ –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ–∑–∏—Ü–∏—è –≤ –ø–ª—é—Å–µ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ SL
    active_sl = sorted(
        [
            sl for sl in position.sl_targets
            if get_field(sl, "type") == "sl"
            and get_field(sl, "source") == "price"
            and not get_field(sl, "hit")
            and not get_field(sl, "canceled")
        ],
        key=lambda sl: get_field(sl, "level")
    )

    if not active_sl:
        log.debug(f"[PROTECT] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.uid}")
        return

    sl = active_sl[0]
    sl_price = get_field(sl, "price")

    if (
        (position.direction == "long" and sl_price < entry) or
        (position.direction == "short" and sl_price > entry)
    ):
        log.debug(
            f"[PROTECT] SL –Ω–∏–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è: sl={sl_price}, entry={entry}, direction={position.direction} ‚Üí –ø–µ—Ä–µ–º–µ—â–∞–µ–º"
        )
        await raise_sl_to_entry(position, sl)
    else:
        log.debug(
            f"[PROTECT] SL —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ entry –∏–ª–∏ –ª—É—á—à–µ: sl={sl_price}, entry={entry}, direction={position.direction} ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º"
        )
# üî∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–≤–µ—Ä—Å–∞ (reverse)
async def handle_reverse_signal(msg_data):
    strategy_id = int(msg_data.get("strategy_id"))
    symbol = msg_data.get("symbol")

    position = position_registry.get((strategy_id, symbol))
    if not position:
        log.debug(f"[REVERSE] –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: strategy={strategy_id}, symbol={symbol}")
        return

    # üîç –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π TP (source –º–æ–∂–µ—Ç –±—ã—Ç—å price –∏–ª–∏ signal)
    active_tp = sorted(
        [
            t for t in position.tp_targets
            if get_field(t, "type") == "tp"
            and not get_field(t, "hit")
            and not get_field(t, "canceled")
        ],
        key=lambda t: get_field(t, "level")
    )

    if not active_tp:
        log.debug(f"[REVERSE] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TP –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.uid}")
        return

    tp = active_tp[0]
    tp_source = get_field(tp, "source")

    # üß≠ –í—ã–±–æ—Ä –ø—É—Ç–∏: SL-–∑–∞—â–∏—Ç–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å —Ä–µ–≤–µ—Ä—Å–æ–º
    if tp_source == "price":
        log.debug(f"[REVERSE] –ê–∫—Ç–∏–≤–Ω—ã–π TP —á–µ—Ä–µ–∑ —Ü–µ–Ω—É ‚Üí route: protect")
        await handle_protect_signal({**msg_data, "is_reverse": True})  # –ø–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥ –ª–æ–≥–∏—á–µ—Å–∫–∏
    elif tp_source == "signal":
        log.debug(f"[REVERSE] –ê–∫—Ç–∏–≤–Ω—ã–π TP —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–∏–≥–Ω–∞–ª–∞ ‚Üí route: full_reverse_stop")
        from position_handler import full_reverse_stop
        await full_reverse_stop(position, msg_data)
    else:
        log.warning(f"[REVERSE] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø source –≤ TP: {tp_source}")

# üî∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤: –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ route
async def route_and_dispatch_signal(msg_data, strategy_registry, redis):
    route = msg_data.get("route")
    strategy_id = int(msg_data.get("strategy_id"))
    symbol = msg_data.get("symbol")

    log.debug(f"[ROUTER] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: symbol={symbol}, strategy={strategy_id}, route={route}")

    if route == "new_entry":
        strategy_name = config.strategies[strategy_id]["meta"]["name"]
        strategy_obj = strategy_registry.get(strategy_name)
        if not strategy_obj:
            log.warning(f"‚ö†Ô∏è Strategy not found in registry: {strategy_name}")
            return

        context = {"redis": redis}
        result = strategy_obj.run(msg_data, context)
        if asyncio.iscoroutine(result):
            await result
        log.debug(f"[ROUTER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: new_entry {symbol} ({strategy_id})")

    elif route == "protect":
        await handle_protect_signal(msg_data)
        log.debug(f"[ROUTER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: protect {symbol} ({strategy_id})")

    elif route == "reverse":
        await handle_reverse_signal(msg_data)
        log.debug(f"[ROUTER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: reverse {symbol} ({strategy_id})")

    elif route == "ignore":
        pass  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ

    else:
        log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ dispatch: {route}")
        
# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def run_signal_loop(strategy_registry):
    log.debug("üö¶ [SIGNAL_PROCESSOR] –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

    redis = infra.redis_client
    last_id = "$"

    while True:
        try:
            response = await redis.xread(
                streams={STRATEGY_INPUT_STREAM: last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id

                    log.debug(f"[SIGNAL_LOOP] üì® –°–∏–≥–Ω–∞–ª –∏–∑ –ø–æ—Ç–æ–∫–∞: {msg_data}")

                    symbol = msg_data.get("symbol")
                    direction = msg_data.get("direction")
                    time = msg_data.get("time")
                    log_id = msg_data.get("log_id")
                    signal_id = int(msg_data.get("signal_id", 0) or 0)

                    if not all([symbol, direction, time, log_id, signal_id]):
                        log.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {msg_data}")
                        continue

                    seen_keys = set()
                    tasks = []

                    for strategy_id, strategy in config.strategies.items():
                        meta = strategy["meta"]
                        key = (strategy_id, symbol)

                        if key in seen_keys:
                            continue  # –∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        seen_keys.add(key)

                        route, note = route_signal_base(meta, direction, symbol)

                        if route == "new_entry" and not meta.get("use_all_tickers", False):
                            allowed = config.strategy_tickers.get(strategy_id, set())
                            if symbol not in allowed:
                                route = "ignore"
                                note = "—Ç–∏–∫–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"

                        strategy_name = meta["name"]
                        strategy_obj = strategy_registry.get(strategy_name)

                        async def process_strategy(strategy_id=strategy_id, meta=meta, route=route, note=note):
                            context = {"redis": redis}
                            local_msg = msg_data.copy()
                            local_msg["strategy_id"] = strategy_id
                            local_msg["route"] = route

                            if route == "new_entry":
                                if not strategy_obj:
                                    return await log_ignore(strategy_id, log_id, None, "strategy not found")

                                result = strategy_obj.validate_signal(local_msg, context)
                                if asyncio.iscoroutine(result):
                                    result = await result

                                if result != True:
                                    if result == "logged":
                                        return  # —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
                                    return await log_ignore(strategy_id, log_id, None, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π")

                            # –î–û–ü–£–©–ï–ù–û
                            key = (strategy_id, symbol)
                            position = position_registry.get(key)
                            if position:
                                local_msg["position_uid"] = position.uid

                            await route_and_dispatch_signal(local_msg, strategy_registry, redis)

                        async def log_ignore(strategy_id, log_id, position_uid, note):
                            if note:
                                log.debug(f"üö´ –û–¢–ö–õ–û–ù–ï–ù–û: strategy={strategy_id}, symbol={symbol}, reason={note}")
                                log_record = {
                                    "log_id": log_id,
                                    "strategy_id": strategy_id,
                                    "status": "ignore",
                                    "position_uid": position_uid,
                                    "note": note,
                                    "logged_at": datetime.utcnow().isoformat()
                                }
                                await redis.xadd(SIGNAL_LOG_STREAM, {"data": json.dumps(log_record)})

                        tasks.append(process_strategy())

                    if tasks:
                        await asyncio.gather(*tasks)

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)