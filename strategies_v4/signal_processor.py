# signal_processor.py

import asyncio
import logging
from datetime import datetime
from infra import infra, get_price
from config_loader import config
from position_state_loader import position_registry
from position_handler import Target, full_protect_stop

# üî∏ –õ–æ–≥–≥–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
log = logging.getLogger("SIGNAL_PROCESSOR")

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategy_registry = {}

def set_strategy_registry(registry: dict):
    global strategy_registry
    strategy_registry = registry

# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç Redis Stream –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
async def run_signal_loop():
    stream = "strategy_input_stream"
    last_id = "$"

    log.debug(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Stream: {stream}")

    while True:
        try:
            entries = await infra.redis_client.xread({stream: last_id}, count=50, block=1000)
            if not entries:
                continue

            for stream_name, records in entries:
                for record_id, data in records:
                    last_id = record_id
                    asyncio.create_task(process_signal(data))

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Stream")
            await asyncio.sleep(5)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async def process_signal(data: dict):
    try:
        strategy_id = int(data["strategy_id"])
        symbol = data["symbol"]
        direction = data["direction"]
        log_uid = data["log_uid"]
        received_at = data["received_at"]

        strategy = config.strategies.get(strategy_id)
        if not strategy:
            return await route_ignore(
                strategy_id, symbol, direction, log_uid,
                "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            )

        if not strategy["allow_open"]:
            if not strategy["reverse"]:
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, —Ä–µ–≤–µ—Ä—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
                )
            else:
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –∑–∞–ø—É—Å–∫ —Ä–µ–≤–µ—Ä—Å–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)"
                )

        if not strategy["use_all_tickers"]:
            allowed = config.strategy_tickers.get(strategy_id, set())
            if symbol not in allowed:
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "—Ç–∏–∫–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
                )
        # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
        position = position_registry.get((strategy_id, symbol))
        if position:
            if position.direction == direction:
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "–ø–æ–≤—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É"
                )

            if not strategy.get("reverse", False) and not strategy.get("sl_protection", False):
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "—Ä–µ–≤–µ—Ä—Å –∏ SL –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
                )

            if not strategy.get("reverse", False) and strategy.get("sl_protection", True):
                price = await get_price(symbol)
                if price is None:
                    log.warning(f"‚ö†Ô∏è PROTECT: –Ω–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {symbol}, —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
                    return

                entry = position.entry_price
                price_is_worse = (
                    price < entry if position.direction == "long"
                    else price > entry
                )

                if price_is_worse:
                    await full_protect_stop(position)
                    await route_protect(
                        strategy_id, symbol, log_uid,
                        "–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ SL-protect",
                        position.uid
                    )
                else:
                    sl = next((
                        s for s in position.sl_targets
                        if not s.hit and not s.canceled and s.price is not None
                    ), None)

                    if sl:
                        sl_below_entry = (
                            sl.price < entry if position.direction == "long"
                            else sl.price > entry
                        )

                        if sl_below_entry:
                            sl.canceled = True

                            new_sl = Target(
                                type="sl",
                                level=1,
                                price=entry,
                                quantity=sl.quantity,
                                hit=False,
                                hit_at=None,
                                canceled=False
                            )
                            position.sl_targets.append(new_sl)
                            log.info(f"üõ°Ô∏è PROTECT: SL –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ {entry} –¥–ª—è {position.uid}")

                            await route_protect(
                                strategy_id, symbol, log_uid,
                                "–æ–±–Ω–æ–≤–ª—ë–Ω SL –¥–æ —É—Ä–æ–≤–Ω—è entry",
                                position.uid
                            )
                        else:
                            log.info(f"üõ°Ô∏è PROTECT: SL —É–∂–µ –Ω–∞ –≤—Ö–æ–¥–µ –∏–ª–∏ –≤—ã—à–µ ({sl.price} ‚â• {entry}), –ø—Ä–æ–ø—É—â–µ–Ω–æ")

                            await route_protect(
                                strategy_id, symbol, log_uid,
                                "–¥–µ–π—Å—Ç–≤–∏–π –ø–æ SL-protect –Ω–µ—Ç, —É—Ä–æ–≤–µ–Ω—å SL –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞",
                                position.uid
                            )
                return

            if strategy.get("reverse", False) and strategy.get("sl_protection", False):
                return await route_ignore(
                    strategy_id, symbol, direction, log_uid,
                    "–º–∞—Ä—à—Ä—É—Ç reverse –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
                )
        # üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ new_entry ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–∑–æ–≤—É
        modname = strategy.get("module_name", f"strategy_{strategy_id}")
        strategy_instance = strategy_registry.get(modname)

        if not strategy_instance:
            return await route_ignore(
                strategy_id, symbol, direction, log_uid,
                f"–∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{modname}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        context = {"redis": infra.redis_client}
        result = await strategy_instance.validate_signal(data, context)

        if result is True:
            await strategy_instance.run(data, context)
            return

        elif isinstance(result, tuple) and result[0] == "ignore":
            note = result[1]
            return await route_ignore(strategy_id, symbol, direction, log_uid, note)

        else:
            return await route_ignore(
                strategy_id, symbol, direction, log_uid,
                "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç validate_signal()"
            )

    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞")
# üî∏ –ú–∞—Ä—à—Ä—É—Ç ignore: –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑
async def route_ignore(strategy_id, symbol, direction, log_uid, reason: str):
    log.debug(f"‚ö†Ô∏è [IGNORE] {symbol} (strategy {strategy_id}, {direction}): {reason}")

    record = {
        "log_uid": log_uid,
        "strategy_id": str(strategy_id),
        "status": "ignore",
        "note": reason,
        "position_uid": "",
        "logged_at": datetime.utcnow().isoformat()
    }

    try:
        await infra.redis_client.xadd("signal_log_queue", record)
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ ignore-–ª–æ–≥–∞ –≤ Redis")
# üî∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ SL-protect
async def route_protect(strategy_id, symbol, log_uid, note, position_uid):
    record = {
        "log_uid": log_uid,
        "strategy_id": str(strategy_id),
        "status": "protect",
        "note": note,
        "position_uid": str(position_uid),
        "logged_at": datetime.utcnow().isoformat()
    }
    try:
        await infra.redis_client.xadd("signal_log_queue", record)
    except Exception:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ protect –≤ signal_log_queue")