# config_loader.py ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π/—Ç–∏–∫–µ—Ä–æ–≤ —Å –≥–æ—Ä—è—á–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (Streams)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
from typing import Dict, Set

from infra import infra

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–æ–≤/—Å—Ç—Ä–∏–º–æ–≤
PUBSUB_CHANNEL_TICKERS = "bb:tickers_events"
PUBSUB_CHANNEL_STRATEGIES = "strategies_v4_events"
STRATEGY_UPDATE_STREAM = "strategy_update_stream"   # –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (update)
STRATEGY_STATE_STREAM = "strategy_state_stream"     # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (applied)

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("CONFIG")

# üî∏ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ —Ç–∏–ø—É bool
def normalize_strategy_flags(strategy: dict) -> None:
    for key in (
        "enabled",
        "use_all_tickers",
        "use_stoploss",
        "allow_open",
        "reverse",
        "sl_protection",
    ):
        if key in strategy:
            strategy[key] = str(strategy[key]).lower() == "true"

# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "applied" –≤ Stream (–¥–≤—É—Ö—Ñ–∞–∑–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª)
async def _publish_strategy_applied(strategy_id: int) -> None:
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    payload = {
        "type": "strategy",
        "action": "applied",
        "id": str(strategy_id),
    }
    try:
        await infra.redis_client.xadd(STRATEGY_STATE_STREAM, payload)
        log.debug("üì§ APPLIED ‚Üí %s: sid=%s", STRATEGY_STATE_STREAM, strategy_id)
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å 'applied' –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ id=%s", strategy_id)

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class ConfigState:
    def __init__(self):
        self.tickers: Dict[str, dict] = {}
        self.strategies: Dict[int, dict] = {}
        self.strategy_tickers: Dict[int, Set[str]] = {}
        self._lock = asyncio.Lock()

    # üî∏ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async def reload_all(self):
        async with self._lock:
            await self._load_tickers()
            await self._load_strategies()
            await self._load_strategy_tickers()

    # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    async def reload_ticker(self, symbol: str):
        async with self._lock:
            row = await infra.pg_pool.fetchrow(
                "SELECT * FROM tickers_bb WHERE symbol = $1 AND status = 'enabled' AND tradepermission = 'enabled'",
                symbol,
            )
            if row:
                self.tickers[symbol] = dict(row)
                log.info("üîÑ –¢–∏–∫–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: %s", symbol)
            else:
                self.tickers.pop(symbol, None)
                log.info("‚ùå –¢–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω): %s", symbol)

    # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
    async def remove_ticker(self, symbol: str):
        async with self._lock:
            self.tickers.pop(symbol, None)
            log.info("üóëÔ∏è –¢–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω: %s", symbol)

    # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è applied)
    async def reload_strategy(self, strategy_id: int):
        async with self._lock:
            row = await infra.pg_pool.fetchrow(
                "SELECT * FROM strategies_v4 WHERE id = $1 AND enabled = true AND archived = false",
                strategy_id,
            )
            if not row:
                self.strategies.pop(strategy_id, None)
                self.strategy_tickers.pop(strategy_id, None)
                log.info("üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–∞–Ω—Ç–∞–π–º–∞: id=%s", strategy_id)
                # –ø—É–±–ª–∏–∫—É–µ–º applied, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, informer) –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await _publish_strategy_applied(strategy_id)
                return

            strategy = dict(row)
            strategy["module_name"] = strategy["name"]

            normalize_strategy_flags(strategy)

            log.debug(
                "[DEBUG-NORM] Strategy %s ‚Üí enabled=%s reverse=%s sl_protection=%s allow_open=%s",
                strategy_id,
                strategy.get("enabled"),
                strategy.get("reverse"),
                strategy.get("sl_protection"),
                strategy.get("allow_open"),
            )

            strategy["tp_levels"] = [
                dict(r)
                for r in await infra.pg_pool.fetch(
                    "SELECT * FROM strategy_tp_levels_v4 WHERE strategy_id = $1 ORDER BY level",
                    strategy_id,
                )
            ]
            strategy["sl_rules"] = [
                dict(r)
                for r in await infra.pg_pool.fetch(
                    "SELECT * FROM strategy_tp_sl_v4 WHERE strategy_id = $1",
                    strategy_id,
                )
            ]

            # –æ–±–æ–≥–∞—â–µ–Ω–∏–µ sl_rules –ø–æ–ª–µ–º level
            level_map = {lvl["id"]: lvl["level"] for lvl in strategy["tp_levels"]}
            for rule in strategy["sl_rules"]:
                rule["level"] = level_map.get(rule["tp_level_id"])

            self.strategies[strategy_id] = strategy

            tickers = await infra.pg_pool.fetch(
                """
                SELECT t.symbol
                FROM strategy_tickers_v4 st
                JOIN tickers_bb t ON st.ticker_id = t.id
                WHERE st.strategy_id = $1 AND st.enabled = true AND t.status = 'enabled' AND t.tradepermission = 'enabled'
                """,
                strategy_id,
            )
            self.strategy_tickers[strategy_id] = {r["symbol"] for r in tickers}

            log.info("üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [id=%s] %s", strategy_id, strategy["human_name"])

            # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–µ—Ç–∞–ª–µ–π
            log.debug(
                "üß† –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è %s | TP=%s, SL=%s",
                strategy_id,
                [
                    {
                        "level": r["level"],
                        "value": r["tp_value"],
                        "type": r["tp_type"],
                        "volume": r["volume_percent"],
                    }
                    for r in strategy["tp_levels"]
                ],
                [
                    {
                        "tp_level_id": r["tp_level_id"],
                        "level": r["level"],
                        "mode": r["sl_mode"],
                    }
                    for r in strategy["sl_rules"]
                ],
            )

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–Ω–µ lock: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await _publish_strategy_applied(strategy_id)

    # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è applied)
    async def remove_strategy(self, strategy_id: int):
        async with self._lock:
            self.strategies.pop(strategy_id, None)
            self.strategy_tickers.pop(strategy_id, None)
            log.info("üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞: id=%s", strategy_id)
        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–Ω–µ lock
        await _publish_strategy_applied(strategy_id)

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º)
    async def _load_tickers(self):
        rows = await infra.pg_pool.fetch(
            "SELECT * FROM tickers_bb WHERE status = 'enabled' AND tradepermission = 'enabled'"
        )
        self.tickers = {r["symbol"]: dict(r) for r in rows}

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–±–µ–∑ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö)
    async def _load_strategies(self):
        rows = await infra.pg_pool.fetch(
            "SELECT * FROM strategies_v4 WHERE enabled = true AND archived = false"
        )

        self.strategies = {}
        for row in rows:
            strategy_id = row["id"]
            strategy = dict(row)
            strategy["module_name"] = strategy["name"]

            normalize_strategy_flags(strategy)

            log.debug(
                "[DEBUG-NORM] Strategy %s ‚Üí enabled=%s reverse=%s sl_protection=%s allow_open=%s",
                strategy_id,
                strategy.get("enabled"),
                strategy.get("reverse"),
                strategy.get("sl_protection"),
                strategy.get("allow_open"),
            )

            strategy["tp_levels"] = [
                dict(r)
                for r in await infra.pg_pool.fetch(
                    "SELECT * FROM strategy_tp_levels_v4 WHERE strategy_id = $1 ORDER BY level",
                    strategy_id,
                )
            ]
            strategy["sl_rules"] = [
                dict(r)
                for r in await infra.pg_pool.fetch(
                    "SELECT * FROM strategy_tp_sl_v4 WHERE strategy_id = $1",
                    strategy_id,
                )
            ]

            # –æ–±–æ–≥–∞—â–µ–Ω–∏–µ sl_rules –ø–æ–ª–µ–º level
            level_map = {lvl["id"]: lvl["level"] for lvl in strategy["tp_levels"]}
            for rule in strategy["sl_rules"]:
                rule["level"] = level_map.get(rule["tp_level_id"])

            self.strategies[strategy_id] = strategy

            # –ª–æ–≥: –¥–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            log.debug(
                "üß† –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è %s | TP=%s, SL=%s",
                strategy_id,
                [
                    {
                        "level": r["level"],
                        "value": r["tp_value"],
                        "type": r["tp_type"],
                        "volume": r["volume_percent"],
                    }
                    for r in strategy["tp_levels"]
                ],
                [
                    {
                        "tp_level_id": r["tp_level_id"],
                        "level": r["level"],
                        "mode": r["sl_mode"],
                    }
                    for r in strategy["sl_rules"]
                ],
            )

    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üî —Ç–∏–∫–µ—Ä—ã
    async def _load_strategy_tickers(self):
        rows = await infra.pg_pool.fetch(
            """
            SELECT s.strategy_id, t.symbol
            FROM strategy_tickers_v4 s
            JOIN tickers_bb t ON s.ticker_id = t.id
            WHERE s.enabled = true AND t.status = 'enabled' AND t.tradepermission = 'enabled'
            """
        )
        mapping = {}
        for row in rows:
            mapping.setdefault(row["strategy_id"], set()).add(row["symbol"])
        self.strategy_tickers = mapping

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigState()

# üî∏ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def init_config_state():
    await config.reload_all()
    log.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –∏–∑ Redis Pub/Sub (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Ç—É–º–±–ª–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è)
async def config_event_listener():
    redis = infra.redis_client
    pubsub = redis.pubsub()
    await pubsub.subscribe(PUBSUB_CHANNEL_TICKERS, PUBSUB_CHANNEL_STRATEGIES)

    log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã Redis –∑–∞–ø—É—â–µ–Ω–∞")

    async for msg in pubsub.listen():
        if msg["type"] != "message":
            continue
        try:
            data = json.loads(msg["data"])
            if msg["channel"] == PUBSUB_CHANNEL_TICKERS:
                symbol = data["symbol"]
                if data["action"] == "enabled":
                    await config.reload_ticker(symbol)
                elif data["action"] == "disabled":
                    await config.remove_ticker(symbol)
            elif msg["channel"] == PUBSUB_CHANNEL_STRATEGIES:
                strategy_id = int(data["id"])
                if data["action"] == "true":
                    # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è 'applied' –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–Ω—É—Ç—Ä–∏ reload_strategy
                    await config.reload_strategy(strategy_id)
                elif data["action"] == "false":
                    # —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üí –ø—É–±–ª–∏–∫—É–µ–º 'applied' –∏–∑ remove_strategy
                    await config.remove_strategy(strategy_id)
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ Redis")

# üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ Redis Stream (–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ update)
async def listen_strategy_update_stream():
    stream = STRATEGY_UPDATE_STREAM
    group = "strategy_runtime"
    consumer = "strategy_listener_1"
    redis = infra.redis_client

    try:
        await redis.xgroup_create(stream, group, id="$", mkstream=True)
        log.info("üì° –ì—Ä—É–ø–ø–∞ %s —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è %s", group, stream)
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", group)
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info("üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: %s ‚Üí %s", stream, group)

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=group,
                consumername=consumer,
                streams={stream: ">"},
                count=100,
                block=1000,
            )
            for _, records in entries:
                for record_id, data in records:
                    try:
                        # —É—Å–ª–æ–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ "update" –∏–∑ –¥–≤—É—Ö—Ñ–∞–∑–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                        if data.get("type") == "strategy" and data.get("action") == "update":
                            sid = int(data["id"])
                            await config.reload_strategy(sid)  # –ø—É–±–ª–∏–∫–∞—Ü–∏—è 'applied' –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–Ω—É—Ç—Ä–∏
                            log.info("‚ôªÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: id=%s", sid)
                        await redis.xack(stream, group, record_id)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Ç–æ–∫–∞")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞")