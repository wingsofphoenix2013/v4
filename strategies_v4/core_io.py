# core_io.py

import asyncio
import logging
import json
from datetime import datetime
from decimal import Decimal

from infra import infra

log = logging.getLogger("CORE_IO")

SIGNAL_LOG_STREAM = "signal_log_queue"
POSITIONS_STREAM = "positions_stream"

# üî∏ –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–∞
async def write_log_entry(pool, record: dict):
    query = """
        INSERT INTO signal_log_entries_v4
        (log_id, strategy_id, status, position_uid, note, logged_at)
        VALUES ($1, $2, $3, $4, $5, $6)
    """
    async with pool.acquire() as conn:
        try:
            values = (
                int(record["log_id"]),
                int(record["strategy_id"]),
                record["status"],
                record.get("position_uid"),  # ‚Üê –±–µ–∑–æ–ø–∞—Å–Ω–æ
                record.get("note"),
                datetime.fromisoformat(record["logged_at"])
            )
            await conn.execute(query, *values)
            log.debug(f"üíæ –ó–∞–ø–∏—Å–∞–Ω –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–∞: strategy={values[1]}, status={values[2]}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥-–∑–∞–ø–∏—Å–∏: {e}")
            
# üî∏ –ó–∞–ø–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–µ–π
async def write_position_and_targets(pool, record: dict):
    async with pool.acquire() as conn:
        tx = conn.transaction()
        await tx.start()

        try:
            await conn.execute(
                """
                INSERT INTO positions_v4 (
                    position_uid, strategy_id, symbol, direction, entry_price,
                    quantity, quantity_left, status, created_at,
                    exit_price, closed_at, close_reason, pnl,
                    planned_risk, notional_value, route, log_id
                )
                VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17)
                """,
                record["position_uid"],
                int(record["strategy_id"]),
                record["symbol"],
                record["direction"],
                Decimal(record["entry_price"]),
                Decimal(record["quantity"]),
                Decimal(record["quantity_left"]),
                record["status"],
                datetime.fromisoformat(record["created_at"]),
                None,  # exit_price
                None,  # closed_at
                record.get("close_reason"),
                Decimal(record.get("pnl", "0")),
                Decimal(record["planned_risk"]),
                Decimal(record["notional_value"]),
                record["route"],
                int(record["log_id"])
            )

            for target in record.get("tp_targets", []) + record.get("sl_targets", []):
                await conn.execute(
                    """
                    INSERT INTO position_targets_v4 (
                        position_uid, type, level, price, quantity,
                        hit, hit_at, canceled, source
                    )
                    VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
                    """,
                    record["position_uid"],
                    target["type"],
                    int(target["level"]),
                    Decimal(target["price"]) if target["price"] is not None else None,
                    Decimal(target["quantity"]),
                    target["hit"],
                    datetime.fromisoformat(target["hit_at"]) if target["hit_at"] else None,
                    target["canceled"],
                    target["source"]
                )

            await tx.commit()
            log.debug(f"üíæ –ü–æ–∑–∏—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: uid={record['position_uid']}")
        except Exception as e:
            await tx.rollback()
            log.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
# üî∏ –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
async def run_signal_log_writer():
    log.info("üìù [CORE_IO] –ó–∞–ø—É—Å–∫ –ª–æ–≥–≥–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

    redis = infra.redis_client
    pool = infra.pg_pool
    last_id = "$"

    while True:
        try:
            response = await redis.xread(
                streams={SIGNAL_LOG_STREAM: last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id
                    try:
                        record = json.loads(msg_data["data"])
                        await write_log_entry(pool, record)
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Stream")
            await asyncio.sleep(5)

# üî∏ –ß—Ç–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ Redis –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
async def run_position_writer():
    log.info("üìù [CORE_IO] –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–π")

    redis = infra.redis_client
    pool = infra.pg_pool
    last_id = "$"

    while True:
        try:
            response = await redis.xread(
                streams={POSITIONS_STREAM: last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id
                    try:
                        record = json.loads(msg_data["data"])
                        await write_position_and_targets(pool, record)
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Stream (positions)")
            await asyncio.sleep(5)