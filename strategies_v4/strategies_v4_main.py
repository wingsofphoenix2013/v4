# strategies_v4_main.py

import asyncio
import logging

from infra import setup_logging, setup_pg, setup_redis_client
from config_loader import init_config_state, config_event_listener
from signal_processor import run_signal_loop
from position_handler import run_position_loop
from config_loader import config_event_listener

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
log = logging.getLogger("STRATEGY_MAIN")

# üî∏ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á —Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
async def run_safe_loop(coro_factory, label: str):
    while True:
        try:
            log.info(f"[{label}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro_factory()
        except Exception as e:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    await setup_pg()
    setup_redis_client()
    await init_config_state()

    log.info("üöÄ –í–æ—Ä–∫–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v4 –∑–∞–ø—É—â–µ–Ω—ã")

    await asyncio.gather(
        run_safe_loop(lambda: run_signal_loop(), "SIGNAL_PROCESSOR"),
        run_safe_loop(lambda: run_position_loop(), "POSITION_HANDLER"),
        run_safe_loop(lambda: config_event_listener(), "CONFIG_LOADER"),
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.warning("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        log.exception("üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")