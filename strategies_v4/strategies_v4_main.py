# strategies_v4_main.py

import asyncio
import logging

from infra import setup_logging, setup_pg, setup_redis_client

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
log = logging.getLogger("STRATEGY_MAIN")


# üî∏ –û–±—ë—Ä—Ç–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
async def run_safe_loop(coro_factory, label: str):
    while True:
        try:
            log.info(f"[{label}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
            await coro_factory()
        except Exception:
            log.exception(f"[{label}] ‚ùå –£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)


# üî∏ –ó–∞–≥–ª—É—à–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –Ω–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
async def stub_signal_processor():
    while True:
        await asyncio.sleep(3600)

async def stub_config_loader():
    while True:
        await asyncio.sleep(3600)

async def stub_core_io_signal_log_writer():
    while True:
        await asyncio.sleep(3600)

async def stub_position_opener():
    while True:
        await asyncio.sleep(3600)

async def stub_position_writer():
    while True:
        await asyncio.sleep(3600)

async def stub_position_handler():
    while True:
        await asyncio.sleep(3600)

async def stub_position_update_writer():
    while True:
        await asyncio.sleep(3600)

async def stub_reverse_trigger():
    while True:
        await asyncio.sleep(3600)


# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    log.info("üõ†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    await setup_pg()
    log.info("üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    setup_redis_client()
    log.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # TODO: init_config_state()  ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    # TODO: load_position_state() ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î
    # TODO: load_strategies()     ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è strategy_registry
    strategy_registry = {}

    log.info("üöÄ –ó–∞–ø—É—Å–∫ asyncio-–≤–æ—Ä–∫–µ—Ä–æ–≤")

    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
    await asyncio.gather(
        run_safe_loop(stub_signal_processor, "SIGNAL_PROCESSOR"),
        run_safe_loop(stub_config_loader, "CONFIG_LOADER"),
        run_safe_loop(stub_core_io_signal_log_writer, "CORE_IO"),
        run_safe_loop(stub_position_opener, "POSITION_OPENER"),
        run_safe_loop(stub_position_writer, "POSITION_WRITER"),
        run_safe_loop(stub_position_handler, "POSITION_HANDLER"),
        run_safe_loop(stub_position_update_writer, "POSITION_UPDATE_WRITER"),
        run_safe_loop(stub_reverse_trigger, "REVERSE_TRIGGER")
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception:
        log.exception("üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")