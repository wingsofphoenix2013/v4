import logging
import json

log = logging.getLogger("strategy_521_shortmwema3")

class Strategy521Shortmwema3:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_cfg = context.get("strategy")
        if redis is None:
            return ("ignore", "–Ω–µ—Ç Redis –∫–ª–∏–µ–Ω—Ç–∞")
        if not strategy_cfg:
            return ("ignore", "–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        direction = signal["direction"].lower()
        if direction != "short":
            return ("ignore", "long —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        symbol = signal["symbol"]

        # ‚îÄ‚îÄ –®–∞–≥ 1: regime9 (m5-m15-h1)
        try:
            m5  = await redis.get(f"ind:{symbol}:m5:regime9_code")
            m15 = await redis.get(f"ind:{symbol}:m15:regime9_code")
            h1  = await redis.get(f"ind:{symbol}:h1:regime9_code")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è regime9_code –¥–ª—è {symbol}: {e}")
            return ("ignore", "regime: –æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ regime9_code")

        if not m5 or not m15 or not h1:
            return ("ignore", "regime: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ regime9_code")

        marker3_code = f"{m5}-{m15}-{h1}"

        base_id = strategy_cfg.get("market_mirrow") or strategy_cfg["id"]
        regime_key = f"oracle:mw:stat:{base_id}:short:{marker3_code}"

        try:
            raw_regime = await redis.get(regime_key)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Redis –∫–ª—é—á–∞ {regime_key}: {e}")
            return ("ignore", "regime: –æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if raw_regime is None:
            return ("ignore", "regime: –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ marker3_code")

        try:
            rdata = json.loads(raw_regime)
            r_closed = int(rdata.get("closed_trades", 0))
            r_wr = float(rdata.get("winrate", 0))
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ {regime_key}: {e}")
            return ("ignore", "regime: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if r_closed <= 2:
            return ("ignore", "regime: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        if r_wr <= 0.5:
            return ("ignore", f"regime: winrate {r_wr:.4f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞")

        # ‚îÄ‚îÄ –®–∞–≥ 2: EMA50 triplet (live) m5-m15-h1 –∏ –µ–≥–æ oracle-–∞–≥—Ä–µ–≥–∞—Ç
        live_key = f"ind_live:{symbol}:ema50_status_triplet"
        try:
            triplet = await redis.get(live_key)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ {live_key}: {e}")
            return ("ignore", "ema: –æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ EMA —Ç—Ä–∏–ø–ª–µ—Ç–∞")

        if not triplet:
            return ("ignore", "ema: –Ω–µ—Ç live EMA —Ç—Ä–∏–ø–ª–µ—Ç–∞")

        ema_key = f"oracle:emastat:comp:{base_id}:short:50:{triplet}"
        try:
            raw_ema = await redis.get(ema_key)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Redis –∫–ª—é—á–∞ {ema_key}: {e}")
            return ("ignore", "ema: –æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if raw_ema is None:
            return ("ignore", "ema: –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ EMA —Ç—Ä–∏–ø–ª–µ—Ç—É")

        try:
            edata = json.loads(raw_ema)
            e_closed = int(edata.get("closed_trades", 0))
            e_wr = float(edata.get("winrate", 0))
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ {ema_key}: {e}")
            return ("ignore", "ema: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if e_closed <= 2:
            return ("ignore", "ema: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        if e_wr <= 0.5:
            return ("ignore", f"ema: winrate {e_wr:.4f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞")

        # –û–±–µ —Å—Ç—É–ø–µ–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        return True

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")