# strategy_211_longm5m15h1.py ‚Äî –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–ª–æ–Ω–≥; laboratory_v4 TF: m5m15h1; —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è 90—Å; INFO-–ª–æ–≥–∏; –∑–∞–ø–∏—Å—å ignore –≤ signal_log_queue)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import json
import time
from datetime import datetime

from infra import infra, lab_sema_acquire, lab_sema_release
from lab_response_router import wait_lab_response

# üî∏ –õ–æ–≥–≥–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
log = logging.getLogger("strategy_211_longm5m15h1")

# üî∏ –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
class Strategy211Longm5m15h1:
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å
    async def validate_signal(self, signal, context):
        direction = signal["direction"].lower()

        # –∑–∞–ø—Ä–µ—â–∞–µ–º short
        if direction == "short":
            return ("ignore", "short —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ long
        if direction == "long":
            return True

        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

    # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def run(self, signal, context):
        redis = context.get("redis")
        strategy_cfg = context.get("strategy")
        if redis is None or strategy_cfg is None:
            note = "–Ω–µ—Ç redis –∏–ª–∏ strategy –≤ context"
            # –ø–∏—à–µ–º —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è —Å–ª–µ–¥ –≤ –ë–î
            await self._log_ignore_to_queue(redis, signal.get("strategy_id"), signal.get("log_uid"), note)
            return ("ignore", note)

        # –º–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ market_mirrow
        master_sid = strategy_cfg.get("market_mirrow")
        if not master_sid:
            note = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –º–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            log.debug("‚ö†Ô∏è [IGNORE] log_uid=%s reason=\"no_market_mirrow\"", signal.get("log_uid"))
            await self._log_ignore_to_queue(redis, signal.get("strategy_id"), signal.get("log_uid"), note)
            return ("ignore", note)

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–∞
        symbol = str(signal["symbol"]).upper()
        client_sid = str(signal["strategy_id"])
        log_uid = signal.get("log_uid")
        tfs = "m5,m15,h1"

        # —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π: "mw_only XX2", "mw_then_pack XX1", "mw_and_pack XX3"
        decision_mode = "mw_then_pack"

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ laboratory
        req_payload = {
            "log_uid": log_uid,
            "strategy_id": str(master_sid),            # SID –º–∞—Å—Ç–µ—Ä–∞ (–ø—Ä–∞–≤–∏–ª–∞ WL/BL)
            "client_strategy_id": client_sid,          # SID –∑–µ—Ä–∫–∞–ª–∞ (–≤–æ—Ä–æ—Ç–∞/anti-dup)
            "direction": "long",
            "symbol": symbol,
            "timeframes": tfs,
            "decision_mode": decision_mode,
            "use_bl": "true",
        }

        # –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
        log.debug(
            "[LAB_REQUEST] log_uid=%s master=%s client=%s symbol=%s tf=%s",
            log_uid, master_sid, client_sid, symbol, tfs
        )

        # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å–ª–æ—Ç –Ω–∞ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ LAB (backpressure)
        holder = f"{log_uid}:{time.monotonic_ns()}"
        ok = await lab_sema_acquire(holder)  # –ª–∏–º–∏—Ç—ã —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ ENV: LAB_SEMA_LIMIT/LAB_SEMA_TTL
        if not ok:
            note = "lab_backpressure"
            await self._log_ignore_to_queue(redis, client_sid, log_uid, note)
            return ("ignore", note)

        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ laboratory:decision_request
            req_id = await redis.xadd("laboratory:decision_request", req_payload)
            log.debug("[LAB_XADD] req_id=%s", req_id)

            # –∂–¥—ë–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä (—Ç–∞–π–º–∞—É—Ç 90—Å)
            allow, reason = await wait_lab_response(req_id, timeout_seconds=90)

        except Exception:
            note = "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å laboratory_v4"
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å laboratory_v4")
            await self._log_ignore_to_queue(redis, client_sid, log_uid, note)
            return ("ignore", note)

        finally:
            # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            await lab_sema_release(holder)

        # —Ä–µ—à–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        if allow:
            # –≥–æ—Ç–æ–≤–∏–º –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –∑–µ—Ä–∫–∞–ª–∞
            payload = {
                "strategy_id": client_sid,       # SID –∑–µ—Ä–∫–∞–ª–∞
                "symbol": symbol,
                "direction": "long",
                "log_uid": log_uid,
                "route": "new_entry",
                "received_at": signal.get("received_at"),
            }
            log.debug(
                "[OPEN_REQ] log_uid=%s client_sid=%s symbol=%s direction=%s",
                log_uid, client_sid, symbol, "long"
            )
            try:
                await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
                log.debug("[OPEN_SENT] log_uid=%s position_request_published=true", log_uid)
                return ("ok", "passed_laboratory")
            except Exception as e:
                note = "–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ opener"
                log.debug("[OPEN_FAIL] log_uid=%s error=%s", log_uid, str(e))
                await self._log_ignore_to_queue(redis, client_sid, log_uid, note)
                return ("ignore", note)
        else:
            # –æ—Ç–∫–∞–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º ignore —Å –ø—Ä–∏—á–∏–Ω–æ–π
            log.debug("[IGNORE] log_uid=%s reason=\"%s\"", log_uid, reason)
            await self._log_ignore_to_queue(redis, client_sid, log_uid, reason)
            return ("ignore", f"–æ—Ç–∫–∞–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}")

    # üî∏ –ó–∞–ø–∏—Å—å ignore-—Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤ (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
    async def _log_ignore_to_queue(self, redis, strategy_id, log_uid, note: str):
        try:
            if redis is None:
                return
            record = {
                "log_uid": str(log_uid) if log_uid is not None else "",
                "strategy_id": str(strategy_id) if strategy_id is not None else "",
                "status": "ignore",
                "note": note or "",
                "position_uid": "",
                "logged_at": datetime.utcnow().isoformat()
            }
            await redis.xadd("signal_log_queue", record)
            log.debug("[IGNORE_LOGGED] log_uid=%s note=\"%s\"", log_uid, note)
        except Exception as e:
            log.debug("[IGNORE_LOG_FAIL] log_uid=%s error=%s", log_uid, str(e))
