# strategy_451_long.py ‚Äî –ª–æ–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å LAB-–≥–µ–π—Ç–∏–Ω–≥–æ–º (mw_only, v2, –±–µ–∑ BL)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import json
import uuid

from infra import lab_sema_acquire, lab_sema_release
from lab_response_router import wait_lab_response

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("strategy_451_long")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã LAB-–∑–∞–ø—Ä–æ—Å–∞ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
LAB_REQ_STREAM = "laboratory:decision_request"
LAB_TIMEFRAMES = "m5,m15,h1"     # –ø–æ—Ä—è–¥–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
LAB_DECISION_MODE = "mw_only"    # mw_only | mw_then_pack | mw_and_pack | pack_only
LAB_VERSION = "v2"               # v1 | v2
LAB_USE_BL = "false"             # "true" | "false" (—Å—Ç—Ä–æ–∫–æ–π)
LAB_WAIT_TIMEOUT_SEC = 90        # —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

# üî∏ –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
class Strategy451Long:
    # üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ + –∑–∞–ø—Ä–æ—Å –≤ LAB
    async def validate_signal(self, signal, context):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
          - True ‚Üí —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ (signal_processor –≤—ã–∑–æ–≤–µ—Ç run)
          - ("ignore", reason) ‚Üí –æ—Ç–∫–∞–∑ (–±—É–¥–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ signal_log_queue)
        """
        # –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction = str(signal.get("direction", "")).lower()
        if direction == "short":
            return ("ignore", "short —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        if direction != "long":
            return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        strategy_cfg = context.get("strategy") or {}
        client_sid = strategy_cfg.get("id")
        master_sid = strategy_cfg.get("market_mirrow")  # –º–∞—Å—Ç–µ—Ä –¥–ª—è WL/BL

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
        if not master_sid:
            # –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä, —Å—Ä–∞–∑—É ignore
            log.error(
                "‚ùå invalid_config: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç master (market_mirrow is NULL) "
                "[client_sid=%s symbol=%s dir=%s log_uid=%s]",
                client_sid, signal.get("symbol"), direction, signal.get("log_uid"),
            )
            return ("ignore", "invalid_config")

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π req_uid
        req_uid = str(uuid.uuid4())
        symbol = str(signal.get("symbol", "")).upper()
        log_uid = signal.get("log_uid")

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º payload –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è LAB
        request = {
            "req_uid": req_uid,
            "log_uid": log_uid,
            "strategy_id": int(master_sid),           # master (WL/BL)
            "client_strategy_id": int(client_sid),    # —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            "symbol": symbol,
            "direction": direction,                   # long | short
            "timeframes": LAB_TIMEFRAMES,             # "m5,m15,h1"
            "decision_mode": LAB_DECISION_MODE,       # mw_only
            "version": LAB_VERSION,                   # v1
            "use_bl": LAB_USE_BL,                     # "false"
        }

        # –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –Ω–∞–≥—Ä—É–∑–∫–∏: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä
        holder = f"{req_uid}:{symbol}:{direction}"
        acquired = await lab_sema_acquire(holder)
        if not acquired:
            log.debug(
                "‚è≥ [LAB_REQ_BUSY] req=%s client_sid=%s master_sid=%s %s %s",
                req_uid, client_sid, master_sid, symbol, direction,
            )
            return ("ignore", "lab_busy")

        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LAB (—Å—Ç—Ä–∏–º —Å –æ–±—ë—Ä—Ç–∫–æ–π data)
            await redis.xadd(LAB_REQ_STREAM, {"data": json.dumps(request, separators=(",", ":"))})
            log.debug(
                "üì§ [LAB_REQ_SENT] req=%s client_sid=%s master_sid=%s %s %s tfs=%s mode=%s ver=%s bl=%s",
                req_uid, client_sid, master_sid, symbol, direction,
                LAB_TIMEFRAMES, LAB_DECISION_MODE, LAB_VERSION, LAB_USE_BL,
            )

            # –∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞ (–ø–æ req_uid)
            allow, reason = await wait_lab_response(req_uid, timeout_seconds=LAB_WAIT_TIMEOUT_SEC)

            # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø–æ–º–∏–º–æ —Ä–æ—É—Ç–µ—Ä–∞)
            log.debug("üì• [LAB_RESP_RECV] req=%s allow=%s reason=%s", req_uid, allow, reason or "")

            if allow:
                return True
            else:
                return ("ignore", reason or "lab_rejected")

        finally:
            # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞
            await lab_sema_release(holder)

    # üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    async def run(self, signal, context):
        # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        # —Å–æ–±–∏—Ä–∞–µ–º payload –¥–ª—è opener‚Äô–∞
        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at"),
        }

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–≤–µ–π–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∏—è
        await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
        log.debug(
            "üì® [OPEN_REQ_SENT] log_uid=%s strategy_id=%s %s %s",
            payload["log_uid"], payload["strategy_id"], payload["symbol"], payload["direction"]
        )