# strategy_453_dmigaprsiuni.py ‚Äî üî∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (DMI-gap-bin + RSI14-bin): –¥–≤–∞ posfeat-—Ç—Ä–∏–ø–ª–µ—Ç–∞ –ø–æ–¥—Ä—è–¥, ORACLE –ø–æ—Ä–æ–≥–∏ 0.2% / 0.55

import logging
import json
import math
import asyncio
from typing import Any, Dict, Tuple, Union

log = logging.getLogger("strategy_453_dmigaprsiuni")

IgnoreResult = Tuple[str, str]  # ("ignore", reason)


# üî∏ –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
class Strategy453Dmigaprsiuni:
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (DMI-GAP ‚Üí RSI; –æ–±–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –ø–æ—Ä–æ–≥–∏)
    async def validate_signal(self, signal: Dict[str, Any], context: Dict[str, Any]) -> Union[bool, IgnoreResult]:
        # –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å–∏–≥–Ω–∞–ª–∞
        direction = str(signal.get("direction", "")).lower()
        symbol = str(signal.get("symbol", ""))
        log_uid = str(signal.get("log_uid", ""))
        self_sid = int(signal.get("strategy_id"))

        # –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if direction not in ("long", "short"):
            return ("ignore", f"unsupported direction '{direction}'")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Redis
        redis = context.get("redis")
        if redis is None:
            return ("ignore", "No Redis in context")

        # –≤—ã–±–æ—Ä master_sid –ø–æ –∑–µ—Ä–∫–∞–ª–∞–º
        strategy_cfg = context.get("strategy") or {}
        master_sid = self._resolve_mirrored_sid(strategy_cfg, direction, self_sid)

        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–∞
        stats_key = f"strategy:stats:{master_sid}"
        closed_field = "closed_long" if direction == "long" else "closed_short"
        closed_dir_total = await self._get_int_hash(redis, stats_key, closed_field)
        if closed_dir_total is None or closed_dir_total <= 0:
            return ("ignore", f"No directional history: {closed_field}=0 for master {master_sid}")

        # –ø–æ—Ä–æ–≥ –∏—Å—Ç–æ—Ä–∏–∏ (—Å—Ç—Ä–æ–≥–æ > 0.2%)
        min_closed_required = math.floor(0.002 * closed_dir_total) + 1

        # DMI-GAP —Ç—Ä–∏–ø–ª–µ—Ç –∏–∑ posfeat (–æ–∂–∏–¥–∞–Ω–∏–µ 5—Å + –æ–ø—Ä–æ—Å 2—Å –¥–æ 60—Å)
        trip_gap = await self._await_posfeat_combo(
            redis,
            key=f"posfeat:{master_sid}:{log_uid}:dmigapbin_combo",
            initial_sleep_sec=5,
            poll_interval_sec=2,
            max_wait_sec=60,
        )
        if not trip_gap:
            return ("ignore", f"No posfeat DMI-gap triplet for {symbol} (master {master_sid}, log_uid={log_uid})")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ DMI-GAP –ø–æ ORACLE
        ok_gap = await self._check_oracle(
            redis=redis,
            oracle_key=f"oracle:dmi_gap:comp:{master_sid}:{direction}:gap:{trip_gap}",
            label=f"DMI-gap triplet {trip_gap}",
            min_closed_required=min_closed_required,
        )
        if ok_gap is not True:
            return ok_gap  # ("ignore", reason)

        # RSI —Ç—Ä–∏–ø–ª–µ—Ç –∏–∑ posfeat (–æ–∂–∏–¥–∞–Ω–∏–µ 5—Å + –æ–ø—Ä–æ—Å 2—Å –¥–æ 60—Å)
        trip_rsi = await self._await_posfeat_combo(
            redis,
            key=f"posfeat:{master_sid}:{log_uid}:rsi14_bucket_combo",
            initial_sleep_sec=5,
            poll_interval_sec=2,
            max_wait_sec=60,
        )
        if not trip_rsi:
            return ("ignore", f"No posfeat RSI14 triplet for {symbol} (master {master_sid}, log_uid={log_uid})")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ RSI –ø–æ ORACLE
        ok_rsi = await self._check_oracle(
            redis=redis,
            oracle_key=f"oracle:rsi:comp:{master_sid}:{direction}:rsi14:{trip_rsi}",
            label=f"RSI14 triplet {trip_rsi}",
            min_closed_required=min_closed_required,
        )
        if ok_rsi is not True:
            return ok_rsi  # ("ignore", reason)

        # –µ—Å–ª–∏ –æ–±–∞ —Ç—Ä–∏–ø–ª–µ—Ç–∞ –ø—Ä–æ—à–ª–∏ ‚Äî –¥–æ–ø—É—Å–∫–∞–µ–º
        return True

    # üî∏ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–ø—É—Å–∫–µ (—Ç—Ä–∞–Ω–∑–∏—Ç –≤ opener)
    async def run(self, signal: Dict[str, Any], context: Dict[str, Any]) -> None:
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ opener
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("No Redis in context")

        payload = {
            "strategy_id": str(signal.get("strategy_id")),
            "symbol": signal.get("symbol"),
            "direction": signal.get("direction"),
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at"),
        }
        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ Open request queued: {payload}")
        except Exception as e:
            log.warning(f"Failed to enqueue open request: {e}")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∏–ø–ª–µ—Ç–∞ –ø–æ ORACLE –∏ –ø–æ—Ä–æ–≥–∞–º
    async def _check_oracle(self, redis, oracle_key: str, label: str, min_closed_required: int) -> Union[bool, IgnoreResult]:
        # —á—Ç–µ–Ω–∏–µ ORACLE-–∫–ª—é—á–∞
        raw = await self._get_str(redis, oracle_key)
        if not raw:
            return ("ignore", f"No information on {label}")

        # –ø–∞—Ä—Å–∏–Ω–≥ JSON
        try:
            obj = json.loads(raw)
            closed_trades = int(obj.get("closed_trades", 0))
            winrate = float(obj.get("winrate", 0.0))
        except Exception:
            return ("ignore", f"Malformed oracle entry for {label}")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if closed_trades < min_closed_required:
            return ("ignore", f"Not enough closed history for {label}: required={min_closed_required}, got={closed_trades}")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ winrate
        if winrate < 0.55:
            return ("ignore", f"Winrate below 0.55 for {label}: got={winrate:.4f}")

        return True

    # –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ posfeat-–∫–æ–º–±–æ
    async def _await_posfeat_combo(self, redis, key: str, initial_sleep_sec: int, poll_interval_sec: int, max_wait_sec: int) -> str:
        # –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        v = await self._get_str(redis, key)
        if v:
            return v

        # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞—É–∑–∞
        try:
            await asyncio.sleep(initial_sleep_sec)
        except Exception:
            pass

        # –æ–ø—Ä–æ—Å –¥–æ —Ç–∞–π–º–∞—É—Ç–∞
        elapsed = initial_sleep_sec
        while elapsed <= max_wait_sec:
            v = await self._get_str(redis, key)
            if v:
                return v
            try:
                await asyncio.sleep(poll_interval_sec)
            except Exception:
                pass
            elapsed += poll_interval_sec
        return ""

    # –≤—ã–±–æ—Ä master_sid –ø–æ –∑–µ—Ä–∫–∞–ª–∞–º
    def _resolve_mirrored_sid(self, strategy_cfg: Dict[str, Any], direction: str, fallback_sid: int) -> int:
        mm_long = self._to_int_or_none(strategy_cfg.get("market_mirrow_long"))
        mm_short = self._to_int_or_none(strategy_cfg.get("market_mirrow_short"))
        mm = self._to_int_or_none(strategy_cfg.get("market_mirrow"))
        if mm_long is not None or mm_short is not None:
            if direction == "long" and mm_long is not None:
                return mm_long
            if direction == "short" and mm_short is not None:
                return mm_short
        if mm is not None:
            return mm
        return fallback_sid

    # —É—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ KV
    async def _get_str(self, redis, key: str) -> str:
        try:
            raw = await redis.get(key)
            if raw is None:
                return ""
            if isinstance(raw, bytes):
                return raw.decode("utf-8")
            return str(raw)
        except Exception:
            return ""

    # —É—Ç–∏–ª–∏—Ç–∞: —á—Ç–µ–Ω–∏–µ int –∏–∑ Hash
    async def _get_int_hash(self, redis, key: str, field: str) -> int | None:
        try:
            raw = await redis.hget(key, field)
            if raw is None:
                return None
            if isinstance(raw, bytes):
                raw = raw.decode("utf-8")
            return int(float(raw))
        except Exception:
            return None

    # —É—Ç–∏–ª–∏—Ç–∞: –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ int –∏–ª–∏ None
    @staticmethod
    def _to_int_or_none(v: Any) -> int | None:
        try:
            if v is None:
                return None
            iv = int(v)
            return iv if iv != 0 else None
        except Exception:
            return None