# strategies/strategy_2.py

import logging
import json
from datetime import datetime

log = logging.getLogger("STRATEGY_2")

class Strategy2:
    # üî∏ –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    async def validate_signal(self, signal, context) -> bool:
        symbol = signal.get("symbol")
        direction = signal.get("direction")
        strategy_id = signal.get("strategy_id")
        signal_id = signal.get("signal_id")

        log.info(f"‚öôÔ∏è [Strategy2] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞: symbol={symbol}, direction={direction}")

        if direction != "short":
            log.info(f"üö´ [Strategy2] –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ç–æ–ª—å–∫–æ 'short' —Ä–∞–∑—Ä–µ—à—ë–Ω")

            redis = context.get("redis")
            if redis:
                log_record = {
                    "log_id": signal_id,
                    "strategy_id": strategy_id,
                    "status": "ignore",
                    "position_id": None,
                    "note": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ç–æ–ª—å–∫–æ short —Ä–∞–∑—Ä–µ—à—ë–Ω",
                    "logged_at": datetime.utcnow().isoformat()
                }
                try:
                    await redis.xadd("signal_log_queue", {"data": json.dumps(log_record)})
                except Exception as e:
                    log.warning(f"‚ö†Ô∏è [Strategy2] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis log_queue: {e}")

            return False

        return True

    # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    def run(self, signal, context):
        log.info("üöÄ [Strategy2] –Ø ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 2")
        return {"status": "ok"}