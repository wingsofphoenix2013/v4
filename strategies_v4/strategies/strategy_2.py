# strategies/strategy_2.py

import logging
import json
from datetime import datetime
from position_opener import open_position  # ‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å —É—á—ë—Ç–æ–º Root Directory = strategies_v4

log = logging.getLogger("STRATEGY_2")

class Strategy2:
    # üî∏ –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    async def validate_signal(self, signal, context) -> bool | str:
        symbol = signal.get("symbol")
        direction = signal.get("direction")
        strategy_id = signal.get("strategy_id")
        log_id = signal.get("log_id")

        log.info(f"‚öôÔ∏è [Strategy2] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞: symbol={symbol}, direction={direction}")

        if direction != "short":
            note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ç–æ–ª—å–∫–æ short —Ä–∞–∑—Ä–µ—à—ë–Ω"
            log.info(f"üö´ [Strategy2] {note}")

            redis = context.get("redis")
            if redis:
                log_record = {
                    "log_id": log_id,
                    "strategy_id": strategy_id,
                    "status": "ignore",
                    "position_id": None,
                    "note": note,
                    "logged_at": datetime.utcnow().isoformat()
                }
                try:
                    await redis.xadd("signal_log_queue", {"data": json.dumps(log_record)})
                except Exception as e:
                    log.warning(f"‚ö†Ô∏è [Strategy2] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis log_queue: {e}")

            return "logged"

        return True
    # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def run(self, signal, context):
        log.info("üöÄ [Strategy1] –Ø ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 2")

        redis = context.get("redis")
        if redis:
            payload = {
                "strategy_id": signal["strategy_id"],
                "symbol": signal["symbol"],
                "direction": signal["direction"],
                "log_id": signal["log_id"],
                "route": "new_entry"
            }
            try:
                await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
                log.info(f"üì§ [Strategy2] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ strategy_opener_stream")
            except Exception as e:
                log.warning(f"‚ö†Ô∏è [Strategy2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ stream: {e}")