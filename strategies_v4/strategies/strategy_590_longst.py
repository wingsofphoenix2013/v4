import logging
import json

log = logging.getLogger("strategy_590_longst")

class Strategy590Longst:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_meta = context.get("strategy", {})
        direction = signal["direction"].lower()
        symbol = signal["symbol"]
        tfs = ["m5", "m15", "h1"]

        if direction != "longst":
            return ("ignore", "short —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        if redis is None:
            log.warning("‚ö†Ô∏è –ù–µ—Ç Redis –≤ context")
            return ("ignore", "–Ω–µ—Ç Redis")

        try:
            strategy_id = strategy_meta.get("emamirrow") or signal["strategy_id"]

            for tf in tfs:
                # 1. –ü–æ–ª—É—á–∞–µ–º snapshot –∏ pattern –∏–∑ Redis
                key = f"snapshot:{symbol}:{tf}"
                raw = await redis.get(key)
                if raw is None:
                    return ("ignore", f"–Ω–µ—Ç snapshot –≤ Redis: {key}")

                data = json.loads(raw)
                snapshot_id = data.get("snapshot_id")
                pattern_id = data.get("pattern_id")

                if snapshot_id is None or pattern_id is None:
                    return ("ignore", f"–Ω–µ—Ç snapshot_id –∏–ª–∏ pattern_id –≤ {key}")

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º snapshot
                snap_key = f"confidence:{strategy_id}:longst:{tf}:snapshot:{snapshot_id}"
                snap_raw = await redis.get(snap_key)
                if snap_raw is None:
                    return ("ignore", f"–Ω–µ—Ç confidence-–∫–ª—é—á–∞: {snap_key}")

                snap_data = json.loads(snap_raw)
                winrate_snap = snap_data.get("winrate")
                if winrate_snap is None or winrate_snap <= 0.5:
                    return ("ignore", f"snapshot winrate={winrate_snap} <= 0.5 ({tf})")

                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º pattern
                pat_key = f"confidence:{strategy_id}:longst:{tf}:pattern:{pattern_id}"
                pat_raw = await redis.get(pat_key)
                if pat_raw is None:
                    return ("ignore", f"–Ω–µ—Ç confidence-–∫–ª—é—á–∞: {pat_key}")

                pat_data = json.loads(pat_raw)
                winrate_pat = pat_data.get("winrate")
                if winrate_pat is None or winrate_pat <= 0.5:
                    return ("ignore", f"pattern winrate={winrate_pat} <= 0.5 ({tf})")

            return True  # –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ—à–ª–∏

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ strategy_590_longst")
            return ("ignore", "–æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")