import logging
import json

log = logging.getLogger("strategy_641_shortema3")

class Strategy641Shortema3:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_cfg = context.get("strategy")
        if redis is None:
            return ("ignore", "–Ω–µ—Ç Redis –∫–ª–∏–µ–Ω—Ç–∞")
        if not strategy_cfg:
            return ("ignore", "–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        direction = signal["direction"].lower()
        if direction != "short":
            return ("ignore", "long —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        symbol = signal["symbol"]

        # 1) –¢–µ–∫—É—â–∏–π EMA-—Ç—Ä–∏–ø–ª–µ—Ç (live) –¥–ª—è EMA200 –≤ —Ñ–æ—Ä–º–∞—Ç–µ "m5-m15-h1" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1-0-3")
        live_key = f"ind_live:{symbol}:ema200_status_triplet"
        try:
            triplet = await redis.get(live_key)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ {live_key}: {e}")
            return ("ignore", "–æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ EMA —Ç—Ä–∏–ø–ª–µ—Ç–∞")

        if not triplet:
            return ("ignore", "–Ω–µ—Ç live EMA —Ç—Ä–∏–ø–ª–µ—Ç–∞")

        # 2) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–æ–º—É –∂–µ —Ç—Ä–∏–ø–ª–µ—Ç—É –∏–∑ oracle (EMA len = 200) –¥–ª—è SHORT
        base_id = strategy_cfg.get("market_mirrow") or strategy_cfg["id"]
        oracle_key = f"oracle:emastat:comp:{base_id}:{direction}:200:{triplet}"

        try:
            raw = await redis.get(oracle_key)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Redis –∫–ª—é—á–∞ {oracle_key}: {e}")
            return ("ignore", "–æ—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if raw is None:
            return ("ignore", "–Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ EMA —Ç—Ä–∏–ø–ª–µ—Ç—É")

        try:
            data = json.loads(raw)
            closed_trades = int(data.get("closed_trades", 0))
            winrate = float(data.get("winrate", 0))
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ {oracle_key}: {e}")
            return ("ignore", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        # 3) –ü—Ä–∞–≤–∏–ª–∞ –¥–æ–ø—É—Å–∫–∞
        if closed_trades <= 2:
            return ("ignore", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        if winrate <= 0.5:
            return ("ignore", f"winrate {winrate:.4f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞")

        # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Üí —Ä–∞–∑—Ä–µ—à–∞–µ–º
        return True

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")