# strategy_101_test.py

import logging
import json
from datetime import datetime, timedelta
from infra import get_price

log = logging.getLogger("STRATEGY_101_TEST")

class Strategy101Test:
    async def validate_signal(self, signal, context):
        symbol = signal["symbol"]
        direction = signal["direction"].lower()
        tf = context["strategy"]["timeframe"].lower()
        redis = context["redis"]

        received_at = signal.get("received_at")
        if not received_at:
            return ("ignore", "–Ω–µ—Ç received_at –≤ —Å–∏–≥–Ω–∞–ª–µ")

        try:
            # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º received_at –≤ datetime
            dt = datetime.fromisoformat(received_at.replace("Z", "+00:00"))

            # üîπ –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
            tf_minutes = int(tf[1:]) if tf.startswith("m") else None
            if not tf_minutes:
                return ("ignore", f"–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {tf}")

            # üîπ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞
            current_open = dt.replace(second=0, microsecond=0)
            current_open -= timedelta(minutes=dt.minute % tf_minutes)
            candle_time = current_open - timedelta(minutes=tf_minutes)
            t_ms = int(candle_time.timestamp() * 1000)

            # üîπ –ö–ª—é—á–∏
            key_open = f"ts:{symbol}:{tf}:o"
            key_close = f"ts:{symbol}:{tf}:c"

            # üîπ –ü–æ–ª—É—á–∞–µ–º open –∏ close —Å –ø–æ–º–æ—â—å—é TS.RANGE
            open_data = await redis.ts().range(key_open, t_ms, t_ms)
            close_data = await redis.ts().range(key_close, t_ms, t_ms)

            if not open_data or not close_data:
                return ("ignore", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö open/close –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏")

            open_val = float(open_data[0][1])
            close_val = float(close_data[0][1])

            log.info(f"[CANDLECHECK] symbol={symbol}, tf={tf}, time={t_ms}, open={open_val}, close={close_val}, direction={direction}")

            if direction == "long":
                if close_val > open_val:
                    return True
                return ("ignore", f"–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –Ω–µ –±—ã—á—å—è: open={open_val}, close={close_val}")

            elif direction == "short":
                if close_val < open_val:
                    return True
                return ("ignore", f"–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –Ω–µ –º–µ–¥–≤–µ–∂—å—è: open={open_val}, close={close_val}")

            return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–µ—á–∏")
            return ("ignore", "–æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–µ—á–∏")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.info(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")