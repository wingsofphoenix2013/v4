import logging
import json

log = logging.getLogger("strategy_681_universalst")

class Strategy681Universalst:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_meta = context.get("strategy", {})
        direction = signal["direction"].lower()
        symbol = signal["symbol"]
        tfs = ["m5", "m15"]

        if direction not in ("long", "short"):
            return ("ignore", f"‚ùå –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        if redis is None:
            log.warning("‚ö†Ô∏è –ù–µ—Ç Redis –≤ context")
            return ("ignore", "‚ùå Redis –∫–ª–∏–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        try:
            strategy_id = (
                strategy_meta.get("emamirrow_long") if direction == "long"
                else strategy_meta.get("emamirrow_short")
            ) or signal["strategy_id"]

            for tf in tfs:
                snapshot_key = f"snapshot:{symbol}:{tf}"
                raw_snapshot = await redis.get(snapshot_key)
                if raw_snapshot is None:
                    return ("ignore", f"‚ùå –Ω–µ—Ç –∫–ª—é—á–∞ {snapshot_key} –≤ Redis")

                try:
                    data = json.loads(raw_snapshot)
                except json.JSONDecodeError:
                    return ("ignore", f"‚ùå –∫–ª—é—á {snapshot_key} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

                snapshot_id = data.get("snapshot_id")
                pattern_id = data.get("pattern_id")

                if snapshot_id is None or pattern_id is None:
                    return ("ignore", f"‚ùå snapshot_id –∏–ª–∏ pattern_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {snapshot_key}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ snapshot
                snap_key = f"confidence:{strategy_id}:{direction}:{tf}:snapshot:{snapshot_id}"
                snap_raw = await redis.get(snap_key)
                if snap_raw is None:
                    return ("ignore", f"‚ùå –Ω–µ—Ç confidence-–∫–ª—é—á–∞: {snap_key}")

                try:
                    snap_data = json.loads(snap_raw)
                except json.JSONDecodeError:
                    return ("ignore", f"‚ùå –∫–ª—é—á {snap_key} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

                if snap_data.get("open_allowed") is not True:
                    return ("ignore", f"üü• open_allowed=False –ø–æ snapshot ‚Äî strategy_id={strategy_id}, snapshot_id={snapshot_id}, tf={tf}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ pattern
                pat_key = f"confidence:{strategy_id}:{direction}:{tf}:pattern:{pattern_id}"
                pat_raw = await redis.get(pat_key)
                if pat_raw is None:
                    return ("ignore", f"‚ùå –Ω–µ—Ç confidence-–∫–ª—é—á–∞: {pat_key}")

                try:
                    pat_data = json.loads(pat_raw)
                except json.JSONDecodeError:
                    return ("ignore", f"‚ùå –∫–ª—é—á {pat_key} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

                if pat_data.get("open_allowed") is not True:
                    return ("ignore", f"üü• open_allowed=False –ø–æ pattern ‚Äî strategy_id={strategy_id}, pattern_id={pattern_id}, tf={tf}")

            return True

        except Exception:
            log.exception("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ strategy_681_universalst")
            return ("ignore", "‚ùå –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ [681] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è [681] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")