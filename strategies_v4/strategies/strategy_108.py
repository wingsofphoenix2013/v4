# strategies/strategy_108.py

import logging
import json
from infra import load_indicators

log = logging.getLogger("STRATEGY_108")

class Strategy108:
    # üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    async def validate_signal(self, signal, context):
        symbol = signal["symbol"]
        direction = signal["direction"]

        log.debug(f"‚öôÔ∏è [Strategy108] –¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏: symbol={symbol}, direction={direction}")
        return True

    # üî∏ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
    async def run(self, signal, context):
        log.debug(f"üöÄ [Strategy108] run() –≤—ã–∑–≤–∞–Ω –¥–ª—è {signal['symbol']}")

        redis = context.get("redis")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal["log_uid"],
            "route": "new_entry",
            "received_at": signal.get("received_at")     
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ [Strategy108] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ strategy_opener_stream: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ strategy_opener_stream: {e}")