import logging
import json
from infra import get_price, load_indicators

log = logging.getLogger("strategy_881_universal")

class Strategy871Universal:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_meta = context.get("strategy", {})
        direction = signal["direction"].lower()
        symbol = signal["symbol"]
        tf = strategy_meta.get("timeframe", "m5").lower()

        if direction not in ("long", "short"):
            return ("ignore", f"‚ùå –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        if redis is None:
            log.warning("‚ö†Ô∏è –ù–µ—Ç Redis –≤ context")
            return ("ignore", "‚ùå Redis –∫–ª–∏–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        try:
            strategy_id = (
                strategy_meta.get("emamirrow_long") if direction == "long"
                else strategy_meta.get("emamirrow_short")
            ) or signal["strategy_id"]

            snapshot_key = f"snapshot:{symbol}:{tf}"
            raw_snapshot = await redis.get(snapshot_key)
            if raw_snapshot is None:
                return ("ignore", f"‚ùå –Ω–µ—Ç –∫–ª—é—á–∞ {snapshot_key} –≤ Redis")

            try:
                data = json.loads(raw_snapshot)
            except json.JSONDecodeError:
                return ("ignore", f"‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ {snapshot_key}")

            snapshot_id = data.get("snapshot_id")
            pattern_id = data.get("pattern_id")
            if snapshot_id is None or pattern_id is None:
                return ("ignore", f"‚ùå snapshot_id –∏–ª–∏ pattern_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {snapshot_key}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ open_allowed –ø–æ snapshot
            snap_key = f"confidence:{strategy_id}:{direction}:{tf}:snapshot:{snapshot_id}"
            raw_snap = await redis.get(snap_key)
            if raw_snap is None:
                return ("ignore", f"‚ùå –Ω–µ—Ç confidence-–∫–ª—é—á–∞: {snap_key}")
            try:
                snap_data = json.loads(raw_snap)
            except json.JSONDecodeError:
                return ("ignore", f"‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ {snap_key}")
            if snap_data.get("open_allowed") is not True:
                return ("ignore", f"üü• open_allowed=False –ø–æ snapshot ‚Äî tf={tf}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ open_allowed –ø–æ pattern
            pat_key = f"confidence:{strategy_id}:{direction}:{tf}:pattern:{pattern_id}"
            raw_pat = await redis.get(pat_key)
            if raw_pat is None:
                return ("ignore", f"‚ùå –Ω–µ—Ç confidence-–∫–ª—é—á–∞: {pat_key}")
            try:
                pat_data = json.loads(raw_pat)
            except json.JSONDecodeError:
                return ("ignore", f"‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ {pat_key}")
            if pat_data.get("open_allowed") is not True:
                return ("ignore", f"üü• open_allowed=False –ø–æ pattern ‚Äî tf={tf}")

            # ‚úÖ BB-—Ñ–∏–ª—å—Ç—Ä
            price = await get_price(symbol)
            if price is None:
                return ("ignore", "‚ùå –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")

            if direction == "long":
                indicators = await load_indicators(symbol, ["bb20_2_0_center", "bb20_2_0_lower"], tf)
                bb_center = indicators.get("bb20_2_0_center")
                bb_lower = indicators.get("bb20_2_0_lower")

                if None in (bb_center, bb_lower):
                    return ("ignore", "‚ùå –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö BB (long)")

                bb_limit = bb_lower + (bb_center - bb_lower) * (1 / 3)
                if price <= bb_limit:
                    return True
                else:
                    return ("ignore", f"üü• BB long: price={price}, limit={bb_limit}")

            elif direction == "short":
                indicators = await load_indicators(symbol, ["bb20_2_0_center", "bb20_2_0_upper"], tf)
                bb_center = indicators.get("bb20_2_0_center")
                bb_upper = indicators.get("bb20_2_0_upper")

                if None in (bb_center, bb_upper):
                    return ("ignore", "‚ùå –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö BB (short)")

                bb_limit = bb_upper - (bb_upper - bb_center) * (1 / 3)
                if price >= bb_limit:
                    return True
                else:
                    return ("ignore", f"üü• BB short: price={price}, limit={bb_limit}")

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ strategy_881_universal")
            return ("ignore", "‚ùå –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ [881] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è [881] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")