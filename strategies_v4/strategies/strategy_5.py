# strategies/strategy_5.py

import logging
import json
from datetime import datetime

log = logging.getLogger("STRATEGY_5")


class Strategy5:
    # üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –≤—Å–µ–≥–¥–∞ True (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    async def validate_signal(self, signal, context) -> bool:
        return True

    # üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    async def run(self, signal, context):
        redis = context.get("redis")
        if redis:
            payload = {
                "strategy_id": signal["strategy_id"],
                "symbol": signal["symbol"],
                "direction": signal["direction"],
                "log_id": signal["log_id"],
                "route": "new_entry"
            }
            try:
                await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
                log.debug(
                    f"üì§ [Strategy5] –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ strategy_opener_stream: {payload}"
                )
            except Exception as e:
                log.warning(f"‚ö†Ô∏è [Strategy5] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")