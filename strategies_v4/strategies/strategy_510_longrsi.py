import logging
import json

log = logging.getLogger("strategy_510_longrsi")

class Strategy510Longrsi:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        strategy_meta = context.get("strategy", {})
        direction = signal["direction"].lower()
        symbol = signal["symbol"]
        tf = "m5"

        # üîπ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–Ω–≥
        if direction != "long":
            return ("ignore", "short —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        if redis is None:
            log.warning("‚ö†Ô∏è –ù–µ—Ç Redis –≤ context")
            return ("ignore", "–Ω–µ—Ç Redis")

        try:
            # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º strategy_id
            strategy_id = strategy_meta.get("emamirrow") or signal["strategy_id"]

            # 1. –ü–æ–ª—É—á–∞–µ–º snapshot_id –∏–∑ Redis
            snapshot_key = f"snapshot:{symbol}:{tf}"
            raw_snapshot = await redis.get(snapshot_key)
            if raw_snapshot is None:
                return ("ignore", f"–Ω–µ—Ç snapshot –≤ Redis: {snapshot_key}")

            snapshot_data = json.loads(raw_snapshot)
            snapshot_id = snapshot_data.get("snapshot_id")
            if snapshot_id is None:
                return ("ignore", f"–Ω–µ—Ç snapshot_id –≤ –∫–ª—é—á–µ {snapshot_key}")

            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π RSI14 –∏–∑ Redis
            rsi_key = f"ind:{symbol}:{tf}:rsi14"
            raw_rsi = await redis.get(rsi_key)
            if raw_rsi is None:
                return ("ignore", f"–Ω–µ—Ç RSI –≤ Redis: {rsi_key}")

            try:
                rsi_value = float(raw_rsi)
            except ValueError:
                return ("ignore", f"–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI: {raw_rsi}")

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º bucket
            bucket = int(rsi_value // 5) * 5

            # 4. –ü–æ–ª—É—á–∞–µ–º verdict –∏–∑ Redis –ø–æ emarsicheck
            emarsicheck_key = f"emarsicheck:{tf}:{strategy_id}:{snapshot_id}:{bucket}"
            verdict = await redis.get(emarsicheck_key)
            if verdict is None:
                return ("ignore", f"–Ω–µ—Ç –∫–ª—é—á–∞ emarsicheck: {emarsicheck_key}")

            # 5. –†–µ—à–µ–Ω–∏–µ
            if verdict == "allow":
                return True
            else:
                return ("ignore", f"RSI-check verdict={verdict}")

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ strategy_510_longrsi")
            return ("ignore", "–æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")