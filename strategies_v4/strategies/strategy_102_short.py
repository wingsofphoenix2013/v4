# strategy_102_short.py

import logging
import json

log = logging.getLogger("strategy_102_short")

class Strategy102Short:
    async def validate_signal(self, signal, context):
        direction = signal["direction"].lower()

        if direction == "short":
            return True
        elif direction == "long":
            return ("ignore", "long —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        else:
            return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

    async def run(self, signal, context):
        redis = context.get("redis")
        strategy_meta = context.get("strategy", {})
        
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ [102_SHORT] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            voting_payload = {
                "strategy_id": str(signal["strategy_id"]),
                "direction": signal["direction"],
                "tf": strategy_meta.get("timeframe", "m5"),  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é m5
                "symbol": signal["symbol"],
                "log_uid": signal.get("log_uid")
            }
            await redis.xadd("strategy_voting_request", voting_payload)
            log.debug(f"üó≥Ô∏è [102_SHORT] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {voting_payload}")

        except Exception as e:
            log.warning(f"‚ö†Ô∏è [102_SHORT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")