# strategies/strategy_24.py
import logging
import json
from datetime import datetime
from infra import load_indicators
from config_loader import config

log = logging.getLogger("STRATEGY_24")

class Strategy24:
    # üî∏ –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    async def validate_signal(self, signal, context) -> bool | str:
        symbol = signal.get("symbol")
        direction = signal.get("direction")
        strategy_id = int(signal.get("strategy_id"))
        log_id = signal.get("log_id")

        log.debug(f"‚öôÔ∏è [Strategy24] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞: symbol={symbol}, direction={direction}")

        redis = context.get("redis")
        note = None

        try:
            # –¢–∞–π–º—Ñ—Ä–µ–π–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            timeframe = config.strategies[strategy_id]["meta"]["timeframe"]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ EMA(50) –∏ RSI14
            ind = await load_indicators(symbol, ["ema50", "rsi14"], timeframe)
            ema = ind.get("ema50")
            rsi = ind.get("rsi14")

            if ema is None:
                note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ema50"
            else:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (mark price)
                price_raw = await redis.get(f"price:{symbol}")
                if price_raw is None:
                    note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç mark price"
                else:
                    price = float(price_raw)
                    ema = float(ema)

                    if direction == "long" and price <= ema:
                        note = f"–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA50 (price={price}, ema={ema})"
                    elif direction == "short" and price >= ema:
                        note = f"–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ü–µ–Ω–∞ –≤—ã—à–µ EMA50 (price={price}, ema={ema})"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI14 (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞)
            if not note:
                if rsi is None:
                    note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç rsi14"
                else:
                    rsi = float(rsi)
                    if direction == "long" and not (35 < rsi < 70):
                        note = f"–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: RSI14 –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è LONG (rsi={rsi})"
                    elif direction == "short" and not (30 < rsi < 65):
                        note = f"–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: RSI14 –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è SHORT (rsi={rsi})"

        except Exception as e:
            note = f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}"

        if note:
            log.debug(f"üö´ [Strategy24] {note}")
            if redis:
                log_record = {
                    "log_id": log_id,
                    "strategy_id": strategy_id,
                    "status": "ignore",
                    "position_id": None,
                    "note": note,
                    "logged_at": datetime.utcnow().isoformat()
                }
                try:
                    await redis.xadd("signal_log_queue", {"data": json.dumps(log_record)})
                except Exception as e:
                    log.warning(f"‚ö†Ô∏è [Strategy24] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis log_queue: {e}")
            return "logged"

        return True
    # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def run(self, signal, context):
        log.debug(f"üöÄ [Strategy24] –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª–µ: symbol={signal['symbol']}, direction={signal['direction']}")

        redis = context.get("redis")
        if redis:
            payload = {
                "strategy_id": signal["strategy_id"],
                "symbol": signal["symbol"],
                "direction": signal["direction"],
                "log_id": signal["log_id"],
                "route": "new_entry"
            }
            try:
                await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
                log.debug(f"üì§ [Strategy24] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ strategy_opener_stream")
            except Exception as e:
                log.warning(f"‚ö†Ô∏è [Strategy24] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ stream: {e}")