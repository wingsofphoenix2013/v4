# strategy_700_reverse.py ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –±–µ–∑ LAB, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import json

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("strategy_700_reverse")

# üî∏ –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
class Strategy700Reverse:
    # üî∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    async def validate_signal(self, signal, context):
        # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ info
        log.info(
            "‚úÖ [TRANSIT_PASS] log_uid=%s strategy_id=%s %s %s",
            signal.get("log_uid"),
            signal.get("strategy_id"),
            signal.get("symbol"),
            str(signal.get("direction")).lower(),
        )
        return True

    # üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–±–µ–∑ LAB)
    async def run(self, signal, context):
        # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        # —Å–æ–±–∏—Ä–∞–µ–º payload –¥–ª—è opener‚Äô–∞
        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "reverse_entry",
            "received_at": signal.get("received_at"),
        }

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–≤–µ–π–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∏—è
        await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload, separators=(",", ":"))})
        # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ info
        log.info(
            "üì® [OPEN_REQ_SENT] log_uid=%s strategy_id=%s %s %s",
            payload["log_uid"], payload["strategy_id"], payload["symbol"], payload["direction"]
        )