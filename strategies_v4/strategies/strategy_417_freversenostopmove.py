# strategy_417_freversenostopmove.py

import logging
import json
from infra import load_indicators, get_price

log = logging.getLogger("STRATEGY_417_FREVERSENOSTOPMOVE")

class Strategy417Freversenostopmove:
    async def validate_signal(self, signal, context):
        symbol = signal["symbol"]
        direction = signal["direction"].lower()
        tf = context["strategy"]["timeframe"].lower()

        try:
            price = await get_price(symbol)
            if price is None:
                return ("ignore", "–Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞")

            indicators = await load_indicators(symbol, [
                "rsi14"
            ], tf)

            rsi = indicators.get("rsi14")

            log.debug(f"üîç [217 FREVERSENOSTOPMOVE] symbol={symbol}, direction={direction}, tf={tf}, "
                      f"rsi={rsi}, price={price}")

            if rsi is None:
                return ("ignore", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö RSI")

            if direction == "long":
                if 60 <= rsi <= 80:
                    return True
                return ("ignore", f"RSI –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è long: rsi={rsi}")

            elif direction == "short":
                if 20 <= rsi <= 40:
                    return True
                return ("ignore", f"RSI –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è short: rsi={rsi}")

            return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ validate_signal")
            return ("ignore", "–æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")