import logging
import json

log = logging.getLogger("strategy_702_universal")

class Strategy702Universal:
    async def validate_signal(self, signal, context):
        redis = context.get("redis")
        whitelist = context.get("entry_whitelist")
        direction = signal["direction"].lower()
        symbol = signal["symbol"]
        tf = context["strategy"]["timeframe"].lower()

        if redis is None or whitelist is None:
            log.warning("‚ö†Ô∏è –ù–µ—Ç redis –∏–ª–∏ entry_whitelist –≤ context")
            return ("ignore", "–Ω–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

        key = f"snapshot:{symbol}:{tf}"

        try:
            raw = await redis.get(key)
            if raw is None:
                return ("ignore", f"–Ω–µ—Ç snapshot –≤ redis: {key}")

            data = json.loads(raw)
            pattern_id = data.get("pattern_id")

            if pattern_id is None:
                return ("ignore", f"–Ω–µ—Ç pattern_id –≤ –∫–ª—é—á–µ {key}")

            allowed_patterns = whitelist.get(direction, {}).get("patterns", [])
            if pattern_id in allowed_patterns:
                return True
            else:
                return ("ignore", f"pattern {pattern_id} –Ω–µ –≤ whitelist [{direction}]")

        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pattern")
            return ("ignore", "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pattern")

    async def run(self, signal, context):
        redis = context.get("redis")
        if redis is None:
            raise RuntimeError("‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ context")

        payload = {
            "strategy_id": str(signal["strategy_id"]),
            "symbol": signal["symbol"],
            "direction": signal["direction"],
            "log_uid": signal.get("log_uid"),
            "route": "new_entry",
            "received_at": signal.get("received_at")
        }

        try:
            await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
            log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {payload}")
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")