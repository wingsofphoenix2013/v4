# strategy_201_shortm5m15.py ‚Äî –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—à–æ—Ä—Ç; –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è TF: m5,m15)

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import logging
import json
import asyncio

from infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
log = logging.getLogger("strategy_201_shortm5m15")

# üî∏ –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
class Strategy201Shortm5m15:
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å
    async def validate_signal(self, signal, context):
        direction = signal["direction"].lower()

        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ long —Å—Ä–∞–∑—É –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if direction == "long":
            return ("ignore", "long —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # –¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ short
        if direction == "short":
            return True

        # –∏–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –æ—Ç–∫–∞–∑
        return ("ignore", f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

    # üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def run(self, signal, context):
        redis = context.get("redis")
        strategy_cfg = context.get("strategy")
        if redis is None or strategy_cfg is None:
            raise RuntimeError("‚ùå –ù–µ—Ç redis –∏–ª–∏ strategy –≤ context")

        # –º–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –ø–æ–ª–µ market_mirrow
        master_sid = strategy_cfg.get("market_mirrow")
        if not master_sid:
            log.warning("‚ö†Ô∏è –£ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ—Ç market_mirrow ‚Üí –æ—Ç–∫–∞–∑")
            return ("ignore", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –º–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ laboratory —Å –∫–æ–º–ø–ª–µ–∫—Ç–æ–º TF m5,m15
        req_payload = {
            "log_uid": signal.get("log_uid"),
            "strategy_id": str(master_sid),   # SID –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è laboratory
            "direction": "short",
            "symbol": signal["symbol"],
            "timeframes": "m5,m15",
        }

        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ laboratory:decision_request
            req_id = await redis.xadd("laboratory:decision_request", req_payload)
            log.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ laboratory: {req_payload}")

            # –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –∏–∑ laboratory:decision_response
            allow, reason = await self._wait_for_response(redis, req_id)
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å laboratory_v4")
            return ("ignore", "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å laboratory_v4")

        # —Ä–µ—à–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        if allow:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—É–∂–µ –æ—Ç –∑–µ—Ä–∫–∞–ª–∞)
            payload = {
                "strategy_id": str(signal["strategy_id"]),  # SID –∑–µ—Ä–∫–∞–ª–∞ (201)
                "symbol": signal["symbol"],
                "direction": "short",
                "log_uid": signal.get("log_uid"),
                "route": "new_entry",
                "received_at": signal.get("received_at"),
            }
            try:
                await redis.xadd("strategy_opener_stream", {"data": json.dumps(payload)})
                log.debug(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ opener: {payload}")
            except Exception as e:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ strategy_opener_stream: {e}")
        else:
            # –æ—Ç–∫–∞–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ignore —Å –ø—Ä–∏—á–∏–Ω–æ–π
            return ("ignore", f"–æ—Ç–∫–∞–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}")

    # üî∏ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É req_id
    async def _wait_for_response(self, redis, req_id: str):
        stream = "laboratory:decision_response"

        while True:
            entries = await redis.xread({stream: "0"}, block=1000, count=10)
            if not entries:
                continue

            for _, records in entries:
                for record_id, data in records:
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                    if data.get("req_id") == req_id:
                        status = data.get("status")
                        if status != "ok":
                            return False, data.get("reason", "–æ—à–∏–±–∫–∞ laboratory")

                        allow = str(data.get("allow", "false")).lower() == "true"
                        reason = data.get("reason", "")
                        return allow, reason