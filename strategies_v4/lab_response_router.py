# lab_response_router.py ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å laboratory:decision_response –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ req_id

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import json
from typing import Dict, Tuple
from datetime import datetime

from infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("LAB_RESP_ROUTER")

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RESP_STREAM = "laboratory:decision_response"
XREAD_BLOCK_MS = 1000
XREAD_COUNT = 100

# üî∏ –†–µ–µ—Å—Ç—Ä –æ–∂–∏–¥–∞–Ω–∏–π –∏ —Ä–∞–Ω–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
_pending: Dict[str, asyncio.Future] = {}
_early: Dict[str, Tuple[bool, str]] = {}
_last_id = "$"

# üî∏ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ req_id (API –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
async def wait_lab_response(req_id: str, timeout_seconds: int = 90) -> Tuple[bool, str]:
    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏–ª (router –æ–ø–µ—Ä–µ–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è)
    res = _early.pop(req_id, None)
    if res is not None:
        return res

    fut = asyncio.get_running_loop().create_future()
    _pending[req_id] = fut

    try:
        return await asyncio.wait_for(fut, timeout=timeout_seconds)
    except asyncio.TimeoutError:
        # cleanup
        if req_id in _pending:
            _pending.pop(req_id, None)
        return (False, "lab_timeout")

# üî∏ –ì–ª–∞–≤–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å —Å—Ç—Ä–∏–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
async def run_lab_response_router():
    global _last_id
    log.debug("üõ∞Ô∏è LAB_RESP_ROUTER –∑–∞–ø—É—â–µ–Ω (STREAM=%s)", RESP_STREAM)

    while True:
        try:
            entries = await infra.redis_client.xread({RESP_STREAM: _last_id}, count=XREAD_COUNT, block=XREAD_BLOCK_MS)
            if not entries:
                continue

            for _, records in entries:
                for record_id, fields in records:
                    _last_id = record_id

                    # –∏–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –ø–æ–ª—è 'data'
                    raw = fields.get("data") or fields.get(b"data")
                    if isinstance(raw, bytes):
                        raw = raw.decode("utf-8", errors="replace")

                    if not raw:
                        log.warning("‚ö†Ô∏è LAB_RESP_ROUTER: –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 'data' (id=%s), –ø—Ä–æ–ø—É—Å–∫", record_id)
                        continue

                    try:
                        obj = json.loads(raw)
                    except Exception:
                        log.exception("‚ùå LAB_RESP_ROUTER: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç–∞ (id=%s)", record_id)
                        continue

                    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
                    req_id = obj.get("req_uid")
                    allow = bool(obj.get("allow", False))
                    reason = str(obj.get("reason") or "")

                    if not req_id:
                        log.warning("‚ö†Ô∏è LAB_RESP_ROUTER: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç req_uid –≤ –æ—Ç–≤–µ—Ç–µ (id=%s), –ø—Ä–æ–ø—É—Å–∫", record_id)
                        continue

                    # –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ info
                    log.debug("üì• [LAB_RESP] req=%s allow=%s reason=%s", req_id, allow, reason)

                    # –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–µ–º—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ ¬´—Ä–∞–Ω–Ω–∏–π¬ª –æ—Ç–≤–µ—Ç
                    fut = _pending.pop(req_id, None)
                    if fut is not None and not fut.done():
                        fut.set_result((allow, reason))
                    else:
                        _early[req_id] = (allow, reason)

        except asyncio.CancelledError:
            log.debug("‚èπÔ∏è LAB_RESP_ROUTER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            raise
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ LAB_RESP_ROUTER")
            await asyncio.sleep(1.0)