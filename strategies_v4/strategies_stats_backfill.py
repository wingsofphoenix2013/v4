# strategies_stats_backfill.py ‚Äî –±—ç–∫–æ—Ñ–∏–ª–ª Redis-—Å—á—ë—Ç—á–∏–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º (strategy:stats:{sid}) –∏–∑ –ë–î, –≤—ã–∑–æ–≤ –∏–∑ strategies_v4_main.py

# üî∏ –ò–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
from decimal import Decimal

from infra import infra

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("STRAT_STATS_BF")

# üî∏ –ö–æ–Ω—Ñ–∏–≥
START_DELAY_SEC = int(__import__("os").getenv("STRAT_STATS_BF_START_DELAY_SEC", "0"))      # –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
SLEEP_AFTER_DONE_SEC = int(__import__("os").getenv("STRAT_STATS_BF_SLEEP_SEC", str(96*3600)))  # —Å–æ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 96—á)

# üî∏ –ö–ª—é—á Redis —Å–æ —Å—á—ë—Ç—á–∏–∫–∞–º–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Hash)
def _stats_key(sid: int) -> str:
    return f"strategy:stats:{sid}"

# üî∏ –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å market_watcher = true
async def _fetch_mw_strategies() -> list[int]:
    rows = await infra.pg_pool.fetch(
        "SELECT id FROM strategies_v4 WHERE COALESCE(market_watcher, false) = true"
    )
    return [int(r["id"]) for r in rows]

# üî∏ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ Redis (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
async def _recompute_stats_for_strategy(sid: int) -> None:
    rows = await infra.pg_pool.fetch(
        """
        SELECT direction, COUNT(*) AS cnt, COALESCE(SUM(pnl), 0) AS pnl
        FROM positions_v4
        WHERE strategy_id = $1 AND status = 'closed'
        GROUP BY direction
        """,
        sid,
    )

    closed_long = closed_short = 0
    pnl_long = pnl_short = Decimal("0")

    for r in rows:
        d = (r["direction"] or "").lower()
        c = int(r["cnt"])
        s = Decimal(str(r["pnl"]))
        if d == "long":
            closed_long, pnl_long = c, s
        elif d == "short":
            closed_short, pnl_short = c, s

    closed_total = closed_long + closed_short
    pnl_total = pnl_long + pnl_short

    await infra.redis_client.hset(
        _stats_key(sid),
        mapping={
            "closed_total": str(closed_total),
            "closed_long":  str(closed_long),
            "closed_short": str(closed_short),
            "pnl_total":    f"{pnl_total}",
            "pnl_long":     f"{pnl_long}",
            "pnl_short":    f"{pnl_short}",
        },
    )
    log.info(f"[DONE] sid={sid} total={closed_total} L={closed_long} S={closed_short} pnl={pnl_total}")

# üî∏ –ü—É–±–ª–∏—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä: –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º ‚Üí —Å–æ–Ω (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ long-run –≤ gather)
async def run_strategies_stats_backfill():
    if START_DELAY_SEC > 0:
        log.debug(f"‚è≥ STRAT_STATS_BF: –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ {START_DELAY_SEC} —Å–µ–∫")
        await asyncio.sleep(START_DELAY_SEC)

    while True:
        try:
            sids = await _fetch_mw_strategies()
            if not sids:
                log.info("STRAT_STATS_BF: –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å market_watcher=true")
            else:
                log.info(f"üöÄ STRAT_STATS_BF: –ø–µ—Ä–µ—Å—á—ë—Ç –ø–æ {len(sids)} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º‚Ä¶")
                for sid in sids:
                    try:
                        await _recompute_stats_for_strategy(sid)
                    except Exception:
                        log.exception(f"‚ùå STRAT_STATS_BF: –æ—à–∏–±–∫–∞ sid={sid}")
            log.info(f"üò¥ STRAT_STATS_BF: —Å–æ–Ω –Ω–∞ {SLEEP_AFTER_DONE_SEC} —Å–µ–∫")
        except Exception:
            log.exception("‚ùå STRAT_STATS_BF: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞")

        await asyncio.sleep(SLEEP_AFTER_DONE_SEC)