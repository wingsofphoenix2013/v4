# strategies_v4_cleaner.py

import asyncio
import logging
import json
from typing import List, Tuple

from infra import infra

# üî∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SLEEP_START_SEC = 120        # –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ ‚Äî 2 –º–∏–Ω—É—Ç—ã
SLEEP_CYCLE_SEC = 300        # –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî 5 –º–∏–Ω—É—Ç
BATCH_LIMIT = 500            # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π

# üî∏ –õ–æ–≥–≥–µ—Ä
log = logging.getLogger("STRATEGY_CLEANER")


# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ asyncpg ("DELETE 123")
def _rows_affected(status: str) -> int:
    try:
        return int(status.split()[-1])
    except Exception:
        return 0


# üîπ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
async def _fetch_deathrow_strategies() -> List[int]:
    rows = await infra.pg_pool.fetch(
        "SELECT id FROM strategies_v4 WHERE deathrow = TRUE"
    )
    return [r["id"] for r in rows]


# üîπ –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: (n_closed, n_active)
async def _get_position_counts(strategy_id: int) -> Tuple[int, int]:
    row = await infra.pg_pool.fetchrow(
        """
        SELECT
            COALESCE(SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END), 0) AS n_closed,
            COALESCE(SUM(CASE WHEN status IN ('open','partial') THEN 1 ELSE 0 END), 0) AS n_active
        FROM positions_v4
        WHERE strategy_id = $1
        """,
        strategy_id,
    )
    return int(row["n_closed"]), int(row["n_active"])


# üîπ –í—ã–±—Ä–∞—Ç—å –±–∞—Ç—á –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def _fetch_closed_position_uids(strategy_id: int, limit: int) -> List[str]:
    rows = await infra.pg_pool.fetch(
        """
        SELECT position_uid
        FROM positions_v4
        WHERE strategy_id = $1 AND status = 'closed'
        ORDER BY id
        LIMIT $2
        """,
        strategy_id,
        limit,
    )
    return [r["position_uid"] for r in rows]

# üîπ –£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –±–∞—Ç—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏—è–º (–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
async def _delete_positions_batch(strategy_id: int, uids: List[str]) -> int:
    if not uids:
        return 0

    async with infra.pg_pool.acquire() as conn:
        async with conn.transaction():
            # 0) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ø–æ–¥–∑–∞–ø—Ä–æ—Å LogUID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö position_uid
            #    (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ LPS/SLE –æ—á–∏—Å—Ç–∫–µ –Ω–∏–∂–µ)
            #    –ü—Ä—è–º–æ –≤ DELETE –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∑–∞–ø—Ä–æ—Å, –æ—Ç–¥–µ–ª—å–Ω—ã–π SELECT –Ω–µ –Ω—É–∂–µ–Ω.

            # 1) –û—á–∏—Å—Ç–∫–∞ LPS (laboratoty_position_stat) –ø–æ client_strategy_id –∏ position_uid/log_uid
            lps_status = await conn.execute(
                """
                DELETE FROM public.laboratoty_position_stat
                 WHERE client_strategy_id = $2
                   AND (
                        position_uid = ANY ($1::text[])
                        OR log_uid IN (
                            SELECT log_uid FROM public.positions_v4
                             WHERE position_uid = ANY ($1::text[])
                        )
                   )
                """,
                uids, strategy_id,
            )

            # 2) –û—á–∏—Å—Ç–∫–∞ SLE (signal_laboratory_entries) –ø–æ client_strategy_id –∏ log_uid
            sle_status = await conn.execute(
                """
                DELETE FROM public.signal_laboratory_entries
                 WHERE client_strategy_id = $2
                   AND log_uid IN (
                       SELECT log_uid FROM public.positions_v4
                        WHERE position_uid = ANY ($1::text[])
                   )
                """,
                uids, strategy_id,
            )

            # 3) –¶–µ–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ (TP/SL)
            await conn.execute(
                """
                DELETE FROM public.position_targets_v4
                 WHERE position_uid = ANY ($1::text[])
                """,
                uids,
            )

            # 4) –õ–æ–≥–∏ –ø–æ–∑–∏—Ü–∏–∏ (uuid)
            await conn.execute(
                """
                DELETE FROM public.positions_log_v4
                 WHERE position_uid = ANY (SELECT unnest($1::text[])::uuid)
                """,
                uids,
            )

            # 5) –õ–æ–≥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            await conn.execute(
                """
                DELETE FROM public.signal_log_entries_v4
                 WHERE position_uid = ANY ($1::text[])
                """,
                uids,
            )

            # 6) –°–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
            pos_status = await conn.execute(
                """
                DELETE FROM public.positions_v4
                 WHERE position_uid = ANY ($1::text[])
                   AND status = 'closed'
                """,
                uids,
            )

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    deleted = _rows_affected(pos_status)
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å debug-–ª–æ–≥:
    # log.debug("üßπ batch: LPS=%d SLE=%d POS=%d",
    #           _rows_affected(lps_status), _rows_affected(sle_status), deleted)
    return deleted

# üîπ –í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ —É–¥–∞–ª–∏—Ç—å –µ—ë
async def _disable_and_drop_strategy(strategy_id: int):
    # 1) –≤—ã–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
    await infra.pg_pool.execute(
        "UPDATE strategies_v4 SET enabled = FALSE WHERE id = $1",
        strategy_id,
    )

    # 2) Pub/Sub –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ (—Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ UI)
    event = {
        "id": strategy_id,
        "type": "enabled",
        "action": "false",
        "source": "cleaner",
    }
    await infra.redis_client.publish("strategies_v4_events", json.dumps(event))
    log.info(f"üì® [PubSub] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ id={strategy_id}")

    # 3) –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ ‚Äî –¥–∞—ë–º —Å–ª—É—à–∞—Ç–µ–ª—è–º –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
    await asyncio.sleep(1.0)

    # 4) —É–¥–∞–ª–∏—Ç—å —Å–∞–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–∫–∞—Å–∫–∞–¥—ã —Å–Ω–µ—Å—É—Ç TP/SL/—Ç–∏–∫–µ—Ä—ã)
    await infra.pg_pool.execute(
        "DELETE FROM strategies_v4 WHERE id = $1",
        strategy_id,
    )
    log.info(f"üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î: id={strategy_id}")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ deathrow
async def _process_strategy(strategy_id: int) -> Tuple[int, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —É–¥–∞–ª–µ–Ω–æ, –±—ã–ª–∞_–ª–∏_—Å—Ç—Ä–∞—Ç–µ–≥–∏—è_—É–¥–∞–ª–µ–Ω–∞)
    """
    total_deleted = 0

    # 1) –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏
    while True:
        uids = await _fetch_closed_position_uids(strategy_id, BATCH_LIMIT)
        if not uids:
            break

        deleted = await _delete_positions_batch(strategy_id, uids)
        total_deleted += deleted

        log.info(
            f"üßπ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id}: —É–¥–∞–ª—ë–Ω –±–∞—Ç—á –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {deleted} (batch={len(uids)})"
        )

        # –ï—Å–ª–∏ –±–∞—Ç—á –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç
        if len(uids) < BATCH_LIMIT:
            break

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
    n_closed, n_active = await _get_position_counts(strategy_id)
    log.debug(
        f"‚ÑπÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id}: –æ—Å—Ç–∞–ª–æ—Å—å closed={n_closed}, active={n_active}"
    )

    # 3) –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî –≤—ã–∫–ª—é—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    if n_closed == 0 and n_active == 0:
        log.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id}: –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º")
        await _disable_and_drop_strategy(strategy_id)
        return total_deleted, True

    # 4) –ò–Ω–∞—á–µ ‚Äî –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ/partial, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
    if n_active > 0 and n_closed == 0:
        log.info(
            f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id}: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({n_active}), –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
        )
    return total_deleted, False


# üî∏ –ü—É–±–ª–∏—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
async def run_strategies_v4_cleaner():
    log.info("üïí –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã‚Ä¶")
    await asyncio.sleep(SLEEP_START_SEC)

    while True:
        try:
            strategy_ids = await _fetch_deathrow_strategies()
            if not strategy_ids:
                log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ deathrow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await asyncio.sleep(SLEEP_CYCLE_SEC)
                continue

            log.info(f"üîé –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ deathrow: {len(strategy_ids)}")

            total_positions_deleted = 0
            total_strategies_deleted = 0

            for sid in strategy_ids:
                try:
                    deleted, dropped = await _process_strategy(sid)
                    total_positions_deleted += deleted
                    total_strategies_deleted += 1 if dropped else 0
                except Exception:
                    log.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ id={sid}")

            log.info(
                f"üìä –ò—Ç–æ–≥ –ø—Ä–æ—Ö–æ–¥–∞: —É–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π={total_positions_deleted}, "
                f"—É–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π={total_strategies_deleted}"
            )

        except Exception:
            log.exception("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ cleaner")

        # –í—Å–µ–≥–¥–∞ –∂–¥—ë–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
        await asyncio.sleep(SLEEP_CYCLE_SEC)