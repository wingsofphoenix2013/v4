# position_handler.py

import json
import asyncio
import logging
from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from dataclasses import asdict

from infra import infra, get_price
from config_loader import config
from position_state_loader import position_registry, Target

log = logging.getLogger("POSITION_HANDLER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
async def _process_positions():
    if not position_registry:
        return

    # –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    symbols = {p.symbol for p in position_registry.values() if p.status == "open"}

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
    prices_raw = await asyncio.gather(*(get_price(symbol) for symbol in symbols))
    price_snapshot: dict[str, Decimal] = {
        symbol: Decimal(str(price))
        for symbol, price in zip(symbols, prices_raw)
        if price is not None
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    to_remove = []

    for position in list(position_registry.values()):
        if position.status != "open" or position.quantity_left <= 0:
            continue

        price = price_snapshot.get(position.symbol)
        if price is None:
            continue

        await _process_tp_for_position(position, price)
        await _process_sl_for_position(position, price)

        if position.quantity_left == 0:
            to_remove.append((position.strategy_id, position.symbol))

    for key in to_remove:
        if key in position_registry:
            del position_registry[key]
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def _process_tp_for_position(position, price: Decimal):
    for tp in sorted(position.tp_targets, key=lambda t: t.level):
        if not tp.hit and not tp.canceled:
            if tp.price is None:
                log.debug(f"‚è∏Ô∏è TP-{tp.level} –∞–∫—Ç–∏–≤–µ–Ω –±–µ–∑ —Ü–µ–Ω—ã ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ: {position.uid}")
                return

            if position.direction == "long" and price >= tp.price:
                log.debug(f"‚úÖ TP-{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (long) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â• {tp.price}")
                await _handle_tp_hit(position, tp, price)

            elif position.direction == "short" and price <= tp.price:
                log.debug(f"‚úÖ TP-{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (short) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â§ {tp.price}")
                await _handle_tp_hit(position, tp, price)

            break  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω TP
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ SL –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def _process_sl_for_position(position, price: Decimal):
    active_sl = next(
        (sl for sl in position.sl_targets
         if not sl.hit and not sl.canceled and sl.price is not None),
        None
    )

    if not active_sl:
        return

    if position.direction == "long" and price > active_sl.price:
        return
    if position.direction == "short" and price < active_sl.price:
        return

    async with position.lock:
        now = datetime.utcnow()

        # üî∏ –û—Ç–º–µ—Ç–∏—Ç—å SL –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
        active_sl.hit = True
        active_sl.hit_at = now

        # üî∏ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
        is_original_sl = active_sl.quantity == position.quantity
        reason = "full-sl-hit" if is_original_sl else "sl-tp-hit"

        # üî∏ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ TP, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –∞–∫—Ç–∏–≤–Ω—ã
        for tp in position.tp_targets:
            if not tp.hit and not tp.canceled:
                tp.canceled = True
                log.debug(f"üõë TP –æ—Ç–º–µ–Ω—ë–Ω (SL-hit): {position.uid} (TP-{tp.level})")

        # üî∏ –†–∞—Å—á—ë—Ç PnL –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ—Å—Ç–∞—Ç–∫—É
        qty = position.quantity_left
        entry = position.entry_price

        if position.direction == "long":
            pnl = (price - entry) * qty
        else:
            pnl = (entry - price) * qty

        pnl = pnl.quantize(Decimal("1.00"))
        position.pnl += pnl

        log.debug(f"üíÄ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ SL {position.uid}: –ø—Ä–∏—á–∏–Ω–∞={reason}, —Ü–µ–Ω–∞={price}, pnl={pnl:+.2f}")

        # üî∏ –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await _finalize_position_close(position, price, reason)
# üî∏ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è TP –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def format_tp_hit_note(tp_level: int, price: Decimal, pnl: Decimal) -> str:
    price_str = f"{price:.4f}"
    pnl_str = f"{pnl:+.2f}"
    return f"—Å—Ä–∞–±–æ—Ç–∞–ª TP-{tp_level} –ø–æ —Ü–µ–Ω–µ {price_str}, PnL = {pnl_str}"
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP
async def _handle_tp_hit(position, tp, price: Decimal):
    async with position.lock:
        now = datetime.utcnow()

        tp.hit = True
        tp.hit_at = now

        log.debug(f"üìç TP-{tp.level} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–ª—è {position.uid} (—Ü–µ–ª—å: {tp.price}, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {price})")

        # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        precision_qty = config.tickers[position.symbol]["precision_qty"]
        quantize_mask = Decimal("1").scaleb(-precision_qty)

        closed_qty = tp.quantity.quantize(quantize_mask, rounding=ROUND_DOWN)
        position.quantity_left = (position.quantity_left - closed_qty).quantize(quantize_mask, rounding=ROUND_DOWN)

        position.planned_risk = Decimal("0")
        position.close_reason = f"tp-{tp.level}-hit"  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # üî∏ –†–∞—Å—á—ë—Ç PnL
        entry = position.entry_price
        pnl_delta = (entry - price if position.direction == "short" else price - entry) * closed_qty
        pnl_delta = pnl_delta.quantize(Decimal("1.00"))
        position.pnl += pnl_delta

        log.debug(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position.uid}: –∑–∞–∫—Ä—ã—Ç–æ {closed_qty}, PnL = {pnl_delta:+.2f}")

        # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ
        sl_policy = next(
            (row for row in config.strategies[position.strategy_id]["sl_rules"]
             if row["level"] == tp.level),
            None
        )

        log.debug(f"üìê SL-–ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è TP-{tp.level}: {sl_policy}")
        new_sl_price = None

        if sl_policy and sl_policy["sl_mode"] != "none":
            for sl in position.sl_targets:
                if not sl.hit and not sl.canceled:
                    sl.canceled = True
                    log.debug(f"üõë SL –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è {position.uid} (—Ü–µ–ª—å: {sl.price})")

            sl_mode = sl_policy["sl_mode"]

            if sl_mode == "entry":
                new_sl_price = position.entry_price
                log.debug(f"üßÆ SL-—Ä–µ–∂–∏–º entry ‚Üí —Ü–µ–Ω–∞ = {new_sl_price}")

            elif sl_mode == "percent":
                sl_value = Decimal(str(sl_policy["sl_value"]))
                delta = (position.entry_price * sl_value / 100).quantize(Decimal("0.0001"))
                new_sl_price = (
                    position.entry_price - delta if position.direction == "long"
                    else position.entry_price + delta
                )
                log.debug(f"üßÆ SL-—Ä–µ–∂–∏–º percent ‚Üí delta = {delta}, —Ü–µ–Ω–∞ = {new_sl_price}")

            else:
                log.warning(f"‚ö†Ô∏è SL-—Ä–µ–∂–∏–º {sl_mode} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return

            new_sl = Target(
                type="sl",
                level=1,
                price=new_sl_price,
                quantity=position.quantity_left,
                hit=False,
                hit_at=None,
                canceled=False
            )
            position.sl_targets.append(new_sl)
            log.debug(f"üõ°Ô∏è SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_sl_price} –¥–ª—è {position.uid}, –æ–±—ä—ë–º: {position.quantity_left}")

        # üî∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è TP
        note = format_tp_hit_note(tp.level, price, pnl_delta)

        event_data = {
            "event_type": "tp_hit",
            "position_uid": str(position.uid),
            "strategy_id": position.strategy_id,
            "symbol": position.symbol,
            "tp_level": tp.level,
            "quantity_left": str(position.quantity_left),
            "pnl": str(position.pnl),
            "close_reason": position.close_reason,
            "note": note,
        }

        if new_sl_price is not None:
            event_data["sl_replaced"] = True
            event_data["new_sl_price"] = str(new_sl_price)
            event_data["new_sl_quantity"] = str(position.quantity_left)

        await infra.redis_client.xadd("positions_update_stream", {"data": json.dumps(event_data)})
        log.debug(f"üì§ –°–æ–±—ã—Ç–∏–µ TP-{tp.level} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ positions_update_stream –¥–ª—è {position.uid}")

        # üî∏ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞
        if position.quantity_left == 0:
            await _finalize_position_close(position, price, reason="tp-full-hit")
# üî∏ –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ TP –Ω–∞ 100% –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
async def _finalize_position_close(position, exit_price: Decimal, reason: str):
    now = datetime.utcnow()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏
    precision_qty = config.tickers[position.symbol]["precision_qty"]
    quantize_mask = Decimal("1").scaleb(-precision_qty)

    position.quantity_left = Decimal("0").quantize(quantize_mask)
    position.planned_risk = Decimal("0")
    position.status = "closed"
    position.close_reason = reason
    position.exit_price = exit_price
    position.closed_at = now

    # –°–æ–±—ã—Ç–∏–µ –¥–ª—è Redis / CORE_IO
    event_data = {
        "event_type": "closed",
        "position_uid": str(position.uid),
        "strategy_id": position.strategy_id,
        "symbol": position.symbol,
        "exit_price": str(exit_price),
        "pnl": str(position.pnl),
        "close_reason": reason,
        "quantity_left": str(position.quantity_left),
        "planned_risk": str(position.planned_risk),
        "note": f"–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ {reason} –ø–æ —Ü–µ–Ω–µ {exit_price}"
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å SL-—Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ TP-1 ‚Üí SL), —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏—Ö
    if position.sl_targets:
        event_data["sl_targets"] = json.dumps(
            [asdict(sl) for sl in position.sl_targets],
            default=str
        )

    await infra.redis_client.xadd("positions_update_stream", {"data": json.dumps(event_data)})
    log.debug(f"üì§ –°–æ–±—ã—Ç–∏–µ closed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ positions_update_stream –¥–ª—è {position.uid}")
# üî∏ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ SL-–∑–∞—â–∏—Ç–µ (protect)
async def full_protect_stop(position):
    async with position.lock:
        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π TP –∏ SL
        for t in position.tp_targets + position.sl_targets:
            if not t.hit and not t.canceled:
                t.canceled = True

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        price = await get_price(position.symbol)
        if price is None:
            log.warning(f"‚ùå PROTECT: —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {position.symbol}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return

        price = Decimal(str(price))
        now = datetime.utcnow()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        position.status = "closed"
        position.closed_at = now
        position.exit_price = price
        position.close_reason = "sl-protect-stop"

        # –†–∞—Å—á—ë—Ç –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è PnL
        qty = position.quantity_left
        entry = position.entry_price

        if position.direction == "long":
            pnl = (price - entry) * qty
        else:
            pnl = (entry - price) * qty

        position.pnl += pnl.quantize(Decimal("1.00"))

        # –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∏ —Ä–∏—Å–∫–∞
        position.quantity_left = Decimal("0")
        position.planned_risk = Decimal("0")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è core_io
        event_data = {
            "event_type": "closed",
            "position_uid": str(position.uid),
            "strategy_id": position.strategy_id,
            "symbol": position.symbol,
            "exit_price": str(price),
            "pnl": str(position.pnl),
            "close_reason": "sl-protect-stop",
            "quantity_left": "0",
            "planned_risk": "0",
            "note": "–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ SL-protect",
            "sl_targets": json.dumps(
                [asdict(sl) for sl in position.sl_targets],
                default=str
            ),
            "tp_targets": json.dumps(
                [asdict(tp) for tp in position.tp_targets],
                default=str
            )
        }

        await infra.redis_client.xadd("positions_update_stream", {
            "data": json.dumps(event_data)
        })

        log.debug(f"üîí PROTECT: –ø–æ–∑–∏—Ü–∏—è {position.uid} –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ SL-protect")
# üî∏ –ó–∞–º–µ–Ω–∞ SL –Ω–∞ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –ø—Ä–∏ SL-protect
async def apply_sl_replacement(position):
    async with position.lock:
        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SL
        sl = next((
            s for s in position.sl_targets
            if not s.hit and not s.canceled and s.price is not None
        ), None)

        if not sl:
            log.warning(f"‚ö†Ô∏è PROTECT: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.uid}")
            return

        entry = position.entry_price
        sl_below_entry = (
            sl.price < entry if position.direction == "long"
            else sl.price > entry
        )

        if not sl_below_entry:
            log.info(f"üõ°Ô∏è PROTECT: SL —É–∂–µ –Ω–∞ –≤—Ö–æ–¥–µ –∏–ª–∏ –≤—ã—à–µ ({sl.price} vs {entry}) ‚Äî –∑–∞–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return

        # –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ SL
        sl.canceled = True

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SL –Ω–∞ —É—Ä–æ–≤–Ω–µ entry
        new_sl = Target(
            type="sl",
            level=1,
            price=entry,
            quantity=sl.quantity,
            hit=False,
            hit_at=None,
            canceled=False
        )
        position.sl_targets.append(new_sl)
        position.planned_risk = Decimal("0")

        log.info(f"üõ°Ô∏è PROTECT: SL –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞ {entry} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.uid}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è core_io
        event_data = {
            "event_type": "sl_replaced",
            "position_uid": str(position.uid),
            "strategy_id": position.strategy_id,
            "symbol": position.symbol,
            "note": "SL –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å entry",
            "planned_risk": "0",
            "sl_targets": json.dumps(
                [asdict(sl) for sl in position.sl_targets],
                default=str
            ),
            "logged_at": datetime.utcnow().isoformat()
        }

        await infra.redis_client.xadd("positions_update_stream", {
            "data": json.dumps(event_data)
        })
# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π TP –∏ SL
async def run_position_handler():
    while True:
        try:
            await _process_positions()
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ run_position_handler")
        await asyncio.sleep(1)