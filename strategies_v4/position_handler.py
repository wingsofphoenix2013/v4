# position_handler.py

import asyncio
import logging
from datetime import datetime
import json
from decimal import Decimal

from infra import infra
from position_state_loader import position_registry

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π
log = logging.getLogger("POSITION_HANDLER")

# üî∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—é —Ü–µ–ª–∏ (dict –∏–ª–∏ Target)
def get_field(obj, field, default=None):
    return obj.get(field, default) if isinstance(obj, dict) else getattr(obj, field, default)

# üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ Redis-–ø–æ—Ç–æ–∫
async def push_position_update(position, redis):
    def serialize_targets(targets):
        return [
            {
                "level": t["level"],
                "price": str(t["price"]) if t["price"] is not None else None,
                "quantity": str(t["quantity"]),
                "type": t["type"],
                "hit": bool(t["hit"]),
                "hit_at": t["hit_at"].isoformat() if t["hit_at"] else None,
                "canceled": bool(t["canceled"]),
                "source": t.get("source", "price")
            }
            for t in targets
        ]

    payload = {
        "position_uid": position.uid,
        "strategy_id": position.strategy_id,
        "quantity_left": str(position.quantity_left),
        "status": position.status,
        "exit_price": str(position.exit_price) if position.exit_price else None,
        "close_reason": position.close_reason,
        "pnl": str(position.pnl),
        "closed_at": position.closed_at.isoformat() if position.closed_at else None,
        "tp_targets": serialize_targets(position.tp_targets),
        "sl_targets": serialize_targets(position.sl_targets)
    }

    try:
        await redis.xadd("positions_update_stream", {"data": json.dumps(payload)})
        log.info(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis: uid={position.uid}")
    except Exception as e:
        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

# üî∏ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
async def run_position_monitor_loop():
    log.info("‚úÖ [POSITION_HANDLER] –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            for position in list(position_registry.values()):
                asyncio.create_task(process_position(position))
            await asyncio.sleep(1)
        except Exception:
            log.exception("‚ùå [POSITION_HANDLER] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ lock
async def process_position(position):
    async with position.lock:
        log.debug(f"üîí [POSITION_HANDLER] LOCK: –ø–æ–∑–∏—Ü–∏—è {position.uid}")
        await check_tp(position)
        await check_sl(position)
        await check_protect(position)

# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ TP-—É—Ä–æ–≤–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ —Ü–µ–Ω–µ)
async def check_tp(position):
    active_tp = sorted(
        [
            t for t in position.tp_targets
            if get_field(t, "type") == "tp"
            and get_field(t, "source") == "price"
            and not get_field(t, "hit")
            and not get_field(t, "canceled")
        ],
        key=lambda t: get_field(t, "level")
    )

    if not active_tp:
        return

    tp = active_tp[0]

    redis = infra.redis_client
    mark_str = await redis.get(f"price:{position.symbol}")
    if not mark_str:
        log.warning(f"[TP] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É markprice")
        return

    mark = Decimal(mark_str)
    tp_price = get_field(tp, "price")
    tp_level = get_field(tp, "level")

    log.info(
        f"[TP-CHECK] –ü–æ–∑–∏—Ü–∏—è symbol={position.symbol} | mark={mark} vs target={tp_price} (level {tp_level})"
    )

    if position.direction == "long" and mark < tp_price:
        return
    if position.direction == "short" and mark > tp_price:
        return

    # TP —Å—Ä–∞–±–æ—Ç–∞–ª
    qty = get_field(tp, "quantity")
    entry_price = position.entry_price
    pnl_gain = (tp_price - entry_price) * qty if position.direction == "long" else (entry_price - tp_price) * qty

    tp["hit"] = True
    tp["hit_at"] = datetime.utcnow()

    position.quantity_left -= qty
    position.planned_risk = Decimal("0")
    position.close_reason = f"tp-{tp_level}-hit"
    position.pnl += pnl_gain

    log.info(
        f"üéØ TP —Å—Ä–∞–±–æ—Ç–∞–ª: –ø–æ–∑–∏—Ü–∏—è {position.uid} | —É—Ä–æ–≤–µ–Ω—å {tp_level} | –æ–±—ä—ë–º {qty} | pnl += {pnl_gain:.6f}"
    )
    log.info(f"üìâ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏: quantity_left = {position.quantity_left}")

    if position.quantity_left <= 0:
        position.status = "closed"
        position.exit_price = mark
        position.close_reason = "full-tp-hit"
        position.closed_at = datetime.utcnow()

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö SL —Ü–µ–ª–µ–π
        for sl in position.sl_targets:
            if not get_field(sl, "hit") and not get_field(sl, "canceled"):
                sl["canceled"] = True
                sl_level = get_field(sl, "level")
                log.info(f"‚ö†Ô∏è SL –æ—Ç–º–µ–Ω—ë–Ω: –ø–æ–∑–∏—Ü–∏—è {position.uid} | —É—Ä–æ–≤–µ–Ω—å {sl_level}")

        log.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position.uid} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ TP")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        del position_registry[(position.strategy_id, position.symbol)]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Redis
    redis = infra.redis_client
    await push_position_update(position, redis)

# üî∏ –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ SL
async def check_sl(position):
    log.debug(f"[SL] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –ø—Ä–æ–≤–µ—Ä–∫–∞ SL (–∑–∞–≥–ª—É—à–∫–∞)")


# üî∏ –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
async def check_protect(position):
    log.debug(f"[PROTECT] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)")