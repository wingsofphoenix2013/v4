# position_handler.py

import json
import asyncio
import logging
from datetime import datetime
from decimal import Decimal, ROUND_DOWN

from infra import infra, get_price
from config_loader import config
from position_state_loader import position_registry, Target

log = logging.getLogger("POSITION_HANDLER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
async def _process_positions():
    if not position_registry:
        return

    # –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    symbols = {p.symbol for p in position_registry.values() if p.status == "open"}
    price_snapshot: dict[str, Decimal] = {}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
    for symbol in symbols:
        price = await get_price(symbol)
        if price is not None:
            price_snapshot[symbol] = Decimal(str(price))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    for position in position_registry.values():
        if position.status != "open" or position.quantity_left <= 0:
            continue

        price = price_snapshot.get(position.symbol)
        if price is None:
            continue

        await _process_tp_for_position(position, price)
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def _process_tp_for_position(position, price: Decimal):
    for tp in sorted(position.tp_targets, key=lambda t: t.level):
        if not tp.hit and not tp.canceled:
            if tp.price is None:
                log.info(f"‚è∏Ô∏è TP-{tp.level} –∞–∫—Ç–∏–≤–µ–Ω –±–µ–∑ —Ü–µ–Ω—ã ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ: {position.uid}")
                return

            if position.direction == "long" and price >= tp.price:
                log.info(f"‚úÖ TP-{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (long) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â• {tp.price}")
                await _handle_tp_hit(position, tp, price)

            elif position.direction == "short" and price <= tp.price:
                log.info(f"‚úÖ TP-{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (short) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â§ {tp.price}")
                await _handle_tp_hit(position, tp, price)

            break  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω TP
# üî∏ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è TP –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def format_tp_hit_note(tp_level: int, price: Decimal, pnl: Decimal) -> str:
    price_str = f"{price:.4f}"
    pnl_str = f"{pnl:+.2f}"
    return f"—Å—Ä–∞–±–æ—Ç–∞–ª TP-{tp_level} –ø–æ —Ü–µ–Ω–µ {price_str}, PnL = {pnl_str}"
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP
async def _handle_tp_hit(position, tp, price: Decimal):
    async with position.lock:
        now = datetime.utcnow()

        tp.hit = True
        tp.hit_at = now

        log.info(f"üìç TP-{tp.level} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–ª—è {position.uid} (—Ü–µ–ª—å: {tp.price}, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {price})")

        # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        precision_qty = config.tickers[position.symbol]["precision_qty"]
        quantize_mask = Decimal("1").scaleb(-precision_qty)

        closed_qty = tp.quantity.quantize(quantize_mask, rounding=ROUND_DOWN)
        position.quantity_left = (position.quantity_left - closed_qty).quantize(quantize_mask, rounding=ROUND_DOWN)

        position.planned_risk = Decimal("0")
        position.close_reason = f"tp-{tp.level}-hit"

        # üî∏ –†–∞—Å—á—ë—Ç PnL
        entry = position.entry_price
        if position.direction == "long":
            pnl_delta = (price - entry) * closed_qty
        else:
            pnl_delta = (entry - price) * closed_qty

        pnl_delta = pnl_delta.quantize(Decimal("1.00"))
        position.pnl += pnl_delta

        log.info(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position.uid}: –∑–∞–∫—Ä—ã—Ç–æ {closed_qty}, PnL = {pnl_delta:+.2f}")

        # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ
        sl_policy = next(
            (row for row in config.strategies[position.strategy_id]["sl_rules"]
             if row["tp_level_id"] == tp.id),  # —Ñ–∏–∫—Å: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ tp.id
            None
        )

        log.info(f"üìê SL-–ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è TP-{tp.level}: {sl_policy}")

        if sl_policy and sl_policy["sl_mode"] != "none":
            # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö SL
            for sl in position.sl_targets:
                if not sl.hit and not sl.canceled:
                    sl.canceled = True
                    log.info(f"üõë SL –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è {position.uid} (—Ü–µ–ª—å: {sl.price})")

            sl_mode = sl_policy["sl_mode"]
            sl_value = Decimal(str(sl_policy["sl_value"]))

            if sl_mode == "entry":
                new_sl_price = position.entry_price
                log.info(f"üßÆ SL-—Ä–µ–∂–∏–º: entry ‚Üí –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ SL = {new_sl_price}")

            elif sl_mode == "percent":
                delta = (position.entry_price * sl_value / 100).quantize(Decimal("0.0001"))
                if position.direction == "long":
                    new_sl_price = (position.entry_price - delta)
                else:
                    new_sl_price = (position.entry_price + delta)
                log.info(f"üßÆ SL-—Ä–µ–∂–∏–º: percent ‚Üí delta = {delta}, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ SL = {new_sl_price}")

            else:
                log.warning(f"‚ö†Ô∏è SL —Ä–µ–∂–∏–º {sl_mode} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return

            new_sl = Target(
                type="sl",
                level=1,
                price=new_sl_price,
                quantity=position.quantity_left,
                hit=False,
                hit_at=None,
                canceled=False
            )
            position.sl_targets.append(new_sl)

            log.info(f"üõ°Ô∏è –ù–æ–≤—ã–π SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_sl_price} –¥–ª—è {position.uid}, –æ–±—ä—ë–º: {position.quantity_left}")

        # üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Redis
        note = format_tp_hit_note(tp.level, price, pnl_delta)

        event_data = {
            "event_type": "tp_hit",
            "position_uid": str(position.uid),
            "strategy_id": position.strategy_id,
            "symbol": position.symbol,
            "note": note,
        }

        await infra.redis_client.xadd("positions_update_stream", {"data": json.dumps(event_data)})

        log.info(f"üì§ –°–æ–±—ã—Ç–∏–µ TP-{tp.level} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ positions_update_stream –¥–ª—è {position.uid}")
# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π TP –∏ SL
async def run_position_handler():
    while True:
        try:
            await _process_positions()
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ run_position_handler")
        await asyncio.sleep(1)