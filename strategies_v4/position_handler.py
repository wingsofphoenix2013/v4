# position_handler.py

import asyncio
import logging
from datetime import datetime
from decimal import Decimal

from infra import get_price
from position_state_loader import position_registry

log = logging.getLogger("POSITION_HANDLER")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
async def _process_positions():
    if not position_registry:
        return

    # –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    symbols = {p.symbol for p in position_registry.values() if p.status == "open"}
    price_snapshot: dict[str, Decimal] = {}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
    for symbol in symbols:
        price = await get_price(symbol)
        if price is not None:
            price_snapshot[symbol] = Decimal(str(price))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    for position in position_registry.values():
        if position.status != "open" or position.quantity_left <= 0:
            continue

        price = price_snapshot.get(position.symbol)
        if price is None:
            continue

        await _process_tp_for_position(position, price)
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ TP –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def _process_tp_for_position(position, price: Decimal):
    active_tp = next((
        tp for tp in sorted(position.tp_targets, key=lambda t: t.level)
        if not tp.hit and not tp.canceled and tp.price is not None
    ), None)

    if not active_tp:
        return

    if position.direction == "long" and price >= active_tp.price:
        log.info(f"‚úÖ TP-{active_tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (long) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â• {active_tp.price}")
        await _handle_tp_hit(position, active_tp, price)

    elif position.direction == "short" and price <= active_tp.price:
        log.info(f"‚úÖ TP-{active_tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (short) {position.symbol}: —Ü–µ–Ω–∞ {price} ‚â§ {active_tp.price}")
        await _handle_tp_hit(position, active_tp, price)
# üî∏ –ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TP-—Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
async def _handle_tp_hit(position, tp, price: Decimal):
    log.info(f"üü° [–ó–ê–ì–õ–£–®–ö–ê] TP-{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.uid}, —Ü–µ–Ω–∞: {price}")
    await asyncio.sleep(0)  # –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
# üî∏ –ì–ª–∞–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π TP –∏ SL
async def run_position_handler():
    while True:
        try:
            await _process_positions()
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ –≤ run_position_handler")
        await asyncio.sleep(1)