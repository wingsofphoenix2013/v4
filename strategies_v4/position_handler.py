# position_handler.py

import asyncio
import logging
from position_state_loader import position_registry

# üî∏ –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π
log = logging.getLogger("POSITION_HANDLER")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
async def run_position_monitor_loop():
    log.info("‚úÖ [POSITION_HANDLER] –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            for position in list(position_registry.values()):
                asyncio.create_task(process_position(position))
            await asyncio.sleep(1)
        except Exception as e:
            log.exception("‚ùå [POSITION_HANDLER] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ lock
async def process_position(position):
    async with position.lock:
        log.info(f"üîí [POSITION_HANDLER] LOCK: –ø–æ–∑–∏—Ü–∏—è {position.uid}")
        await check_tp(position)
        await check_sl(position)
        await check_protect(position)

# üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ TP-—É—Ä–æ–≤–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ —Ü–µ–Ω–µ)
async def check_tp(position):
    # –û—Ç–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TP-—Ü–µ–ª–∏ —Å source='price', –Ω–µ hit –∏ –Ω–µ canceled
    active_tp = sorted(
        [
            t for t in position.tp_targets
            if (getattr(t, "type", None) or t.get("type")) == "tp"
            and (getattr(t, "source", None) or t.get("source")) == "price"
            and not (getattr(t, "hit", False) or t.get("hit"))
            and not (getattr(t, "canceled", False) or t.get("canceled"))
        ],
        key=lambda t: getattr(t, "level", t.get("level"))
    )

    if not active_tp:
        return

    tp = active_tp[0]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ Redis
    redis = infra.redis_client
    mark_str = await redis.get(f"price:{position.symbol}")
    if not mark_str:
        log.warning(f"[TP] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É markprice")
        return

    mark = Decimal(mark_str)
    tp_price = getattr(tp, "price", tp.get("price"))
    tp_level = getattr(tp, "level", tp.get("level"))

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ TP-—É—Ä–æ–≤–Ω—è
    log.info(
        f"[TP-CHECK] –ü–æ–∑–∏—Ü–∏—è {position.uid} | symbol={position.symbol} | mark={mark} "
        f"vs target={tp_price} (level {tp_level})"
    )

# üîπ –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ SL
async def check_sl(position):
    log.info(f"[SL] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –ø—Ä–æ–≤–µ—Ä–∫–∞ SL (–∑–∞–≥–ª—É—à–∫–∞)")

# üîπ –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç–Ω–æ–≥–æ SL
async def check_protect(position):
    log.info(f"[PROTECT] –ü–æ–∑–∏—Ü–∏—è {position.uid}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)")