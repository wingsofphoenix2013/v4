# position_opener.py

import logging
import json
import asyncio

from infra import infra

log = logging.getLogger("POSITION_OPENER")

# üî∏ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
async def open_position(signal: dict, strategy_obj, context: dict) -> dict:
    symbol = signal.get("symbol")
    direction = signal.get("direction")
    strategy_id = signal.get("strategy_id")

    log.info(f"üì• [OPEN_POSITION] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: strategy={strategy_id}, symbol={symbol}, direction={direction}")
    # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç: —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏, –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è

    return {"status": "opened (mock)"}

# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ—Ç–æ–∫–∞ strategy_opener_stream
async def run_position_opener_loop():
    log.info("üß≠ [POSITION_OPENER] –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è strategy_opener_stream")

    redis = infra.redis_client
    last_id = "$"

    while True:
        try:
            response = await redis.xread(
                streams={"strategy_opener_stream": last_id},
                count=10,
                block=1000
            )

            if not response:
                continue

            for stream_name, messages in response:
                for msg_id, msg_data in messages:
                    last_id = msg_id
                    try:
                        payload = json.loads(msg_data["data"])
                        await open_position(payload, None, {"redis": redis})
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è [POSITION_OPENER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

        except Exception:
            log.exception("‚ùå [POSITION_OPENER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ strategy_opener_stream")
            await asyncio.sleep(5)