# position_opener.py

import json
import logging
import asyncio

from infra import infra
from position_state_loader import position_registry

# üî∏ –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger("POSITION_OPENER")

# üî∏ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
async def open_position(signal: dict, context: dict):
    strategy_id = signal["strategy_id"]
    symbol = signal["symbol"]
    direction = signal["direction"]

    log.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {symbol} {direction} (strategy {strategy_id})")
    # TODO: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
    return

# üî∏ –í–æ—Ä–∫–µ—Ä: —Å–ª—É—à–∞–µ—Ç Redis Stream strategy_opener_stream
async def run_position_opener_loop():
    stream = "strategy_opener_stream"
    group = "position_opener"
    consumer = "opener_1"
    redis = infra.redis_client

    try:
        await redis.xgroup_create(stream, group, id="$", mkstream=True)
        log.info(f"üì° –ì—Ä—É–ø–ø–∞ {group} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {stream}")
    except Exception as e:
        if "BUSYGROUP" in str(e):
            log.info(f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ {group} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Consumer Group")
            return

    log.info(f"üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {stream} ‚Üí {group}")

    while True:
        try:
            entries = await redis.xreadgroup(
                groupname=group,
                consumername=consumer,
                streams={stream: ">"},
                count=50,
                block=1000
            )

            for _, records in entries:
                for record_id, data in records:
                    try:
                        payload = json.loads(data["data"])
                        await open_position(payload, context={"redis": redis})
                        await redis.xack(stream, group, record_id)
                    except Exception:
                        log.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        except Exception:
            log.exception("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            await asyncio.sleep(2)