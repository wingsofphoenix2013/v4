# core_io.py

import asyncio
import logging
import json
from datetime import datetime
from infra import infra

log = logging.getLogger("GEN_IO")

# üî∏ –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def run_core_io():
    redis = infra.redis_client
    pg = infra.pg_pool
    stream = "generator_log_stream"
    last_id = "$"

    log.debug("[CORE_IO] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

    while True:
        try:
            response = await redis.xread(
                streams={stream: last_id},
                count=100,
                block=1000
            )
            if not response:
                continue

            for _, messages in response:
                for msg_id, data in messages:
                    last_id = msg_id
                    await process_log_entry(data)

        except Exception:
            log.exception("[CORE_IO] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await asyncio.sleep(1)


# üî∏ –ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ generator_logs_v4
async def process_log_entry(data: dict):
    try:
        symbol = data["symbol"]
        timeframe = data["timeframe"]
        open_time = datetime.fromisoformat(data["open_time"])
        rule = data["rule"]
        status = data["status"]
        signal_id = int(data["signal_id"]) if data.get("signal_id") else None
        direction = data.get("direction") or None
        reason = data.get("reason") or None
        details = data.get("details") or "{}"  # üëà –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–π

        query = """
            INSERT INTO generator_logs_v4 (
                symbol, timeframe, open_time, rule, status,
                signal_id, direction, reason, details
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        """

        await infra.pg_pool.execute(
            query,
            symbol, timeframe, open_time, rule, status,
            signal_id, direction, reason, details  # ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º str
        )

        log.debug(f"[GEN_IO] ‚úÖ –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {symbol}/{timeframe} {status}")

    except Exception:
        log.exception("[GEN_IO] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞")