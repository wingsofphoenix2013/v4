# rule_processor.py

import asyncio
import logging
from datetime import datetime
from infra import infra
from rule_loader import RULE_INSTANCES

log = logging.getLogger("RULE_PROC")


# üî∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def run_rule_processor():
    redis = infra.redis_client
    stream = "indicator_stream"
    last_id = "$"  # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è

    log.info("[RULE_PROCESSOR] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞. –ò—Å—Ç–æ—á–Ω–∏–∫: indicator_stream")

    while True:
        try:
            response = await redis.xread(
                streams={stream: last_id},
                count=100,
                block=1000  # 1 —Å–µ–∫—É–Ω–¥–∞
            )
            if not response:
                continue

            for _, messages in response:
                for msg_id, data in messages:
                    last_id = msg_id
                    await handle_ready_event(data)

        except Exception:
            log.exception("[RULE_PROCESSOR] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞")
            await asyncio.sleep(1)


# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def handle_ready_event(data: dict):
    try:
        symbol = data["symbol"]
        tf = data["timeframe"]
        open_time = datetime.fromisoformat(data["open_time"].replace("Z", "+00:00"))
    except Exception:
        log.warning(f"[RULE_PROCESSOR] ‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞: {data}")
        return

    for (rule_name, rule_symbol, rule_tf), rule in RULE_INSTANCES.items():
        if rule_symbol != symbol or rule_tf != tf:
            continue

        try:
            log.info(f"[RULE_PROCESSOR] üîç {rule_name} ‚Üí {symbol}/{tf}")
            result = await rule.update(open_time)
            if result:
                log.info(f"[RULE_PROCESSOR] ‚úÖ –°–∏–≥–Ω–∞–ª {result.direction.upper()} –ø–æ {symbol}/{tf}")
                await publish_signal(result, open_time, symbol)
        except Exception:
            log.exception(f"[RULE_PROCESSOR] ‚ùå –û—à–∏–±–∫–∞ –≤ update() –ø—Ä–∞–≤–∏–ª–∞ {rule_name}")


# üî∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ Redis Stream signals_stream
async def publish_signal(result: SignalResult, open_time: datetime, symbol: str):
    redis = infra.redis_client
    now = datetime.utcnow().isoformat()

    try:
        config = next(s for s in infra.SIGNAL_CONFIGS if s["id"] == result.signal_id)
        message = config["long_phrase"] if result.direction == "long" else config["short_phrase"]
    except StopIteration:
        log.info(f"[RULE_PROCESSOR] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è signal_id={result.signal_id}")
        return

    payload = {
        "symbol": symbol,
        "message": message,
        "bar_time": open_time.isoformat(),
        "sent_at": now,
        "received_at": now,
        "source": "generator"
    }

    await redis.xadd("signals_stream", payload)
    log.info(f"[RULE_PROCESSOR] üì§ –°–∏–≥–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ signals_stream ‚Üí {symbol} {message}")