# rule_processor.py

import asyncio
import logging
from collections import defaultdict
from datetime import datetime

from infra import infra, ENABLED_TICKERS
from rule_loader import RULE_INSTANCES

log = logging.getLogger("GEN")

# üî∏ –ë—É—Ñ–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:
# –ö–ª—é—á: (symbol, timeframe, open_time) ‚Üí {param: value}
INDICATOR_BUFFER = defaultdict(dict)

# üî∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def run_rule_processor():
    redis = infra.redis_client
    stream = "indicator_stream"
    last_id = "$"  # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è

    log.info("[RULE_PROCESSOR] –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

    while True:
        try:
            response = await redis.xread(
                streams={stream: last_id},
                count=100,
                block=1000  # 1 —Å–µ–∫
            )
            if not response:
                continue

            for _, messages in response:
                for msg_id, data in messages:
                    last_id = msg_id
                    await process_indicator_message(data)

        except Exception:
            log.exception("[RULE_PROCESSOR] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞")
            await asyncio.sleep(1)
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def process_indicator_message(data: dict):
    try:
        symbol = data["symbol"]
        tf = data["interval"]
        open_time = datetime.fromisoformat(data["open_time"])
        param = data["param"]
        value = float(data["value"])
    except Exception:
        log.warning(f"[RULE_PROCESSOR] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        return

    key = (symbol, tf, open_time)
    INDICATOR_BUFFER[key][param] = value

    # –ù–∞–π–¥—ë–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
    for (rule_name, rule_symbol, rule_tf), rule in RULE_INSTANCES.items():
        if rule_symbol != symbol or rule_tf != tf:
            continue

        required = set(rule.required_indicators())
        current = set(INDICATOR_BUFFER[key].keys())

        if not required.issubset(current):
            return  # –µ—â—ë –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—à–ª–∏

        indicator_values = INDICATOR_BUFFER.pop(key)

        try:
            result = await rule.update(open_time, indicator_values)
            if result:
                log.info(f"[RULE_PROCESSOR] ‚úÖ –°–∏–≥–Ω–∞–ª {result.direction.upper()} ‚Üí {symbol}/{tf}")
                # —Å—é–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ signals_stream
        except Exception:
            log.exception(f"[RULE_PROCESSOR] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è update() –¥–ª—è {rule_name} {symbol}/{tf}")