# infra.py

import os
import logging
import asyncpg
import redis.asyncio as aioredis

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –∫—ç—à–∏
PG_POOL = None
REDIS = None
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

ENABLED_TICKERS = {}       # symbol ‚Üí {precision_price, precision_qty}
SIGNAL_CONFIGS = []        # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ signals_v4
RULE_DEFINITIONS = {}      # rule ‚Üí {class_name, module_name}

log = logging.getLogger("GEN")

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    –ï—Å–ª–∏ DEBUG_MODE=True ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è debug/info/warning/error,
    –µ—Å–ª–∏ DEBUG_MODE=False ‚Äî —Ç–æ–ª—å–∫–æ info/warning/error.
    """
    level = logging.DEBUG if DEBUG_MODE else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async def init_pg():
    global PG_POOL
    dsn = os.environ["POSTGRES_DSN"]
    PG_POOL = await asyncpg.create_pool(dsn)
    log.info("[INIT] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
async def init_redis():
    global REDIS
    REDIS = aioredis.from_url(os.environ["REDIS_URL"])
    log.info("[INIT] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ tickers_v4
async def load_enabled_tickers():
    global ENABLED_TICKERS
    query = """
        SELECT symbol, precision_price, precision_qty
        FROM tickers_v4
        WHERE status = 'enabled' AND tradepermission = 'enabled'
    """
    async with PG_POOL.acquire() as conn:
        rows = await conn.fetch(query)
        ENABLED_TICKERS = {
            row["symbol"]: {
                "precision_price": row["precision_price"],
                "precision_qty": row["precision_qty"]
            }
            for row in rows
        }
    log.info(f"[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(ENABLED_TICKERS)}")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ signals_v4
async def load_signal_configs():
    global SIGNAL_CONFIGS
    query = """
        SELECT id, name, long_phrase, short_phrase, timeframe, rule
        FROM signals_v4
        WHERE enabled = true AND source = 'generator'
    """
    async with PG_POOL.acquire() as conn:
        SIGNAL_CONFIGS = await conn.fetch(query)
    log.info(f"[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {len(SIGNAL_CONFIGS)}")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –∏–∑ signal_rules_v4
async def load_rule_definitions():
    global RULE_DEFINITIONS
    query = "SELECT name, class_name, module_name FROM signal_rules_v4"
    async with PG_POOL.acquire() as conn:
        rows = await conn.fetch(query)
        RULE_DEFINITIONS = {row["name"]: row for row in rows}
    log.info(f"[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(RULE_DEFINITIONS)}")

# üî∏ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
async def load_configs():
    await load_enabled_tickers()
    await load_signal_configs()
    await load_rule_definitions()