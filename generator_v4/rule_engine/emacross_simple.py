# emacross_simple.py

from datetime import datetime
from typing import Optional

from rule_engine.base import SignalRule, SignalResult


# üî∏ –ü—Ä–∞–≤–∏–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: EMA9 –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA21
class EmaCrossSimple(SignalRule):
    def required_indicators(self) -> list[str]:
        # –¢—Ä–µ–±—É–µ–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª–∞
        return ["ema9", "ema21"]

    async def update(
        self,
        open_time: datetime,
        indicator_values: dict[str, float]
    ) -> Optional[SignalResult]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if not all(k in indicator_values for k in self.required_indicators()):
            return None

        ema9 = indicator_values["ema9"]
        ema21 = indicator_values["ema21"]

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ ema9 –≤—ã—à–µ ema21 ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ long
        if ema9 > ema21:
            return SignalResult(
                signal_id=self.signal_id,
                direction="long",
                reason=f"EMA9 ({ema9}) –ø–µ—Ä–µ—Å—ë–∫ EMA21 ({ema21}) –≤–≤–µ—Ä—Ö",
                details={"ema9": ema9, "ema21": ema21}
            )
        elif ema9 < ema21:
            return SignalResult(
                signal_id=self.signal_id,
                direction="short",
                reason=f"EMA9 ({ema9}) –ø–µ—Ä–µ—Å—ë–∫ EMA21 ({ema21}) –≤–Ω–∏–∑",
                details={"ema9": ema9, "ema21": ema21}
            )

        # –ï—Å–ª–∏ –æ–Ω–∏ —Ä–∞–≤–Ω—ã ‚Äî –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
        return None