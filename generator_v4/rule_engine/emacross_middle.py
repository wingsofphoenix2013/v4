# emacross_middle.py

import logging
from datetime import datetime
from typing import Optional

from rule_engine.base import SignalRule, SignalResult
from infra import ENABLED_TICKERS, infra

log = logging.getLogger("EMACROSS_MIDDLE")


# üî∏ –ü—Ä–∞–≤–∏–ª–æ: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ EMA9/EMA21 (MIDDLE)
class EmaCrossMiddle(SignalRule):
    def required_indicators(self) -> list[str]:
        return ["ema9", "ema21"]

    # üî∏ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    async def update(self, open_time: datetime) -> Optional[SignalResult]:
        redis = infra.redis_client
        key_last = f"last_signal:{self.symbol}:ema_cross_middle"
        last_ts = await redis.get(key_last)
        if last_ts:
            last_dt = datetime.fromisoformat(last_ts)
            if (open_time - last_dt).total_seconds() < 4 * 300:
                log.info(f"[EMACROSS_MIDDLE] ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –±—ã–ª < 4 –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥")
                return None

        ema9 = await self.fetch_indicator_series("ema9", 6, open_time)
        ema21 = await self.fetch_indicator_series("ema21", 6, open_time)

        if len(ema9) < 6 or len(ema21) < 6:
            log.info(f"[EMACROSS_MIDDLE] ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol}/{self.timeframe}")
            return None

        p9, c9 = ema9[-2], ema9[-1]
        p21, c21 = ema21[-2], ema21[-1]

        # –£—Å–ª–æ–≤–∏–µ 1: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        if not (p9 <= p21 and c9 > c21):
            log.info(f"[EMACROSS_MIDDLE] ‚ÑπÔ∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–µ—Ç –¥–ª—è {self.symbol}/{self.timeframe}")
            return None

        # –£—Å–ª–æ–≤–∏–µ 2: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        precision = ENABLED_TICKERS[self.symbol]["precision_price"]
        min_delta = max(0.0003 * c21, 2 * 10**-precision)
        actual_delta = abs(c9 - c21)
        if actual_delta < min_delta:
            log.info(f"[EMACROSS_MIDDLE] ‚ÑπÔ∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {actual_delta:.8f} < {min_delta:.8f}")
            return None

        # –£—Å–ª–æ–≤–∏–µ 3: –Ω–∞–∫–ª–æ–Ω ema9 > ema21
        if (c9 - p9) <= (c21 - p21):
            log.info(f"[EMACROSS_MIDDLE] ‚ÑπÔ∏è –ù–∞–∫–ª–æ–Ω ema9 –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω")
            return None

        # –£—Å–ª–æ–≤–∏–µ 4: delta[i] —É–±—ã–≤–∞–µ—Ç —Ö–æ—Ç—è –±—ã –Ω–∞ 3 –∏–∑ 5
        deltas = [abs(ema9[i] - ema21[i]) for i in range(0, 5)]
        count_down = sum(1 for i in range(4) if deltas[i] > deltas[i+1])
        if count_down < 3:
            log.info(f"[EMACROSS_MIDDLE] ‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–±—ã–≤–∞—é—â–∏—Ö –¥–µ–ª—å—Ç: {count_down}/5")
            return None

        await redis.set(key_last, open_time.isoformat())

        log.info(f"[EMACROSS_MIDDLE] ‚úÖ LONG —Å–∏–≥–Ω–∞–ª –¥–ª—è {self.symbol}/{self.timeframe} ‚Äî delta={actual_delta:.8f}")
        return SignalResult(
            signal_id=self.signal_id,
            direction="long",
            reason="EMA9 –ø–µ—Ä–µ—Å—ë–∫ EMA21 —Å —É—Å–ª–æ–≤–∏—è–º–∏ MIDDLE",
            details={
                "prev_ema9": p9,
                "prev_ema21": p21,
                "curr_ema9": c9,
                "curr_ema21": c21,
                "delta": actual_delta,
                "min_delta": min_delta,
                "delta_series": deltas
            }
        )