# emacross_light.py

import logging
from datetime import datetime
from typing import Optional

from rule_engine.base import SignalRule, SignalResult
from infra import ENABLED_TICKERS, infra

log = logging.getLogger("EMACROSS_LIGHT")


# üî∏ –ü—Ä–∞–≤–∏–ª–æ: –ª—ë–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA9/EMA21
class EmaCrossLight(SignalRule):
    def required_indicators(self) -> list[str]:
        return ["ema9", "ema21"]

    # üî∏ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
    async def update(self, open_time: datetime) -> Optional[SignalResult]:
        # –ó–∞—â–∏—Ç–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –±–∞—Ä–∞ –Ω–∞–∑–∞–¥
        redis = infra.redis_client
        key_last = f"last_signal:{self.symbol}:ema_cross_light"
        last_ts = await redis.get(key_last)
        if last_ts:
            last_dt = datetime.fromisoformat(last_ts)
            if (open_time - last_dt).total_seconds() < 2 * 300:
                log.info(f"[EMACROSS_LIGHT] ‚è© –°–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω (–º–µ–Ω—å—à–µ 2 –±–∞—Ä–æ–≤): {self.symbol}")
                return None

        ema9 = await self.fetch_indicator_series("ema9", 2, open_time)
        ema21 = await self.fetch_indicator_series("ema21", 2, open_time)

        if len(ema9) < 2 or len(ema21) < 2:
            log.info(f"[EMACROSS_LIGHT] ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol}/{self.timeframe}")
            return None

        prev_ema9, curr_ema9 = ema9
        prev_ema21, curr_ema21 = ema21

        # –£—Å–ª–æ–≤–∏–µ 1: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        if not (prev_ema9 <= prev_ema21 and curr_ema9 > curr_ema21):
            log.info(f"[EMACROSS_LIGHT] ‚ÑπÔ∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–µ—Ç –¥–ª—è {self.symbol}/{self.timeframe}")
            return None

        # –£—Å–ª–æ–≤–∏–µ 2: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        min_delta = 0.0002 * curr_ema21
        actual_delta = abs(curr_ema9 - curr_ema21)
        if actual_delta < min_delta:
            log.info(f"[EMACROSS_LIGHT] ‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø–æ –¥–µ–ª—å—Ç–µ: delta={actual_delta:.8f}, min={min_delta:.8f}")
            return None

        # –£—Å–ª–æ–≤–∏–µ 3: –Ω–∞–∫–ª–æ–Ω
        if (curr_ema9 - prev_ema9) < (curr_ema21 - prev_ema21):
            log.info(f"[EMACROSS_LIGHT] ‚ÑπÔ∏è –ù–∞–∫–ª–æ–Ω ema9 < ema21 ‚Äî —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
            return None

        # –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await redis.set(key_last, open_time.isoformat())

        log.info(f"[EMACROSS_LIGHT] ‚úÖ LONG —Å–∏–≥–Ω–∞–ª –¥–ª—è {self.symbol}/{self.timeframe} ‚Äî delta={actual_delta:.8f}")
        return SignalResult(
            signal_id=self.signal_id,
            direction="long",
            reason="EMA9 –ø–µ—Ä–µ—Å—ë–∫ EMA21 —Å —É—Å–ª–æ–≤–∏—è–º–∏ LIGHT",
            details={
                "prev_ema9": prev_ema9,
                "prev_ema21": prev_ema21,
                "curr_ema9": curr_ema9,
                "curr_ema21": curr_ema21,
                "delta": actual_delta,
                "min_delta": min_delta
            }
        )