# base.py

import abc
import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Optional

from infra import infra  # –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Redis

log = logging.getLogger("RULE_BASE")


# üî∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
@dataclass
class SignalResult:
    signal_id: int              # ID –∏–∑ signals_v4
    direction: str              # 'long' –∏–ª–∏ 'short'
    reason: str                 # —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    details: dict               # –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —Ç.–ø.


# üî∏ –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
class SignalRule(abc.ABC):
    def __init__(self, symbol: str, timeframe: str, signal_id: int):
        self.symbol = symbol
        self.timeframe = timeframe
        self.signal_id = signal_id

    @abc.abstractmethod
    def required_indicators(self) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª–∞.
        –ü—Ä–∏–º–µ—Ä: ["ema9", "ema21"]
        """
        pass

    @abc.abstractmethod
    async def update(self, open_time: datetime) -> Optional[SignalResult]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞.
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ open_time ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∞–º–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SignalResult –∏–ª–∏ None.
        """
        pass

    # üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑ Redis TS
    async def fetch_indicator_series(
        self, param: str, length: int, open_time: datetime
    ) -> list[float]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç `length` –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–æ –∏ –≤–∫–ª—é—á–∞—è `open_time`
        —Å —É—á—ë—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (m1, m5, m15)
        """
        TIMEFRAME_MS = {
            "m1": 60_000,
            "m5": 300_000,
            "m15": 900_000,
        }

        interval_ms = TIMEFRAME_MS.get(self.timeframe)
        if not interval_ms:
            log.info(f"[RULE_BASE] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")
            return []

        redis = infra.redis_client
        key = f"ts_ind:{self.symbol}:{self.timeframe}:{param}"

        end_ts = int(open_time.timestamp() * 1000)
        start_ts = end_ts - (length - 1) * interval_ms

        try:
            points = await redis.execute_command("TS.RANGE", key, start_ts, end_ts)
            return [float(v.decode() if isinstance(v, bytes) else v) for _, v in points]
        except Exception as e:
            log.info(f"[RULE_BASE] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {key}: {e}")
            return []