# base.py

import abc
import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Optional

log = logging.getLogger("GEN")

# üî∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
@dataclass
class SignalResult:
    signal_id: int              # ID –∏–∑ signals_v4
    direction: str              # 'long' –∏–ª–∏ 'short'
    reason: str                 # —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    details: dict               # –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —Ç.–ø.

# üî∏ –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
class SignalRule(abc.ABC):
    def __init__(self, symbol: str, timeframe: str, signal_id: int):
        self.symbol = symbol
        self.timeframe = timeframe
        self.signal_id = signal_id

    @abc.abstractmethod
    def required_indicators(self) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª–∞.
        –ü—Ä–∏–º–µ—Ä: ["ema9", "ema21"]
        """
        pass

    @abc.abstractmethod
    async def update(
        self,
        open_time: datetime,
        indicator_values: dict[str, float]
    ) -> Optional[SignalResult]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SignalResult –∏–ª–∏ None.
        """
        pass